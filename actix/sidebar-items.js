window.SIDEBAR_ITEMS = {"attr":[["main","Marks async function to be executed by Actix system."],["test","Marks async test function to be executed by Actix system."]],"derive":[["Message",""],["MessageResponse",""]],"enum":[["ActorState","Actor execution state"],["MailboxError","The errors that can occur during the message delivery process."],["Running",""]],"fn":[["run","Starts the system and executes the supplied future."],["spawn","Spawns a future on the current thread as a new task."]],"mod":[["actors","Helper actors"],["clock","Utilities for tracking time."],["dev","The `actix` prelude for library developers."],["fut","Custom `Future` and `Stream` implementation with `Actix` support"],["io",""],["prelude","The `actix` prelude."],["registry","Actors registry"],["sync","Sync Actors support"],["utils",""]],"struct":[["ActorResponse","A helper type for representing different types of message responses."],["Addr","The address of an actor."],["Arbiter","An Arbiter represents a thread that provides an asynchronous execution environment for futures and functions."],["ArbiterHandle","A handle for sending spawn and stop messages to an [Arbiter]."],["AtomicResponse","A specialized actor future holder for atomic asynchronous message handling."],["Context","An actor execution context."],["MessageResult","A helper type that implements the [`MessageResponse`] trait."],["Recipient","The [`Recipient`] type allows to send one specific message to an actor."],["Response","Helper type for representing different type of message responses"],["SpawnHandle","A handle to a spawned future."],["Supervisor","Actor supervisor"],["System","A manager for a per-thread distributed async runtime."],["SystemRunner","Runner that keeps a [System]â€™s event loop alive until stop message is received."],["WeakAddr","A weakly referenced counterpart to `Addr<A>`."],["WeakRecipient","A weakly referenced counterpart to `Recipient<M>`"]],"trait":[["Actor","Actors are objects which encapsulate state and behavior."],["ActorContext","Actor execution context."],["AsyncContext","Asynchronous execution context."],["Handler","Describes how to handle messages of a specific type."],["Message","Represent message that can be handled by an actor."],["StreamHandler","Stream handling for Actors."],["Supervised","Actors with the ability to restart after failure."]],"type":[["ResponseActFuture","A specialized actor future for asynchronous message handling."],["ResponseFuture","A specialized future for asynchronous message handling."]]};