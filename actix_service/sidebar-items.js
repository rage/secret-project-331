initSidebarItems({"fn":[["apply","Apply transform to a service."],["apply_cfg","Convert `Fn(Config, &Service1) -> Future<Service2>` fn to a service factory."],["apply_cfg_factory","Convert `Fn(Config, &ServiceFactory1) -> Future<ServiceFactory2>` fn to a service factory."],["apply_fn","Apply transform function to a service."],["apply_fn_factory","Service factory that produces `apply_fn` service."],["fn_factory","Create `ServiceFactory` for function that can produce services"],["fn_factory_with_config","Create `ServiceFactory` for function that accepts config argument and can produce services"],["fn_service","Create `ServiceFactory` for function that can act as a `Service`"],["into_service","Convert object of type `U` to a service `S`"],["map_config","Adapt external config argument to a config for provided service factory"],["pipeline","Construct new pipeline with one service in pipeline chain."],["pipeline_factory","Construct new pipeline factory with one service factory."],["unit_config","Replace config with unit."]],"macro":[["always_ready",""],["forward_ready",""]],"mod":[["boxed",""],["dev",""]],"struct":[["Pipeline","Pipeline service - pipeline allows to compose multiple service into one service."],["PipelineFactory","Pipeline factory"]],"trait":[["IntoService","Trait for types that can be converted to a `Service`"],["IntoServiceFactory","Trait for types that can be converted to a `ServiceFactory`"],["Service","An asynchronous operation from `Request` to a `Response`."],["ServiceExt",""],["ServiceFactory","Factory for creating `Service`s."],["ServiceFactoryExt",""],["Transform","The `Transform` trait defines the interface of a service factory that wraps inner service during construction."]]});