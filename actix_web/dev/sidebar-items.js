initSidebarItems({"enum":[["Body","Represents various types of http message body."],["BodySize","Body size hint"],["Payload","Type represent streaming payload"],["ResponseBody",""]],"struct":[["AppConfig","Application connection config"],["AppService","Application configuration"],["ConnectionInfo","`HttpRequest` connection information"],["Extensions","A type map of request extensions."],["HttpResponseBuilder","An HTTP response builder"],["JsonBody","Requestâ€™s payload json parser, it resolves to a deserialized `T` value. This future could be used with `ServiceRequest` and `ServiceFromRequest`."],["Path","Resource path match information"],["Readlines","Stream to read request line by line."],["RequestHead",""],["ResourceDef","ResourceDef describes an entry in resources table"],["ResourceMap",""],["ResponseHead",""],["Server",""],["ServiceRequest","An service http request"],["ServiceResponse",""],["SizedStream","Type represent streaming body. This body implementation should be used if total size of stream is known. Data get sent as is without using transfer encoding."],["Url",""],["UrlEncoded","Future that resolves to a parsed urlencoded values."],["WebService",""]],"trait":[["BodyEncoding","Helper trait that allows to set specific encoding for response."],["HttpServiceFactory",""],["MessageBody","Type that provides this trait can be streamed to a peer."],["ResourcePath",""],["Service","An asynchronous operation from `Request` to a `Response`."],["Transform","The `Transform` trait defines the interface of a service factory that wraps inner service during construction."]],"type":[["PayloadStream","Type represent boxed payload"]]});