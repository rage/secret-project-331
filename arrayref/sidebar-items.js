initSidebarItems({"macro":[["array_mut_ref","You can use `array_mut_ref` to generate a mutable array reference to a subset of a sliceable bit of data (which could be an array, or a slice, or a Vec)."],["array_ref","You can use `array_ref` to generate an array reference to a subset of a sliceable bit of data (which could be an array, or a slice, or a Vec)."],["array_refs","You can use `array_refs` to generate a series of array references to an input array reference.  The idea is if you want to break an array into a series of contiguous and non-overlapping arrays. `array_refs` is a bit funny in that it insists on slicing up the entire array.  This is intentional, as I find it handy to make me ensure that my sub-arrays add up to the entire array.  This macro will never panic, since the sizes are all checked at compile time."],["mut_array_refs","You can use `mut_array_refs` to generate a series of mutable array references to an input mutable array reference.  The idea is if you want to break an array into a series of contiguous and non-overlapping mutable array references.  Like `array_refs!`, `mut_array_refs!` is a bit funny in that it insists on slicing up the entire array.  This is intentional, as I find it handy to make me ensure that my sub-arrays add up to the entire array. This macro will never panic, since the sizes are all checked at compile time."]]});