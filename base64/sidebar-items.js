window.SIDEBAR_ITEMS = {"enum":[["DecodeError","Errors that can occur while decoding."]],"fn":[["decode","Decode base64 using the default engine. Returns a `Result` containing a `Vec<u8>`."],["decode_engine","Decode from string reference as octets using the specified [Engine]. Returns a `Result` containing a `Vec<u8>`."],["decode_engine_slice","Decode the input into the provided output slice."],["decode_engine_vec","Decode from string reference as octets. Writes into the supplied `Vec`, which may allocate if its internal buffer isn’t big enough. Returns a `Result` containing an empty tuple, aka `()`."],["encode","Encode arbitrary octets as base64 using the default engine. Returns a `String`."],["encode_engine","Encode arbitrary octets as base64 using the provided `Engine`. Returns a `String`."],["encode_engine_slice","Encode arbitrary octets as base64. Writes into the supplied output buffer."],["encode_engine_string","Encode arbitrary octets as base64. Writes into the supplied `String`, which may allocate if its internal buffer isn’t big enough."],["encoded_len","Calculate the base64 encoded length for a given input length, optionally including any appropriate padding bytes."]],"mod":[["alphabet","Provides [Alphabet] and constants for alphabets commonly used in the wild."],["display","Enables base64’d output anywhere you might use a `Display` implementation, like a format string."],["engine","Provides the [Engine] abstraction and out of the box implementations."],["read","Implementations of `io::Read` to transparently decode base64."],["write","Implementations of `io::Write` to transparently handle base64."]]};