#!/bin/bash
set -euo pipefail
source "$(dirname "$0")/.common"

ensure_program_in_path grep
ensure_program_in_path head

# Prefer this one
function print_version() {
  program_name=$1
  shift
  binary=$1
  shift
  args=("$@")
  installed_version="Not installed"
  color=$RED
  set +e
  if command -v "$binary" &> /dev/null; then
    installed_version=$($binary "${args[@]}" 2> /dev/null | grep -oE '[0-9]+\.[0-9]+\.[0-9]+' | head -n 1)
    color=$GREEN
  fi
  set -e
  printf "%-15s ${color}%s${RESET_EVERYTHING}\n" "$program_name:" "$installed_version"
}

# If the version has only two numbers, use this
function print_version_two_numbers() {
  program_name=$1
  shift
  binary=$1
  shift
  args=("$@")
  installed_version="Not installed"
  color=$RED
  set +e
  if command -v "$binary" &> /dev/null; then
    installed_version=$($binary "${args[@]}" | grep -oE '[0-9]+\.[0-9]+' | head -n 1)
    color=$GREEN
  fi
  set -e
  printf "%-15s ${color}%s${RESET_EVERYTHING}\n" "$program_name:" "$installed_version"
}

# If there is no way to get the version, use this to just tell whether the program is installed
function print_is_installed() {
  program_name=$1
  shift
  binary=$1
  installed_version="Not installed"
  color=$RED
  set +e
  if command -v "$binary" &> /dev/null; then
    installed_version="Installed"
    color=$GREEN
  fi
  set -e
  printf "%-15s ${color}%s${RESET_EVERYTHING}\n" "$program_name:" "$installed_version"
}

echo "--------[ Rust ]--------"
print_version "Rust" rustc --version
print_version "Cargo version" cargo --version
print_version "Sqlx-cli" sqlx --version
print_is_installed "Cargo sqlx" cargo-sqlx
print_version "Pkg-config" pkg-config --version

echo -e "\n--------[ Node ]--------"
if [ "$(echo "$PATH" | grep -c nvm)" -ne 1 ]; then
  echo -e "${RED}Warning: cannot find nvm${RESET_EVERYTHING}"
fi
print_version "Node" node --version
print_version "Npm" npm --version

echo -e "\n-----[ Kubernetes ]-----"
print_version "Docker" docker --version
print_version "Skaffold" skaffold version
print_version "Kubectl" kubectl version -o yaml
print_version "Kustomize" kustomize version --short
print_version "Minikube" minikube version
print_version "Stern" stern --version
print_is_installed "Kubectx" kubectx

echo -e "\n-----[ Utilities ]------"
print_version "bc" bc --version
print_version_two_numbers "jq" jq --version
print_version "find" find --version
print_version_two_numbers "getent" getent --version
print_is_installed "sponge" sponge
print_version "rsync" rsync --version
print_version "actionlint" actionlint --version
print_version "Oxipng" oxipng --version
