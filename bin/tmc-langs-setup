#!/bin/bash
set -euo pipefail
source "$(dirname "$0")/.common"

BASEDIR="$(dirname "${BASH_SOURCE[0]}")"
FOLDER_PATH="$BASEDIR/../services/tmc/"
RELATIVE_PATH=$(realpath --relative-to="$(pwd)" "$FOLDER_PATH")
run_command cd "$RELATIVE_PATH" || exit

VERSION=$(head -n1 ./src/tmc/cli.d.ts | cut -d= -f2)

# Detect system architecture
ARCH=""
case "$OSTYPE" in
    "linux-gnu"*)
        case "$(uname -m)" in
            "x86_64")
                ARCH="x86_64-unknown-linux-gnu"
                ;;
            "i686")
                ARCH="i686-unknown-linux-gnu"
                ;;
            "aarch64")
                ARCH="aarch64-unknown-linux-gnu"
                ;;
            "armv7l")
                ARCH="armv7-unknown-linux-gnueabihf"
                ;;
            *)
                echo "Unsupported Linux architecture: $(uname -m)"
                exit 1
                ;;
        esac
        ;;
    "darwin"*)
        case "$(uname -m)" in
            "x86_64")
                ARCH="x86_64-apple-darwin"
                ;;
            "arm64")
                ARCH="aarch64-apple-darwin"
                ;;
            *)
                echo "Unsupported macOS architecture: $(uname -m)"
                exit 1
                ;;
        esac
        ;;
    "msys"*|"cygwin"*)
        # For Windows, we can use the PROCESSOR_ARCHITECTURE environment variable
        case "$PROCESSOR_ARCHITECTURE" in
            "AMD64")
                ARCH="x86_64-pc-windows-msvc"
                ;;
            "x86")
                ARCH="i686-pc-windows-msvc"
                ;;
            *)
                echo "Unsupported Windows architecture: $PROCESSOR_ARCHITECTURE"
                exit 1
                ;;
        esac
        ;;
    *)
        echo "Unsupported OS type: $OSTYPE"
        exit 1
        ;;
esac

if [ -z "$ARCH" ]; then
    echo "Could not determine architecture"
    exit 1
fi

# Set file extension based on OS
EXT=""
case "$OSTYPE" in
    "msys"*|"cygwin"*)
        EXT=".exe"
        ;;
esac

LANGS_FILENAME="tmc-langs-cli-$ARCH-$VERSION$EXT"
LANGS_PATH="./bin/$LANGS_FILENAME"
CHECKSUM_FILENAME="$LANGS_FILENAME.sha256"
CHECKSUM_PATH="./bin/$CHECKSUM_FILENAME"

echo "Setup TMC langs version: $VERSION for architecture: $ARCH"

run_command mkdir -p ./bin

verify_checksum() {
    local file=$1
    local checksum_file=$2

    case "$OSTYPE" in
        "msys"*|"cygwin"*)
            # Windows: Use PowerShell's Get-FileHash
            local expected_hash
            local actual_hash
            expected_hash=$(powershell -Command "(Get-Content '$checksum_file' | ForEach-Object { $_.Split(' ')[0] })")
            actual_hash=$(powershell -Command "(Get-FileHash -Path '$file' -Algorithm SHA256).Hash")
            [ "$expected_hash" = "$actual_hash" ]
            ;;
        *)
            # Linux/macOS: Use sha256sum
            local expected_hash
            local actual_hash
            expected_hash=$(cat "$checksum_file" | cut -d' ' -f1)
            actual_hash=$(sha256sum "$file" | cut -d' ' -f1)
            [ "$expected_hash" = "$actual_hash" ]
            ;;
    esac
}

# Check if file exists and verify checksum
if [ -f "$LANGS_PATH" ] && [ -f "$CHECKSUM_PATH" ]; then
    echo "Found existing CLI binary, verifying checksum..."
    if verify_checksum "$LANGS_PATH" "$CHECKSUM_PATH"; then
        echo "Checksum matched, skipping download"
        run_command chmod +x "$LANGS_PATH"
        exit 0
    else
        echo "Checksum verification failed, will download again"
    fi
fi

echo "Removing old CLI versions if any"
run_command find ./bin -maxdepth 1 -type f -name 'tmc-langs-cli-*' -delete

echo "Downloading CLI to $LANGS_PATH"
run_command curl "https://download.mooc.fi/tmc-langs-rust/${LANGS_FILENAME}" --output "$LANGS_PATH"

echo "Downloading checksum"
run_command curl "https://download.mooc.fi/tmc-langs-rust/${CHECKSUM_FILENAME}" --output "$CHECKSUM_PATH"

echo "Verifying checksum"
if ! verify_checksum "$LANGS_PATH" "$CHECKSUM_PATH"; then
    echo "Checksum verification failed"
    exit 1
fi

run_command chmod +x "$LANGS_PATH"
