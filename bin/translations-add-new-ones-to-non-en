#!/usr/bin/env python3

import os
import glob
import json

BASEDIR = os.path.dirname(os.path.realpath(__file__))
TRANSLATIONS_EN_PATH = os.path.join(BASEDIR, "../shared-module/packages/common/src/locales/en")
TRANSLATIONS_EN_RELATIVE_PATH = os.path.relpath(TRANSLATIONS_EN_PATH)
FOLDERS_PATH = os.path.join(BASEDIR, "../shared-module/packages/common/src/locales")
FOLDERS_RELATIVE_PATH = os.path.relpath(FOLDERS_PATH)

def ensure_program_in_path(program):
    if not any(os.access(os.path.join(path, program), os.X_OK) for path in os.environ["PATH"].split(os.pathsep)):
        raise Exception(f"{program} not found in PATH")

ensure_program_in_path('jq')
ensure_program_in_path('sponge')

EN_PATHS = glob.glob(f"{TRANSLATIONS_EN_RELATIVE_PATH}/*.json")
OTHER_LANGUAGE_FOLDERS = [name for name in glob.glob(f"{FOLDERS_RELATIVE_PATH}/*") if os.path.isdir(name) and not name.endswith('/en')]

for original_file in EN_PATHS:
    for target_folder in OTHER_LANGUAGE_FOLDERS:
        target_folder_language = os.path.basename(target_folder)
        target_file = original_file.replace("/en/", f"/{target_folder_language}/")
        print(f"Adding translations {original_file} > {target_file}")

        if os.path.exists(target_file):
            with open(original_file) as f1, open(target_file) as f2:
                data1 = json.load(f1)
                data2 = json.load(f2)

                missing_keys = [key for key in data1 if key not in data2]
                for key in missing_keys:
                    data2[key] = data1[key]

            with open(target_file, 'w') as f:
                json.dump(data2, f, indent=2, ensure_ascii=False)
        else:
            print(f"Target file {target_file} does not exist. Skipping.")

print("\nImportant: remember to translate the new strings before adding them to version control")
