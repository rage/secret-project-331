window.SIDEBAR_ITEMS = {"constant":[["SESSION_KEY",""]],"enum":[["Action","Describes an action that a user can take on some resource."],["Resource","The target of an action."]],"fn":[["authorize","The authorization token is the only way to return a controller result, and should only be used in controller functions that return a response to the user."],["authorize_access_to_course_material","Can be used to check whether user is allowed to view some course material"],["authorize_with_fetched_list_of_roles","Same as `authorize`, but takes as an argument Vec so that we avoid fetching the roles from the database for optimization reasons. This is useful when weâ€™re checking multiple authorizations at once."],["check_course_instance_permission","Also checks organization and course roles which are valid for course instances."],["check_course_or_exam_permission",""],["check_course_permission","Also checks organization role which is valid for courses."],["check_exam_permission","Also checks organization role which is valid for exams."],["check_material_reference_permissions",""],["check_organization_permission",""],["check_study_registry_permission",""],["forget","Forgets authentication from the current session, if any."],["has_auth_user_session","Checks if the user is authenticated in the given session."],["has_permission",""],["parse_secret_key_from_header",""],["remember","Stores the user as authenticated in the given session."],["skip_authorize","Skips the authorize() and returns AuthorizationToken, needed in functions with anonymous and test users"]],"struct":[["ActionOnResource",""],["AuthUser","Extractor for an authenticated user."],["AuthorizationToken","Validates that user has right to function"],["AuthorizedResponse","Responder for AuthorizationToken"]]};