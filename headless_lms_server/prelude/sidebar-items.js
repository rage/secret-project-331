window.SIDEBAR_ITEMS = {"derive":[["Deserialize",""],["FromRow",""],["Serialize",""],["Type",""]],"enum":[["PKeyPolicy","Helper struct to use with functions that insert data into the database."]],"macro":[["generated_docs","Includes the typeâ€™s JSON example generated by doc-file-generator as a string. Used with the helper macro from the doc-macro crate: #[generated_doc]"]],"mod":[["web","Essentials helper functions and types for application registration."]],"struct":[["ApplicationConfiguration",""],["HttpRequest","An incoming request."],["HttpResponse","An outgoing response."],["Multipart","The server-side implementation of `multipart/form-data` requests."],["Pagination","Represents the URL query parameters `page` and `limit`, used for paginating database queries."],["PgConnection","A connection to a PostgreSQL database."],["ServiceConfig","Enables parts of app configuration to be declared separately from the app itself. Helpful for modularizing large applications."],["Uuid","A Universally Unique Identifier (UUID)."]],"trait":[["BackendError","The error types of this program all implement this trait for interoperability."],["Connection","Represents a single database connection."],["Context","Provides the `context` method for `Result`."],["Deserialize","A data structure that can be deserialized from any data format supported by Serde."],["FileStore","Allows storing files to a file storage backend."],["FromRow","A record that can be built from a row returned by the database."],["Serialize","A data structure that can be serialized into any data format supported by Serde."],["TryToOptional",""],["Type","Indicates that a SQL type is supported for a database."]],"type":[["PgPool","An alias for [`Pool`][crate::pool::Pool], specialized for Postgres."]]};