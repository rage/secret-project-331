initSidebarItems({"enum":[["ErrorKind","A list specifying general categories of I/O error."],["SeekFrom","Enumeration of possible methods to seek within an I/O object."]],"fn":[["copy","Copies the entire contents of a reader into a writer."],["empty","Constructs a new handle to an empty reader."],["read_to_string","Read all bytes from a [reader][Read] into a new [`String`]."],["repeat","Creates an instance of a reader that infinitely repeats one byte."],["sink","Creates an instance of a writer which will successfully consume all data."],["stderr","Constructs a new handle to the standard error of the current process."],["stderr_locked","Constructs a new locked handle to the standard error of the current process."],["stdin","Constructs a new handle to the standard input of the current process."],["stdin_locked","Constructs a new locked handle to the standard input of the current process."],["stdout","Constructs a new handle to the standard output of the current process."],["stdout_locked","Constructs a new locked handle to the standard output of the current process."]],"mod":[["prelude","The I/O Prelude."]],"struct":[["BufReader","The `BufReader<R>` struct adds buffering to any reader."],["BufWriter","Wraps a writer and buffers its output."],["Bytes","An iterator over `u8` values of a reader."],["Chain","Adapter to chain together two readers."],["Cursor","A `Cursor` wraps an in-memory buffer and provides it with a [`Seek`] implementation."],["Empty","A reader which is always at EOF."],["Error","The error type for I/O operations of the `Read`, `Write`, `Seek`, and associated traits."],["IntoInnerError","An error returned by [`BufWriter::into_inner`] which combines an error that happened while writing out the buffer, and the buffered writer object which may be used to recover from the condition."],["IoSlice","A buffer type used with `Write::write_vectored`."],["IoSliceMut","A buffer type used with `Read::read_vectored`."],["LineWriter","Wraps a writer and buffers output to it, flushing whenever a newline (`0x0a`, `'\\n'`) is detected."],["Lines","An iterator over the lines of an instance of `BufRead`."],["ReadBuf","A wrapper around a byte buffer that is incrementally filled and initialized."],["Repeat","A reader which yields one byte over and over and over and over and over andâ€¦"],["Sink","A writer which will move data into the void."],["Split","An iterator over the contents of an instance of `BufRead` split on a particular byte."],["Stderr","A handle to the standard error stream of a process."],["StderrLock","A locked reference to the [`Stderr`] handle."],["Stdin","A handle to the standard input stream of a process."],["StdinLock","A locked reference to the [`Stdin`] handle."],["Stdout","A handle to the global standard output stream of the current process."],["StdoutLock","A locked reference to the [`Stdout`] handle."],["Take","Reader adapter which limits the bytes read from an underlying reader."],["WriterPanicked","Error returned for the buffered data from `BufWriter::into_parts`, when the underlying writer has previously panicked.  Contains the (possibly partly written) buffered data."]],"trait":[["BufRead","A `BufRead` is a type of `Read`er which has an internal buffer, allowing it to perform extra ways of reading."],["Read","The `Read` trait allows for reading bytes from a source."],["Seek","The `Seek` trait provides a cursor which can be moved within a stream of bytes."],["Write","A trait for objects which are byte-oriented sinks."]],"type":[["Result","A specialized `Result` type for I/O operations."]]});