initSidebarItems({"fn":[["available_parallelism","Returns an estimate of the default amount of parallelism a program should use."],["current","Gets a handle to the thread that invokes it."],["panicking","Determines whether the current thread is unwinding because of panic."],["park","Blocks unless or until the current thread’s token is made available."],["park_timeout","Blocks unless or until the current thread’s token is made available or the specified duration has been reached (may wake spuriously)."],["park_timeout_ms","Use [`park_timeout`]."],["sleep","Puts the current thread to sleep for at least the specified amount of time."],["sleep_ms","Puts the current thread to sleep for at least the specified amount of time."],["spawn","Spawns a new thread, returning a [`JoinHandle`] for it."],["yield_now","Cooperatively gives up a timeslice to the OS scheduler."]],"struct":[["AccessError","An error returned by `LocalKey::try_with`."],["Builder","Thread factory, which can be used in order to configure the properties of a new thread."],["JoinHandle","An owned permission to join on a thread (block on its termination)."],["LocalKey","A thread local storage key which owns its contents."],["Thread","A handle to a thread."],["ThreadId","A unique identifier for a running thread."],["__FastLocalKeyInner",""],["__OsLocalKeyInner",""]],"type":[["Result","A specialized `Result` type for threads."]]});