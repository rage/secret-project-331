initSidebarItems({"constant":[["TRACE_FLAG_DEBUG","TRACE_FLAGS_DEBUG is a bitmask with the debug bit set."],["TRACE_FLAG_DEFERRED","TRACE_FLAGS_DEFERRED is a bitmask with the deferred bit set. A SpanContext with the deferred bit set means the sampling decision has been defered to the receiver."],["TRACE_FLAG_NOT_SAMPLED","A SpanContext with TRACE_FLAG_NOT_SAMPLED means the span is not sampled."],["TRACE_FLAG_SAMPLED","TRACE_FLAG_SAMPLED is a bitmask with the sampled bit set. A SpanContext with the sampling bit set means the span is sampled."]],"enum":[["SpanKind","`SpanKind` describes the relationship between the Span, its parents, and its children in a `Trace`. `SpanKind` describes two independent properties that benefit tracing systems during analysis."],["StatusCode","The `StatusCode` interface represents the status of a finished `Span`. It’s composed of a canonical code in conjunction with an optional descriptive message."],["TraceError","Errors returned by the trace API."]],"fn":[["get_active_span","Executes a closure with a reference to this thread’s current span."],["mark_span_as_active","Mark a given `Span` as active."]],"struct":[["Event","A `Span` has the ability to add events. Events have a time associated with the moment when they are added to the `Span`."],["Link","During the `Span` creation user MUST have the ability to record links to other `Span`s. Linked `Span`s can be from the same or a different trace."],["NoopSpan","A no-op instance of a `Span`."],["NoopSpanExporter","A no-op instance of an `SpanExporter`."],["NoopTracer","A no-op instance of a `Tracer`."],["NoopTracerProvider","A no-op instance of a `TracerProvider`."],["SpanBuilder","`SpanBuilder` allows span attributes to be configured before the span has started."],["SpanContext","Immutable portion of a `Span` which can be serialized and propagated."],["SpanId","SpanId is an 8-byte value which uniquely identifies a given span within a trace The actual `u64` value is wrapped in a tuple struct in order to leverage the newtype pattern"],["TraceId","TraceId is an 16-byte value which uniquely identifies a given trace The actual `u128` value is wrapped in a tuple struct in order to leverage the newtype pattern"],["TraceState","TraceState carries system-specific configuration data, represented as a list of key-value pairs. TraceState allows multiple tracing systems to participate in the same trace."]],"trait":[["FutureExt","Extension trait allowing futures, streams, and sinks to be traced with a span."],["IdGenerator","Interface for generating IDs"],["Span","Interface for a single operation within a trace."],["TraceContextExt","Methods for storing and retrieving trace data in a context."],["Tracer","Interface for constructing `Span`s."],["TracerProvider","An interface to create `Tracer` instances."]],"type":[["TraceResult","Describe the result of operations in tracing API."]]});