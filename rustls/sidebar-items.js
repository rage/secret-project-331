window.SIDEBAR_ITEMS = {"enum":[["AlertDescription","The `AlertDescription` TLS protocol enum.  Values in this enum are taken from the various RFCs covering TLS, and are listed by IANA. The `Unknown` item is used when processing unrecognised ordinals."],["BulkAlgorithm","Bulk symmetric encryption scheme used by a cipher suite."],["CipherSuite","The `CipherSuite` TLS protocol enum.  Values in this enum are taken from the various RFCs covering TLS, and are listed by IANA. The `Unknown` item is used when processing unrecognised ordinals."],["Connection","A client or server connection."],["ContentType","The `ContentType` TLS protocol enum.  Values in this enum are taken from the various RFCs covering TLS, and are listed by IANA. The `Unknown` item is used when processing unrecognised ordinals."],["Error","rustls reports protocol errors using this type."],["HandshakeType","The `HandshakeType` TLS protocol enum.  Values in this enum are taken from the various RFCs covering TLS, and are listed by IANA. The `Unknown` item is used when processing unrecognised ordinals."],["NamedGroup","The `NamedGroup` TLS protocol enum.  Values in this enum are taken from the various RFCs covering TLS, and are listed by IANA. The `Unknown` item is used when processing unrecognised ordinals."],["ProtocolVersion","The `ProtocolVersion` TLS protocol enum.  Values in this enum are taken from the various RFCs covering TLS, and are listed by IANA. The `Unknown` item is used when processing unrecognised ordinals."],["ServerName","Encodes ways a client can know the expected name of the server."],["SignatureAlgorithm","The `SignatureAlgorithm` TLS protocol enum.  Values in this enum are taken from the various RFCs covering TLS, and are listed by IANA. The `Unknown` item is used when processing unrecognised ordinals."],["SignatureScheme","The `SignatureScheme` TLS protocol enum.  Values in this enum are taken from the various RFCs covering TLS, and are listed by IANA. The `Unknown` item is used when processing unrecognised ordinals."],["SupportedCipherSuite","A cipher suite supported by rustls."]],"mod":[["cipher_suite","All defined ciphersuites appear in this module."],["client","Items for use in a client."],["internal","Internal classes which may be useful outside the library. The contents of this section DO NOT form part of the stable interface."],["kx_group","All defined key exchange groups appear in this module."],["manual","This is the rustls manual."],["server","Items for use in a server."],["sign","Message signing interfaces and implementations."],["version","All defined protocol versions appear in this module."]],"static":[["ALL_CIPHER_SUITES","A list of all the cipher suites supported by rustls."],["ALL_KX_GROUPS","A list of all the key exchange groups supported by rustls."],["ALL_VERSIONS","A list of all the protocol versions supported by rustls."],["DEFAULT_CIPHER_SUITES","The cipher suite configuration that an application should use by default."],["DEFAULT_VERSIONS","The version configuration that an application should use by default."]],"struct":[["Certificate","This type contains a single certificate by value."],["ClientConfig","Common configuration for (typically) all connections made by a program."],["ClientConnection","This represents a single TLS client connection."],["CommonState","Connection state common to both client and server connections."],["ConfigBuilder","Building a `ServerConfig` or `ClientConfig` in a linker-friendly and complete way."],["ConnectionCommon","Interface shared by client and server connections."],["DigitallySignedStruct",""],["IoState","Values of this structure are returned from [`Connection::process_new_packets`] and tell the caller the current I/O state of the TLS connection."],["KeyLogFile","[`KeyLog`] implementation that opens a file whose name is given by the `SSLKEYLOGFILE` environment variable, and writes keys into it."],["NoKeyLog","KeyLog that does exactly nothing."],["OwnedTrustAnchor","A trust anchor, commonly known as a “Root Certificate.”"],["PrivateKey","This type contains a private key by value."],["Reader","A structure that implements [`std::io::Read`] for reading plaintext."],["RootCertStore","A container for root certificates able to provide a root-of-trust for connection authentication."],["ServerConfig","Common configuration for a set of server sessions."],["ServerConnection","This represents a single TLS server connection."],["Stream","This type implements `io::Read` and `io::Write`, encapsulating a Connection `C` and an underlying transport `T`, such as a socket."],["StreamOwned","This type implements `io::Read` and `io::Write`, encapsulating and owning a Connection `C` and an underlying blocking transport `T`, such as a socket."],["SupportedKxGroup","A key-exchange group supported by rustls."],["SupportedProtocolVersion","A TLS protocol version supported by rustls."],["Ticketer","A concrete, safe ticket creation mechanism."],["Tls12CipherSuite","A TLS 1.2 cipher suite supported by rustls."],["Tls13CipherSuite","A TLS 1.3 cipher suite supported by rustls."],["WantsCipherSuites","Config builder state where the caller must supply cipher suites."],["WantsKxGroups","Config builder state where the caller must supply key exchange groups."],["WantsVerifier","Config builder state where the caller must supply a verifier."],["WantsVersions","Config builder state where the caller must supply TLS protocol versions."],["Writer","A structure that implements [`std::io::Write`] for writing plaintext."]],"trait":[["ConfigSide","Helper trait to abstract [`ConfigBuilder`] over building a `ClientConfig` or `ServerConfig`."],["KeyLog","This trait represents the ability to do something useful with key material, such as logging it to a file for debugging."],["SideData","Data specific to the peer’s side (client or server)."]],"type":[["DistinguishedNames","DistinguishedNames is a `Vec<Vec<u8>>` wrapped in internal types. Each element contains the DER or BER encoded `Subject` field from RFC 5280 for a single certificate. The Subject field is encoded as an RFC 5280 `Name`. It can be decoded using x509-parser’s FromDer trait."]]};