searchState.loadedDescShard("actix_extensible_rate_limit", 0, "Rate limiting middleware for actix-web\nA trait that a Backend::Output should implement in order …\nRate limit middleware.\nSets the RateLimiterBuilder::request_allowed_transformation…\nArguments\nChoose whether to allow a request if the backend returns a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nValue for the <code>x-ratelimit-limit</code> header.\nValue for the <code>x-ratelimit-remaining</code> header.\nIn the event that the request is allowed:\nIn the event that the request is denied, configure the …\nAfter processing a request, attempt to rollback the …\nConfigures the RateLimiterBuilder::rollback_condition to …\nValue for the <code>x-ratelimit-reset</code> and <code>retry-at</code> headers.\nDescribes an implementation of a rate limiting store and …\nAdditional functions for a Backend that uses SimpleInput …\nA default Backend Input structure.\nUtility to create a input function that produces a …\nA default Backend::Output structure.\nDynamically add a custom component to the rate limiting key\nAdd a custom component to the rate limiting key\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe rate limiting interval.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe rate limit key to be used for this request.\nTotal number of requests that are permitted within the …\nThe total requests to be allowed within the interval.\nAdd the request path to the rate limiting key\nAdds the connection peer IP to the rate limiting key.\nAdds the client’s real IP to the rate limiting key.\nNumber of requests that will be permitted until the limit …\nRemoves the bucket for a given rate limit key.\nProcess an incoming request.\nTime at which the rate limit resets.\nUnder certain conditions we may not want to rollback the …\nSeconds until the rate limit resets (rounded upwards, so …\nA Fixed Window rate limiter Backend that uses Dashmap to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOverride the default garbage collector interval.")