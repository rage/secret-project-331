searchState.loadedDescShard("actix_http", 0, "HTTP types and services for the Actix ecosystem.\n202 Accepted [RFC7231, Section 6.3.3]\n208 Already Reported [RFC5842]\n502 Bad Gateway [RFC7231, Section 6.6.3]\n400 Bad Request [RFC7231, Section 6.5.1]\nA boxed payload stream.\n409 Conflict [RFC7231, Section 6.5.8]\nCONNECT\n100 Continue [RFC7231, Section 6.2.1]\n201 Created [RFC7231, Section 6.3.2]\nClose connection after response.\nRepresents various types of connection\nDELETE\nKeep-alive is disabled.\n417 Expectation Failed [RFC7231, Section 6.5.14]\nA type map for request extensions.\n424 Failed Dependency [RFC4918]\n403 Forbidden [RFC7231, Section 6.5.3]\n302 Found [RFC7231, Section 6.4.3]\n504 Gateway Timeout [RFC7231, Section 6.6.5]\nGET\n410 Gone [RFC7231, Section 6.5.9]\nHEAD\n<code>HTTP/0.9</code>\n<code>HTTP/1.0</code>\n<code>HTTP/1.1</code>\n<code>HTTP/2.0</code>\n<code>HTTP/3.0</code>\n505 HTTP Version Not Supported [RFC7231, Section 6.6.6]\nTrait that implements general purpose operations on HTTP …\nA <code>ServiceFactory</code> for HTTP/1.1 and HTTP/2 connections.\nAn HTTP service builder.\n418 I’m a teapot [curiously not registered by IANA but …\n226 IM Used [RFC3229]\n507 Insufficient Storage [RFC4918]\n500 Internal Server Error [RFC7231, Section 6.6.1]\nConnection keep-alive config.\nKeep connection alive after response.\n411 Length Required [RFC7231, Section 6.5.10]\n423 Locked [RFC4918]\n508 Loop Detected [RFC5842]\n405 Method Not Allowed [RFC7231, Section 6.5.5]\n421 Misdirected Request RFC7540, Section 9.1.2\n301 Moved Permanently [RFC7231, Section 6.4.2]\n300 Multiple Choices [RFC7231, Section 6.4.1]\n207 Multi-Status [RFC4918]\nThe Request Method (VERB)\n511 Network Authentication Required [RFC6585]\n203 Non-Authoritative Information [RFC7231, Section 6.3.4]\n406 Not Acceptable [RFC7231, Section 6.5.6]\n510 Not Extended [RFC2774]\n404 Not Found [RFC7231, Section 6.5.4]\n501 Not Implemented [RFC7231, Section 6.6.2]\n304 Not Modified [RFC7232, Section 4.1]\n204 No Content [RFC7231, Section 6.3.5]\n200 OK [RFC7231, Section 6.3.1]\nOPTIONS\nRely on OS to shutdown TCP connection.\n206 Partial Content [RFC7233, Section 4.1]\nPATCH\n413 Payload Too Large [RFC7231, Section 6.5.11]\n402 Payment Required [RFC7231, Section 6.5.2]\n308 Permanent Redirect [RFC7238]\nPOST\n412 Precondition Failed [RFC7232, Section 4.2]\n428 Precondition Required [RFC6585]\n102 Processing [RFC2518]\n407 Proxy Authentication Required [RFC7235, Section 3.2]\nPUT\nA streaming payload.\nA major HTTP protocol version.\n416 Range Not Satisfiable [RFC7233, Section 4.4]\n431 Request Header Fields Too Large [RFC6585]\n408 Request Timeout [RFC7231, Section 6.5.7]\n205 Reset Content [RFC7231, Section 6.3.6]\nAn HTTP request.\nAn HTTP response.\nAn HTTP response builder.\n303 See Other [RFC7231, Section 6.4.4]\n503 Service Unavailable [RFC7231, Section 6.6.4]\n101 Switching Protocols [RFC7231, Section 6.2.2]\nHTTP service configuration.\nAn HTTP status code (<code>status-code</code> in RFC 7230 et al.).\nType of message payload stream\n307 Temporary Redirect [RFC7231, Section 6.4.7]\n429 Too Many Requests [RFC6585]\nTRACE\nKeep-alive duration.\n401 Unauthorized [RFC7235, Section 3.1]\n451 Unavailable For Legal Reasons [RFC7725]\n422 Unprocessable Entity [RFC4918]\n415 Unsupported Media Type [RFC7231, Section 6.5.13]\n426 Upgrade Required [RFC7231, Section 6.5.15]\n414 URI Too Long [RFC7231, Section 6.5.12]\n305 Use Proxy [RFC7231, Section 6.4.5]\nConnection is upgraded to different type.\nThe URI component of a request.\n506 Variant Also Negotiates [RFC2295]\nRepresents a version of the HTTP spec.\nAppend a header, keeping any that were set with an …\nReturn a &amp;str representation of the HTTP method\nReturns a &amp;str representation of the <code>StatusCode</code>\nReturns the <code>u16</code> corresponding to this <code>StatusCode</code>.\nGet the authority of this <code>Uri</code>.\nConstructs a new response with status 400 Bad Request.\nTraits and structures to aid consuming and writing HTTP …\nGenerate response with a wrapped body.\nReturns a reference to the body of this response.\nConstructs a new response builder.\nConstructs builder for <code>HttpService</code> instance.\nCreates a new builder-style object to manufacture a <code>Uri</code>.\nIs to uppercase headers with Camel-Case. Default is <code>false</code>\nGet the standardised <code>reason-phrase</code> for this status code.\nCheck if request has chunked transfer encoding.\nCheck if request has chunked transfer encoding.\nGet response body chunking state\nGet response body chunking state\nClear the <code>Extensions</code> of all inserted extensions.\nCreates a time object representing the deadline for the …\nSet client connection disconnect timeout.\nCreates a time object representing the deadline for the …\nSet client request timeout (for first request).\nReturns a reference a piece of connection data set in an …\nConnection type\nCheck if map contains an item of a given type.\nRead the request content type. If request did not contain …\nRead the request content type. If request did not contain …\nSet response content type.\nDrops body and returns new response.\nContent-Encoding support.\nGet content type encoding.\nGet content type encoding.\nError and Result module\nProvide service for <code>EXPECT: 100-Continue</code> support.\nSets service for <code>Expect: 100-Continue</code> handling.\nRequest contains <code>EXPECT</code> header.\nExtends self with the items from another <code>Extensions</code>.\nReturns a reference to the request-local data/extensions …\nReturns a reference to the request-local data/extensions …\nReturns a mutable reference to the request-local …\nReturns a mutable reference to the request-local …\nFinish service configuration and create <code>HttpService</code> …\nGenerate response with an empty body.\nForce-close connection, even if it is marked as keep-alive.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a slice of bytes to an HTTP method.\nConverts a &amp;u8 to a status code\nAttempt to convert a <code>Bytes</code> buffer to a <code>Uri</code>.\nAttempt to convert a <code>Parts</code> into a <code>Uri</code>.\nConvert a <code>Uri</code> from a static string.\nConverts a u16 to a status code.\nGet a reference to an item of a given type.\nGet a mutable reference to an item of a given type.\nHTTP/1 protocol implementation.\nFinish service configuration and create a service for the …\nHTTP/2 protocol.\nFinish service configuration and create a service for the …\nHttp message part of the request\nReturns a reference to the head of this response.\nReturns a mutable reference to the head of this response.\nPre-defined <code>HeaderName</code>s, traits for parsing and …\nRead the message headers.\nReturns a reference to response headers.\nRead the message headers.\nRead the message headers.\nMutable reference to the message’s headers.\nReturns a mutable reference to response headers.\nMutable reference to the message headers.\nMutable reference to the message headers.\nGet the host of this <code>Uri</code>.\nInsert an item into the map.\nInsert a header, replacing any that were set with an …\nConstructs a new response with status 500 Internal Server …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the response body, dropping all other parts.\nSplit request into request head and payload\nReturns split head and body.\nConvert a <code>Uri</code> into <code>Parts</code>.\nCheck if status is within 400-499.\nWhether a method is considered “idempotent”, meaning …\nCheck if status is within 100-199.\nCheck if status is within 300-399.\nWhether a method is considered “safe”, meaning the …\nCheck if status is within 500-599.\nCheck if status is within 200-299.\nSet connection keep-alive setting.\nSet connection type to KeepAlive\nReturns true if keep-alive is enabled.\nConnection keep-alive setting.\nCheck if keep-alive is enabled\nCreates a time object representing the deadline for this …\nSet the local address that this service is bound to.\nReturns the local address that this server is bound to.\nMap the current body type to another using a closure, …\nMap the current body to a type-erased <code>BoxBody</code>.\nGenerate response with a body.\nRead the Request method.\nConvert the request content type to a known mime type.\nConvert the request content type to a known mime type.\nGet new message from the pool of objects\nCreate new Request instance\nCreate response builder\nConstructs a new response with default body.\nConstructs new <code>HttpService</code> instance from service with …\nCreate instance of <code>ServiceConfig</code>.\nCreates an empty <code>Extensions</code>.\nCreate new instance of <code>ResponseHead</code> type\nDisable chunked transfer encoding for HTTP/1.1 streaming …\nSet no chunking for payload\nConstructs a new response with status 404 Not Found.\nConstructs a new response with status 200 OK.\nSets the callback to be run on connection establishment.\nThe target path of this Request.\nGet the path of this <code>Uri</code>.\nReturns the path &amp; query components of the Uri\nGet request’s payload\nPeer socket address.\nWill only be None when called in unit tests unless set …\nGet the port part of this <code>Uri</code>.\nGet the port of this <code>Uri</code> as a <code>u16</code>.\nGet the query string of this <code>Uri</code>, starting after the <code>?</code>.\nSet the custom reason for the response.\nGet custom reason for the response\nRemove an item from the map of a given type.\nCreate new Request instance\nGet the scheme of this <code>Uri</code>.\nGet the scheme of this <code>Uri</code> as a <code>&amp;str</code>.\nSet connection secure state\nReturns <code>true</code> if connection is secure (i.e., using TLS / …\nSets new body.\nSet <code>true</code> to send headers which are formatted as Camel-Case.\nSets the flag that controls whether to send headers …\nSet connection type of the message\nSet connection type of the message\nSet HTTP status code of this response.\nReturns the status code of this response.\nReturns a mutable reference the status code of this …\nCreate an owned <code>ResponseBuilder</code>, leaving the original in a …\nTakes current payload and replaces it with <code>None</code> value\nReturns the connection-level data/extensions container if …\nMessage payload stream\nGet request’s payload\nReturns the request-local data/extensions container, …\nCreates TCP stream service from HTTP service.\nCreates TCP stream service from HTTP service that …\nVarious testing helpers for use in internal and app tests.\nProvide service for custom <code>Connection: UPGRADE</code> support.\nCheck if request requires connection upgrade\nSet connection type to <code>Upgrade</code>.\nReturns true if connection upgrade is enabled.\nSets service for custom <code>Connection: Upgrade</code> handling.\nConnection upgrade status\nCheck upgrade status of this message\nURI component of request and response lines\nRequest’s uri.\nMutable reference to the request’s uri.\nRead the Request Version.\nConstructs a new response with given body.\nCreate new Request instance\nWebSocket protocol implementation.\nError type returned from <code>to_bytes_limited</code> when body …\nBody size hint.\nStreaming response wrapper.\nA boxed message body with boxed errors.\nAn “either” type specialized for body types.\nThe type of error that will be returned if streaming body …\nA body of type <code>L</code>.\nAn interface for types that can be used as a response body.\nBody type for responses that forbid payloads.\nImplicitly empty body.\nA body of type <code>R</code>.\nKnown size body.\nKnown sized streaming response wrapper.\nUnknown size body.\nEquivalent to <code>BodySize::Sized(0)</code>;\nReturns a mutable pinned reference to the inner message …\nWraps this body into a <code>BoxBody</code>.\nWraps this body into a <code>BoxBody</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if size hint indicates omitted or empty body.\nCreates new <code>EitherBody</code> using left variant.\nBoxes body type, erasing type information.\nCreates new <code>EitherBody</code> left variant with a boxed right …\nConstructs new “none” body.\nAttempt to pull out the next chunk of body bytes.\nAttempts to pull out the next value of the underlying …\nAttempts to pull out the next value of the underlying …\nCreates new <code>EitherBody</code> using right variant.\nBody size hint.\nCollects all the bytes produced by <code>body</code>.\nCollects the bytes produced by <code>body</code>, up to <code>limit</code> bytes.\nTry to convert into the complete chunk of body bytes.\nTry to convert into the complete chunk of body bytes.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstruct decoder based on headers.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstruct a decoder.\nBody streaming error.\nA set of error that can occur during parsing content type.\nDisconnect timeout. Makes sense for TLS streams.\nA set of errors that can occur during dispatching HTTP …\nContent encoding stream corruption.\nHTTP/2 error.\nHandler dropped payload before reading EOF.\nAn invalid <code>Header</code>.\nHTTP/2 payload error.\nA generic “error” for HTTP connections\nA message reached EOF, but is not complete.\nA payload reached EOF, but is not complete.\nInternal error.\nA possible error value when converting a <code>StatusCode</code> from a …\nAn I/O error that occurred while trying to read or write …\nGeneric I/O error.\nAn <code>io::Error</code> that occurred while trying to read or write …\nAn invalid <code>Method</code>, such as <code>GE.T</code>.\nPayload reached size limit.\nRequest parse error.\nA set of errors that can occur during parsing HTTP streams.\nCan not parse content type.\nA set of errors that can occur during payload parsing.\nService error.\nThe first request did not complete within the specified …\nAn invalid <code>Status</code>, such as <code>1337 ELITE</code>.\nA timeout occurred waiting for an IO event.\nA message head is too large to be reasonable.\nUnknown content encoding.\nPayload length is unknown.\nUpgrade service error.\nAn invalid <code>Uri</code>, such as <code>exam ple.domain</code>.\nParsing a field as string failed.\nAn invalid <code>HttpVersion</code>, such as <code>HTP/1.1</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn a reference to the lower level, inner error.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn true if the underlying error has the same type as T.\nPayload chunk.\nHTTP/1 Codec\nHTTP/1 Payload Codec\nHTTP/1 Codec\nDispatcher for HTTP/1.1 protocol\n<code>ServiceFactory</code> implementation for HTTP1 transport\n<code>Service</code> implementation for HTTP/1 transport\nHTTP message.\nCodec message\nIncoming request type\nBuffered stream of bytes chunks\nSend HTTP/1 response\nCreates a payload stream.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTransform payload codec to a message codec\nConvert message codec to a payload codec\nCheck if last response is keep-alive\nCheck if last response is keep-alive\nCheck if last response is keep-alive.\nCheck if keep-alive enabled on server level.\nCheck last request’s message type\nCheck last request’s message type.\nCreate HTTP/1 codec.\nCreate HTTP/1 codec.\nCreate simple tcp stream service\nPut unused data back to payload\nCheck if request is upgrade\nCheck if request is upgrade.\nDispatcher for HTTP/2 protocol.\n<code>ServiceFactory</code> implementation for HTTP/2 transport\nHTTP/2 peer stream.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate plain TCP based service\nAdvertises which content types the client is able to …\nAdvertises which character set the client is able to …\nAdvertises which content encoding the client is able to …\nAdvertises which languages the client is able to …\nMarker used by the server to advertise partial request …\nPreflight response indicating if the response to the …\nPreflight response indicating permitted HTTP headers.\nPreflight header response indicating permitted access …\nIndicates whether the response can be shared with …\nIndicates which headers can be exposed as part of the …\nIndicates how long the results of a preflight request can …\nInforms the server which HTTP headers will be used when an …\nInforms the server know which HTTP method will be used …\nIndicates the time in seconds the object has been in a …\nLists the set of methods support by a resource.\nAdvertises the availability of alternate services to …\nContains the credentials to authenticate a user agent with …\nSealed trait implemented for types that can be effectively …\nBig5\nA format using the Brotli algorithm.\nSpecifies directives for caching mechanisms in both …\nResponse header field that indicates how caches have …\nResponse header field that allows origin servers to …\nControls whether or not the network connection stays open …\nIndicates if the content is expected to be displayed …\nUsed to compress the media-type.\nUsed to describe the languages intended for the audience.\nIndicates the size of the entity-body.\nIndicates an alternate location for the returned data.\nIndicates where in a full body message a partial message …\nAllows controlling resources the user agent is allowed to …\nAllows experimenting with policies by monitoring their …\nUsed to indicate the media type of the resource.\nContains stored HTTP cookies previously sent by the server …\nResponse header that prevents a document from loading any …\nResponse header that allows you to ensure a top-level …\nResponse header that conveys a desire that the browser …\nA MIME character set.\nRepresents a supported content encoding.\nContains the date and time at which the message was …\nIndicates the client’s tracking preference.\nA format using the zlib structure with deflate algorithm.\nIdentifier for a specific version of a resource.\nIndicates expectations that need to be fulfilled by the …\nContains the date/time after which the response is …\nThe type returned in the event of a conversion error.\nEUC-JP\nEUC-KR\nAn arbitrary charset specified as a string\nThe value part of an extended parameter consisting of …\nContains information from the client-facing side of proxy …\nContains an Internet email address for a human user who …\nGB2312\nGzip algorithm.\nSpecifies the domain name of the server and (optionally) …\nAn interface for types that already represent a valid …\nRepresents an HTTP header field name\nRepresents an HTTP header field value.\nA timestamp with HTTP-style formatting and parsing.\nMakes a request conditional based on the E-Tag.\nMakes a request conditional based on the modification date.\nMakes a request conditional based on the E-Tag.\nMakes a request conditional based on range.\nMakes the request conditional based on the last …\nIndicates the no-op identity encoding.\nA possible error when converting a <code>HeaderName</code> from another …\nA possible error when converting a <code>HeaderValue</code> from a …\nISO-2022-JP\nISO-2022-JP-2\nISO-2022-KR\nISO-8859-1\nISO-8859-10\nISO-8859-2\nISO-8859-3\nISO-8859-4\nISO-8859-5\nISO-8859-6\nISO-8859-6-E\nISO-8859-6-I\nISO-8859-7\nISO-8859-8\nISO-8859-8-E\nISO-8859-8-I\nISO-8859-9\nKOI8-R\nContent-Types that are acceptable for the response.\nAllows the server to point an interested client to another …\nIndicates the URL to redirect a page to.\nA language tag as described in RFC 5646.\nThe maximum quality value, equivalent to <code>q=1.0</code>.\nIndicates the max number of intermediaries the request …\nThe minimum, non-zero quality value, equivalent to <code>q=0.001</code>.\nIndicates where a fetch originates from.\nResponse header that provides a mechanism to allow and …\nHTTP/1.0 header usually used for backwards compatibility.\nDefines the authentication method that should be used to …\nContains the credentials to authenticate a user agent to a …\nAssociates a specific cryptographic public key with a …\nSends reports of pinning violation to the report-uri …\nRepresents a quality used in q-factor values.\nRepresents an item with a quality value as defined in RFC …\nIndicates the part of a document that the server should …\nContains the address of the previous web page from which a …\nGoverns which referrer information should be included with …\nInforms the web browser that the current page or frame …\nThe Retry-After response HTTP header indicates how long …\nThe |Sec-WebSocket-Accept| header field is used in the …\nThe |Sec-WebSocket-Extensions| header field is used in the …\nThe |Sec-WebSocket-Key| header field is used in the …\nThe |Sec-WebSocket-Protocol| header field is used in the …\nThe |Sec-WebSocket-Version| header field is used in the …\nContains information about the software used by the origin …\nUsed to send cookies from the server to the user agent.\nTells the client to communicate with HTTPS instead of …\nShift_JIS\nInforms the server of transfer encodings willing to be …\nAllows the sender to include additional fields at the end …\nSpecifies the form of encoding used to safely transfer the …\nA possible error when converting a <code>HeaderValue</code> to a string …\nAn interface for types that can be converted into a …\nAn interface for types that can be converted into a …\nUsed as part of the exchange to upgrade the protocol.\nSends a signal to the server expressing the client’s …\nContains a string that allows identifying the requesting …\nUS ASCII\nDetermines how to match future requests with cached …\nAdded by proxies to track routing.\nGeneral HTTP header contains information about possible …\nDefines the authentication method that should be used to …\nMarker used by the server to indicate that the MIME types …\nControls DNS prefetching.\nRequest header (de-facto standard) for identifying the …\nRequest header (de-facto standard) for identifying the …\nRequest header (de-facto standard) for identifying the …\nIndicates whether or not a browser should be allowed to …\nStop pages from loading when an XSS attack is detected.\nThe zero quality value, equivalent to <code>q=0.0</code>.\nZstd algorithm.\nConverts a <code>HeaderValue</code> to a byte slice.\nReturn the serialization of this language tag.\nReturns a <code>str</code> representation of the header.\nConvert content encoding to string.\nReturns the canonical version of the language tag following\nThe character set that is used to encode the <code>value</code> to a …\nPerforms a case-insensitive comparison of the string …\nPerforms a case-insensitive comparison of the string …\nReturn the extended language subtags.\nIterate on the extended language subtags.\nReturn the extension subtags.\nIterate on the extension subtags.\nFormat an array into a comma-delimited string.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a slice of bytes to an HTTP header name.\nAttempt to convert a byte slice to a <code>HeaderValue</code>.\nReads a comma-delimited raw header into a Vec.\nConverts a slice of bytes to an HTTP header name.\nAttempt to convert a <code>Bytes</code> buffer to a <code>HeaderValue</code>.\nConvert a <code>Bytes</code> directly into a <code>HeaderValue</code> without …\nConverts a HeaderName into a HeaderValue\nReads a single string when parsing a header.\nConverts a static string to a HTTP header name.\nConvert a static string to a <code>HeaderValue</code>.\nAttempt to convert a string to a <code>HeaderValue</code>.\nReturn the primary language subtag and its extended …\nPercent encode a sequence of bytes with a character set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn the serialization of this language tag.\nReturns true if the <code>HeaderValue</code> has a length of zero bytes.\nChecks if it is a language range, meaning that there are …\nReturns <code>true</code> if the value represents sensitive data.\nCheck if the language tag is valid according to RFC 5646.\nThe wrapped contents of the field.\nThe human language details of the <code>value</code>, if available.\nReturns the length of <code>self</code>.\nA multi-value <code>HeaderMap</code> and its iterators.\nMatches language tags. The first language acts as a …\nConstructs a new <code>QualityItem</code> from an item, using the …\nConstructs a new <code>QualityItem</code> from an item, using the …\nReturns the name of the header field.\nConstructs a new <code>QualityItem</code> from an item and a quality …\nParse the header from a HTTP message.\nCreate a <code>LanguageTag</code> from its serialization.\nParses extended header parameter values (<code>ext-value</code>), as …\nReturn the primary language subtag.\nReturn the private use subtags.\nIterate on the private use subtags.\nConvenience function to create a <code>Quality</code> from an <code>f32</code> …\nThe quality (client or server preference) for the value.\nReturn the region subtag.\nReturn the script subtag.\nMark that the header value represents sensitive …\nConvert content encoding to header value.\nYields a <code>&amp;str</code> slice if the <code>HeaderValue</code> only contains …\nTry to convert value to a HeaderValue.\nCheck if the language tag is “valid” according to RFC …\nThe parameter value, as expressed in octets.\nReturn the variant subtags.\nIterate on the variant subtags.\nConstructs a new <code>QualityItem</code> from an item, using zero …\nIterator over drained name-value pairs.\nA multi-map of HTTP headers.\nIterator over owned name-value pairs.\nIterator over borrowed name-value pairs.\nIterator over all names in the map.\nIterator over removed, owned values with the same …\nAppends a name-value pair to the map.\nReturns the number of single-value headers the map can …\nClears the map, removing all name-value pairs.\nReturns <code>true</code> if the map contains a value for the specified …\nClears the map, returning all name-value sets as an …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a reference to the <em>first</em> value associated with a …\nReturns an iterator over all values associated with a …\nReturns a mutable reference to the <em>first</em> value associated …\nInserts (overrides) a name-value pair in the map.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the map contains no elements.\nReturns true if iterator contains no elements, without …\nAn iterator over all name-value pairs.\nAn iterator over all contained header names.\nReturns the number of values stored in the map.\nReturns the number of <em>keys</em> stored in the map.\nCreate an empty <code>HeaderMap</code>.\nRemoves all headers for a particular header name from the …\nReserves capacity for at least <code>additional</code> more headers to …\nRetains only the headers specified by the predicate.\nCreate an empty <code>HeaderMap</code> with the specified capacity.\nAsync I/O test buffer.\nTest <code>Request</code> builder.\nAsync I/O test buffer with ability to incrementally add to …\nAppend a header, keeping any that were set with an …\nCreate new empty <code>TestBuffer</code> instance.\nCreate new empty <code>TestBuffer</code> instance.\nAdd data to read buffer.\nAdd data to read buffer.\nComplete request creation and generate <code>Request</code> instance.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInsert a header, replacing any that were set with an …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSet HTTP method of this request.\nCreate new <code>TestBuffer</code> instance with initial read buffer.\nCreate new <code>TestBuffer</code> instance with initial read buffer.\nSet request payload.\nSet URI of this request.\nSet HTTP version of this request.\nCreate a default TestRequest and then set its URI.\nRepresents the authority component of a URI.\nA builder for <code>Uri</code>s.\nHTTP protocol scheme\nHTTP protocol over TLS.\nAn error resulting from a failed attempt to construct a …\nAn error resulting from a failed attempt to construct a …\nThe various parts of a URI.\nRepresents the path component of a URI\nThe port component of a URI.\nRepresents the scheme component of a URI\nThe URI component of a request.\nReturns the port number as a <code>str</code>.\nReturn a str representation of the authority\nReturns the path and query as a string component.\nReturn a str representation of the scheme\nReturns the port number as a <code>u16</code>.\nSet the <code>Authority</code> for this URI.\nThe authority component of a URI\nConsumes this builder, and tries to construct a valid <code>Uri</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAttempt to convert a <code>Bytes</code> buffer to a <code>Authority</code>.\nAttempt to convert a <code>Bytes</code> buffer to a <code>PathAndQuery</code>.\nAttempt to convert an <code>Authority</code> from a static string.\nConvert a <code>PathAndQuery</code> from a static string.\nGet the host of this <code>Authority</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new default instance of <code>Builder</code> to construct a …\nReturns the path component\nSet the <code>PathAndQuery</code> for this URI.\nThe origin-form component of a URI\nGet the port part of this <code>Authority</code>.\nGet the port of this <code>Authority</code> as a <code>u16</code>.\nReturns the query string component\nSet the <code>Scheme</code> for this URI.\nThe scheme component of a URI\nIndicates an abnormal closure. If the abnormal closure was …\nIndicates that the server is overloaded and the client …\nIndicates that an endpoint is “going away”, such as a …\nIndicates an invalid opcode was received.\nBad opcode.\nWebSocket key is not set or wrong.\nBinary message.\nBinary frame.\nIndicates a binary data frame.\nClose message with optional reason.\nClose message with optional reason.\nIndicates a close control frame.\nStatus code used to indicate why an endpoint is closing …\nReason for closing the connection\nWebSocket protocol codec.\nContinuation.\nContinuation.\nUnknown continuation fragment.\nContinuation has not started.\nReceived new continuation but it is already started.\nIndicates a continuation frame of a fragmented message.\nIndicates that a server is terminating the connection …\nIndicates that an endpoint (client) is terminating the …\nA WebSocket frame.\nOnly get method is allowed.\nWebSocket handshake errors\nIndicates that an endpoint is terminating the connection …\nInvalid control frame length\nEncountered invalid opcode.\nI/O error.\nA WebSocket continuation item.\nReceived a masked frame from server.\nA WebSocket message.\nConnection header is not set to upgrade.\nWebSocket version header is not set.\nUpgrade header if not set to WebSocket.\nNo-op. Useful for low-level services.\nIndicates a normal closure, meaning that the purpose for …\nOperation codes defined in [RFC 6455 §11.8].\nA payload reached size limit.\nA struct representing a WebSocket frame.\nPing message.\nPing message.\nIndicates a ping control frame.\nIndicates that an endpoint is terminating the connection …\nPong message.\nPong message.\nIndicates a pong control frame.\nIndicates that an endpoint is terminating the connection …\nWebSocket protocol errors.\nIndicates that the server is restarting. A client may …\nIndicates that an endpoint is terminating the connection …\nText message.\nText frame. Note that the codec does not validate UTF-8 …\nIndicates a text data frame.\nReceived an unmasked frame from client.\nIndicates that an endpoint is terminating the connection …\nUnsupported WebSocket version.\nSet decoder to client mode.\nExit code\nOptional description of the exit code\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nVerify WebSocket handshake request and create handshake …\nCreate WebSocket handshake response.\nHashes the <code>Sec-WebSocket-Key</code> header according to the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSet max frame size.\nCreate new WebSocket frames decoder.\nParse the input stream into a frame.\nParse the payload of a close frame.\nVerify WebSocket handshake request.\nCreate a new Close control frame.\nGenerate binary representation")