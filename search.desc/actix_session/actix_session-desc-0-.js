searchState.loadedDescShard("actix_session", 0, "Session management for Actix Web.\nSession state has been updated - the changes will have to …\nThe session has been flagged for deletion - the session …\nThe session has been flagged for renewal.\nThe primary interface to access and modify session state.\nExtract a <code>Session</code> object from various <code>actix-web</code> types …\nError returned by <code>Session::get</code>.\nError returned by <code>Session::insert</code>.\nA middleware for session management in Actix Web …\nStatus of a <code>Session</code>.\nThe session state has not been modified since its …\nA fluent API to configure <code>SessionMiddleware</code>.\nClear the session.\nConfiguration options to tune the behaviour of …\nGet all raw key-value data from the session.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a <code>value</code> from the session.\nExtract a <code>Session</code> object.\nInserts a key-value pair into the session.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUse <code>SessionMiddleware::new</code> to initialize the session …\nRemoves session both client and server side.\nRemove value from the session.\nRemove value from the session and deserialize.\nRenews the session key, assigning existing session state …\nReturns session status.\nPluggable storage backends for session state.\nA session lifecycle strategy where the session cookie …\nThe session cookie will expire when the current browser …\nDetermines how to secure the content of the session cookie.\nThe TTL is refreshed every time the server receives a …\nThe TTL is refreshed every time the session state changes …\nA session lifecycle strategy where the session cookie will …\nThe session cookie will be a persistent cookie.\nThe cookie content is encrypted when using …\nDetermines what type of session cookie should be used and …\nA fluent, customized <code>SessionMiddleware</code> builder.\nThe cookie content is signed when using …\nConfiguration for which events should trigger an extension …\nFinalise the builder and return a <code>SessionMiddleware</code> …\nChoose how the session cookie content should be secured.\nSet the <code>Domain</code> attribute for the cookie used to store the …\nSet the <code>HttpOnly</code> attribute for the cookie used to store …\nSet the name of the cookie used to store the session ID.\nSet the <code>Path</code> attribute for the cookie used to store the …\nSet the <code>SameSite</code> attribute for the cookie used to store …\nSet the <code>Secure</code> attribute for the cookie used to store the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDetermines what type of session cookie should be used and …\nSpecifies how long the session cookie should live.\nDetermines under what circumstances the TTL of your …\nSets a time-to-live (TTL) when storing the session state …\nDetermine under what circumstances the TTL of your session …\nUse the session key, stored in the session cookie, as …\nFailed to deserialize session state.\nPossible failures modes for <code>SessionStore::load</code>.\nSomething went wrong when retrieving the session state.\nSomething went wrong when persisting the session state.\nSomething went wrong when updating the session state.\nPossible failures modes for <code>SessionStore::save</code>.\nFailed to serialize session state.\nFailed to serialize session state.\nA session key, the string stored in a client-side cookie …\nThe interface to retrieve and save the current session …\nPossible failures modes for <code>SessionStore::update</code>.\nDeletes a session from the store.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLoads the session state associated to a session key.\nPersist the session state for a newly created session.\nUpdates the session state associated to a pre-existing …\nUpdates the TTL of the session state associated to a …")