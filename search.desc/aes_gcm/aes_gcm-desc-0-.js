searchState.loadedDescShard("aes_gcm", 0, "RustCrypto: AES-GCM\nMaximum length of associated data.\nAuthenticated Encryption with Associated Data (AEAD) …\nIn-place stateless AEAD trait.\nAES-GCM with a 128-bit key and 96-bit nonce.\nAES-GCM with a 256-bit key and 96-bit nonce.\nAES-GCM: generic over an underlying AES implementation and …\nMaximum length of ciphertext.\nThe upper bound amount of additional space required to …\nError type.\nKey used by <code>KeySizeUser</code> implementors.\nTypes which can be initialized from key.\nKey size in bytes.\nTypes which use key for initialization.\nAES-GCM nonces.\nThe length of a nonce.\nMaximum length of plaintext.\nAES-GCM tags.\nTrait implemented for valid tag sizes, i.e. [<code>U12</code>][…\nThe maximum length of the nonce.\nDecrypt the message in-place, returning an error in the …\nDecrypt the message in-place, returning an error in the …\nEncrypt the given buffer containing a plaintext message …\nEncrypt the data in-place, returning the authentication tag\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerate random key using the provided <code>CryptoRng</code>.\nGenerate a random nonce for this AEAD algorithm.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn key size in bytes.\nCreate new value from fixed size key.\nCreate new value from variable size key.")