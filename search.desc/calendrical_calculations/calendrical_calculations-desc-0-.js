searchState.loadedDescShard("calendrical_calculations", 0, "Calendrical calculations\nChinese-like lunar calendars (Chinese, Dangi)\nThe Coptic calendar\nThe ethiopian calendar\nThe Hebrew calendar\nAlternate, more efficient structures for working with the …\nAdditional math helpers\nVarious islamic lunar calendars\nThe ISO calendar (also usable as Gregorian)\nThe Julian calendar\nThe persian calendar\nRepresentation of Rata Die (R.D.) dates, which are …\nA type implementing <code>ChineseBased</code> for the Chinese calendar\nThe trait ChineseBased is used by Chinese-based calendars …\nchinese_based_date_from_fixed returns extra things for use …\nThe name of the calendar for debugging.\nA type implementing <code>ChineseBased</code> for the Dangi (Korean) …\nThe RataDie of the beginning of the epoch used for …\nThe ISO year that corresponds to year 1\nMarks the bounds of a lunar year\nGet a chinese based date from a fixed date, with the …\nCompute the YearBounds for the lunar year (年) containing …\nThe number of days in this year\nThe chinese day\nReturns the number of days in the given <code>month</code> after the …\nGiven a new year, calculate the number of days in the …\nCalculated the numbers of days in the given year\nGiven the new year and a month/day pair, calculate the …\nGiven an ISO year, return the extended year\nGet a RataDie in the middle of a year; this is not …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGiven that <code>new_year</code> is the first day of a leap year, find …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether or not this is a leap year\nWhether this year is a leap year\nGiven an extended year, return the ISO year\nThe last month and day in this year\nThe index of the leap month, if any\nGiven a fixed date, return the location used for …\nThe chinese month\nReturns the number of days in the given (year, month). In …\nReturns the length of each month in the year, as well as a …\nThe date marking the start of the current lunar year\nThe date marking the start of the next lunar year\nThe chinese year\nThe bounds of the current lunar year\nLisp code reference: …\nLisp code reference: …\nLisp code reference: …\nLisp code reference: …\nThe biblical month number used for the month of Adar (and …\nThe biblical month number used for the month of Adar II\nThe biblical month number used for the month of Av\nBiblical Hebrew dates. The months are reckoned a bit …\nThe biblical month number used for the month of Elul\nThe biblical month number used for the month of Iyyar\nThe biblical month number used for the month of Kislev\nThe biblical month number used for the month of Marheshvan\nThe biblical month number used for the month of Nisan\nThe biblical month number used for the month of Shevat\nThe biblical month number used for the month of Sivan\nThe biblical month number used for the month of Tammuz\nThe biblical month number used for the month of Tevet\nThe biblical month number used for the month of Tishri\nLisp code reference: …\nLisp code reference: …\nThe day\nLisp code reference: …\nLisp code reference: …\nReturns the argument unchanged.\nThe civil calendar has the same year and day numbering as …\nCalls <code>U::from(self)</code>.\nLisp code reference: …\nLisp code reference: …\nThe month\nThe civil calendar has the same year and day numbering as …\nThe year\nNormalized month constant (see <code>TISHREI</code>)\nNormalized month constant (see <code>TISHREI</code>)\nשלמה: both Ḥeshvan and Kislev have 30 days\nחסרה: both Ḥeshvan and Kislev have 29 days\nNormalized month constant (see <code>TISHREI</code>)\nThe maximum R.D. supported by this code (this is the last …\nThe maximum hebrew year supported by this code (this is …\nThe minumum R.D. supported by this code (this code will …\nThe minumum hebrew year supported by this code (this is …\nNormalized month constant (see <code>TISHREI</code>)\nNormalized month constant (see <code>TISHREI</code>)\nThe Keviyah (קביעה) of a year. A year may be one of …\nMonday (everyone knows what Monday is)\nNormalized month constant (see <code>TISHREI</code>)\nכסדרה: Ḥeshvan has 29, Kislev has 30\nNormalized month constant (see <code>TISHREI</code>)\nNormalized month constant (see <code>TISHREI</code>)\nSaturday (everyone knows what Saturday is)\nThe day of the new year. Only these four days are …\nNormalized month constant (see <code>TISHREI</code>)\nNormalized month constant (see <code>TISHREI</code>)\nNormalized month constant for Tishrei\nThursday (everyone knows what Thursday is)\nTuesday (everyone knows what Tuesday is)\nEverything about a given year. Can be conveniently packed …\nThe type of year it is\nCompute the YearInfo for a given year\nGet the number of days preceding this month\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstruct this from an integer between 0 and 13\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether this year is a leap year\nThe Keviyah of the year\nReturn the last ordinal month and day in this year as …\nGiven a day of the year, return the ordinal month and day …\nGiven an ordinal, civil month (1-indexed month starting at …\nCompute the date of New Year’s Day\nGet the day of the new year for this Keviyah\nHow many full weeks have passed since the week of Beharad\nReturns the YearInfo and h_year for the year containing …\nGiven the hebrew year for this Keviyah, calculate the …\nHow many days are in this year\nGet the type of year for this Keviyah.\n2D3\n2D5\n2C5\n2C7\n3R5\n3R7\n5D1\n5R7\n5C1\n5C3\n7D1\n7D3\n7C3\n7C5\nNormalized month constant (see <code>TISHREI</code>)\nGreater than i32::MAX\nLess than i32::MIN\nError returned when casting from an i32\nReturns the argument unchanged.\nConvert an i64 to i32 and with information on which way it …\nConvert an i64 to i32 but saturate at th ebounds\nCalls <code>U::from(self)</code>.\nMarker type for civil islamic calendar, for use with …\nThe name of the calendar for debugging.\nThe epoch of the calendar. Different calendars use a …\nWhether this calendar is known to have 353-day years. This …\nCommon abstraction over islamic-style calendars\nMarker type for observational islamic calendar, for use …\nMarker type for Saudi islamic calendar, for use with …\nMarker type for observational islamic calendar, for use …\nGiven an iso date, calculate the <em>approximate</em> islamic year …\nConvert an islamic date in this calendar to a R.D.\nLisp code reference: …\nLisp code reference: …\nLisp code reference:https: …\nLisp code reference: …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLisp code reference: …\nConvert an R.D. To an islamic date in this calendar\nLisp code reference: …\nGiven the extended year, calculate the approximate new …\nGiven an extended year, calculate whether each month is 29 …\nLisp code reference: …\nThe number of days in a month for the observational …\nLisp code reference: …\nThe number of days in a month for the Saudi (Umm Al-Qura) …\nLisp code reference: …\nLisp code reference: …\nWhether or not <code>year</code> is a leap year\nLisp code reference: …\nLisp code reference: …\nGet a fixed date from the ymd of a Julian date; years are …\nLisp code reference: …\nLisp code reference: …\nLisp code reference: …\narithmetic_persian_from_fixed, modified to use the 33-year …\nLisp code reference: …\nfixed_from_arithmetic_persian, modified to use the more …\nCalculated using the 33-year rule\nA moment is a RataDie with a fractional part giving the …\nThe <em>Rata Die</em>, or <em>R.D.</em>, or <code>fixed_date</code>: number of days since …\nConvert this to a <code>Moment</code>\nGet the RataDie of a Moment\nCheck that it is in range\nCalculate the number of days between two RataDie in a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the inner field of a Moment\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a RataDie\nCreate a new moment\nConvert this to an f64 value representing the RataDie\nConvert this to an i64 value representing the RataDie")