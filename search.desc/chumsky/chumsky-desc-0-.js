searchState.loadedDescShard("chumsky", 0, "Chumsky\nSee <code>Parser::boxed</code>.\nThe type of errors emitted by this parser.\nA trait implemented by parsers.\nBox the parser, yielding a parser that performs parsing …\nTraits that allow chaining parser outputs together.\nParse one thing and then another thing, attempting to …\nCollect the output of this parser into a type implementing …\nCombinators that allow combining and extending existing …\nUtilities for debugging parsers.\nInclude this parser in the debugging output produced by …\nParse the pattern surrounded by the given delimiters.\nError types, traits and utilities.\nFlatten a nested collection.\nLeft-fold the output of the parser into a single value.\nRight-fold the output of the parser into a single value.\nReturns the argument unchanged.\nAttempt to convert the output of this parser into …\nParse one thing and then another thing, yielding only the …\nIgnore the output of this parser, yielding <code>()</code> as an output …\nCalls <code>U::from(self)</code>.\nLabel the pattern parsed by this parser for more useful …\nMap the output of this parser to another value.\nMap the primary error of this parser to another value.\nMap the primary error of this parser to another value, …\nMap the output of this parser to another value, making use …\nParses a single token if, and only if, the pattern fails …\nParse one thing or, on failure, another thing.\nMap the primary error of this parser to a result. If the …\nAttempt to parse something, but only if it exists.\nParse a pattern, but with an instance of another pattern …\nParse a stream of tokens, yielding an output <em>or</em> any errors …\nParse a stream of tokens, yielding an output if possible, …\nParse a stream of tokens, yielding an output if possible, …\nCommonly used functions, traits and types.\nParser primitives that accept specific token patterns.\nApply a fallback recovery strategy to this parser should …\nTypes and traits that facilitate error recovery.\nRecursive parsers (parser that include themselves within …\nParse a pattern any number of times (including zero times).\nParse a pattern. Afterwards, the input stream will be …\nCreate a parser that selects one or more input patterns …\nParse a pattern, separated by another, any number of times.\nTypes and traits related to spans.\nToken streams and tools converting to and from them..\nText-specific parsers and utilities.\nParse one thing and then another thing, yielding a tuple …\nParse one thing and then another thing, yielding only the …\nParse one thing and then another thing, creating the …\nTransform all outputs of this parser to a pretermined …\nAfter a successful parse, apply a fallible function to the …\nFor parsers that produce a <code>Result</code> as their output, unwrap …\nValidate an output, producing non-terminal errors if it …\nA utility trait that facilitates chaining parser outputs …\nAppend the elements in this link to the chain.\nThe number of items that this chain link consists of.\nSee <code>Parser::debug</code>.\nSee <code>Parser::delimited_by</code>.\nSee <code>Parser::foldl</code>.\nSee <code>Parser::foldr</code>.\nSee <code>Parser::ignore_then</code>.\nSee <code>Parser::ignored</code>.\nSee <code>Parser::labelled</code>.\nSee <code>Parser::map</code>.\nSee <code>Parser::map_err</code>.\nSee <code>Parser::map_err_with_span</code>.\nSee <code>Parser::map_with_span</code>.\nSee <code>Parser::not</code>.\nSee <code>Parser::or</code>.\nSee <code>Parser::or_else</code>.\nSee <code>Parser::or_not</code>.\nSee <code>Parser::repeated</code>.\nSee <code>Parser::rewind</code>.\nSee <code>Parser::separated_by</code>.\nSee <code>Parser::then</code>.\nSee <code>Parser::then_ignore</code>.\nSee <code>Parser::then_with</code>\nSee <code>Parser::to</code>.\nSee <code>Parser::try_map</code>.\nSee <code>Parser::unwrapped</code>\nSee <code>Parser::validate</code>.\nAllow a leading separator to appear before the first item.\nAllow a trailing separator to appear after the last item.\nRequire that the pattern appear at least a minimum number …\nRequire that the pattern appear at least a minimum number …\nRequire that the pattern appear at most a maximum number …\nRequire that the pattern appear at most a maximum number …\nRequire that the pattern appear exactly the given number …\nRequire that the pattern appear exactly the given number …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA trait implemented by parser debuggers.\nDebugging information was emitted.\nAn event that occurred during parsing.\nInformation about a specific parser.\nA silent debugger that emits no debugging messages nor …\nA verbose debugger that emits debugging messages to the …\nEmit a parse event, if the debugger supports them.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInvoke the given parser with a mode specific to this …\nCreate a new debugging scope.\nA minimal error type that tracks only the error span and …\nAn error with a custom message occurred.\nA trait that describes parser error types.\nThe label used to describe a syntactic structure currently …\nAn internal type used to facilitate error prioritisation. …\nA simple default error type that tracks error spans, …\nA type representing possible reasons for an error.\nThe type of spans to be used in the error.\nAn unclosed delimiter was found.\nAn unexpected input was found.\nCreate a new <code>Located</code> with the give input position and …\nCreate an error with a custom error message.\nReturns an iterator over possible expected patterns.\nCreate a new error describing a conflict between expected …\nReturns the input, if any, that was found instead of an …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the error’s label, if any.\nReturns the error’s label, if any.\nMap the error with the given function.\nMap the error’s inputs using the given function.\nGet the maximum of two located errors. If they hold the …\nMerge two errors that point to the same input together, …\nReturns the reason for the error.\nReturns the span that the error occurred at.\nReturns the span that the error occurred at.\nCreate a new error describing a delimiter that was not …\nIndicate that the error occurred while parsing a …\nThe unclosed delimiter.\nThe span of the unclosed delimiter.\nCreate a parser that selects one or more input patterns …\nSee <code>any</code>.\nSee <code>choice</code>.\nA utility trait to abstract over container-like things.\nSee <code>custom</code>.\nSee <code>empty</code>.\nSee <code>end</code>.\nSee <code>filter</code>.\nSee <code>filter_map</code>.\nAn iterator over the items within this container, by value.\nSee <code>just</code>.\nSee <code>none_of</code>.\nSee <code>one_of</code>.\nA utility trait to abstract over linear and ordered …\nSee <code>seq</code>.\nSee <code>take_until</code>.\nSee <code>todo</code>.\nA parser that accepts any input (but not the end of input).\nParse using a tuple or array of many parsers, producing …\nA parser primitive that allows you to define your own …\nA parser that parses no inputs.\nA parser that accepts only the end of input.\nA parser that accepts only inputs that match the given …\nA parser that accepts a input and tests it against the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIterate over the elements of the container (using internal …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA parser that accepts only the given input.\nA parser that accepts any input that is <em>not</em> in a sequence …\nA parser that accepts one of a sequence of specific inputs.\nA parser that accepts only a sequence of specific inputs.\nA parser that accepts any number of inputs until a …\nA parser that can be used wherever you need to implement a …\nSee <code>nested_delimiters</code>.\nA parser that includes a fallback recovery strategy should …\nSee <code>skip_parser</code>.\nSee <code>skip_then_retry_until</code>.\nSee <code>skip_until</code>.\nA trait implemented by error recovery strategies.\nAlters this recovery strategy so that the synchronisation …\nAlters this recovery strategy so that the synchronisation …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA recovery strategy that searches for a start and end …\nRecover from a parsing failure.\nA recovery mode that applies the provided recovery parser …\nAlters this recovery strategy so that the first token will …\nAlters this recovery strategy so that the first token will …\nA recovery mode that simply skips to the next input on …\nA recovery mode that skips input until one of several …\nA parser that can be defined in terms of itself by …\nDeclare the existence of a recursive parser, allowing it …\nDefines the parser after declaring it, allowing it to be …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConstruct a recursive parser (i.e: a parser that may …\nExtra context used in a span.\nA type representing a span’s start or end offset from …\nA trait that describes a span over a particular range of …\nReturn the span’s context.\nReturn the end offset of the span.\nCreate a new span given a context and an offset range.\nReturn the start offset of the span.\nA <code>Stream</code> that pulls tokens from a boxed <code>Iterator</code>.\nA utility type used to flatten input trees. See …\nThe input tree flattens into many sub-trees.\nThe input tree flattens into a single input.\nA type that represents a stream of input tokens. Unlike …\nEagerly evaluate the token stream, returning an iterator …\nReturns the argument unchanged.\nPlease note that Chumsky currently uses character indices …\nPlease note that Chumsky currently uses character indices …\nReturns the argument unchanged.\nCreate a new stream from an iterator of <code>(Token, Span)</code> …\nCreate a new <code>Stream</code> from an iterator of nested tokens and …\nCreate a new <code>Stream</code> from an iterator of nested tokens and …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA trait implemented by textual character types (currently, …\nThe default type that this character collects into.\nThe type of a parser that accepts (and ignores) any number …\nThe type of a parser that accepts (and ignores) any number …\nThe default unsized <code>str</code>-like type of a linear sequence of …\nA trait containing text-specific functionality that …\nReturn the ‘0’ digit of the character.\nA parser that accepts one or more ASCII digits.\nReturns the argument unchanged.\nConvert the given ASCII character to this character type.\nA parser that accepts a C-style identifier.\nA parser that accepts a non-negative integer.\nCalls <code>U::from(self)</code>.\nReturns true if the character is canonically considered to …\nReturns true if the character is canonically considered to …\nReturns true if the character is canonically considered to …\nLike <code>ident</code>, but only accepts an exact identifier while …\nA parser that accepts (and ignores) any newline characters …\nParse a pattern, ignoring any amount of whitespace both …\nA parser that consumes text and generates tokens using …\nReturns this character as a <code>char</code>.\nA parser that accepts (and ignores) any number of …")