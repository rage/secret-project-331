searchState.loadedDescShard("csv", 0, "The <code>csv</code> crate provides a fast and flexible CSV reader and …\nTrim whitespace from fields and headers.\nThis puts quotes around every field. Always.\nParses the byte given as a record terminator.\nA single CSV record stored as raw bytes.\nA double-ended iterator over the fields in a byte record.\nAn owned iterator over records as raw bytes.\nA borrowed iterator over records as raw bytes.\nParses <code>\\r</code>, <code>\\n</code> or <code>\\r\\n</code> as a single record terminator.\nAn error of this kind occurs only when performing automatic\nAn Serde deserialization error.\nThe type of a Serde deserialization error.\nAn owned iterator over deserialized records.\nA borrowed iterator over deserialized records.\nContains the error value\nAn error that can occur when processing CSV data.\nThe specific type of an error.\nTrim whitespace from fields, but not headers.\nA UTF-8 validation error during record conversion.\nTrim whitespace from headers.\n<code>IntoInnerError</code> occurs when consuming a <code>Writer</code> fails.\nThis error occurs when UTF-8 validation on a field fails. …\nAn I/O error that occurred while reading CSV data.\nA generic Serde deserialization error.\nThis puts quotes around fields only when necessary.\nThis <em>never</em> writes quotes, even if it would produce invalid …\nThis puts quotes around all fields that are non-numeric. …\nPreserves fields and headers. This is the default.\nContains the success value\nThis error occurs when a boolean value fails to parse.\nThis error occurs when a float value fails to parse.\nThis error occurs when an integer value fails to parse.\nA position in CSV data.\nThe quoting style to use when writing CSV data.\nA already configured CSV reader.\nBuilds a CSV reader with various configuration knobs.\nA type alias for <code>Result&lt;T, csv::Error&gt;</code>.\nThis error occurs when either the <code>byte_headers</code> or <code>headers</code> …\nAn error of this kind occurs only when using the Serde …\nA single CSV record stored as valid UTF-8 bytes.\nAn iterator over the fields in a string record.\nAn owned iterator over records as strings.\nA borrowed iterator over records as strings.\nA record terminator.\nThe whitespace preservation behaviour when reading CSV …\nThis error occurs when two records with an unequal number …\nThis error occurs when a Rust type expects to decode …\nA generic Serde unsupported error.\nA UTF-8 decoding error that occured while reading CSV data …\nA UTF-8 validation error.\nAn already configured CSV writer.\nBuilds a CSV writer with various configuration knobs.\nReturn a reference to this record’s raw <code>ByteRecord</code>.\nReturn the entire row as a single byte slice. The slice …\nReturn the entire row as a single string slice. The slice …\nA convenience method for specifying a configuration to …\nSet the capacity (in bytes) of the buffer used in the CSV …\nSet the capacity (in bytes) of the internal buffer used in …\nThe byte offset, starting at <code>0</code>, of this position.\nReturns a reference to the first row read by this parser …\nReturns a borrowed iterator over all records as raw bytes.\nClear this record so that it has zero fields.\nClear this record so that it has zero fields.\nThe comment character to use when parsing CSV.\nThe comment character that will be used when later reading …\nA cookbook of examples for CSV reading and writing.\nThe field delimiter to use when parsing CSV.\nThe field delimiter to use when writing CSV.\nDeserialize this record.\nReturns a borrowed iterator over deserialized records.\nDeserialize this record.\nEnable double quote escapes.\nEnable double quote escapes.\nReturns the error which caused the call to <code>into_inner</code> to …\nThe escape character to use when parsing CSV.\nThe escape character to use when writing CSV.\nReturn the field index (starting at 0) of this error, if …\nThe field index of a byte record in which UTF-8 validation …\nWhether the number of fields in records is allowed to …\nWhether the number of fields in records is allowed to …\nFlush the contents of the internal buffer to the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new <code>StringRecord</code> from a <code>ByteRecord</code>.\nLossily create a new <code>StringRecord</code> from a <code>ByteRecord</code>.\nBuild a CSV parser from this configuration that reads data …\nCreate a new CSV parser with a default configuration for …\nBuild a CSV writer from this configuration that writes …\nBuild a CSV writer with a default configuration that …\nBuild a CSV parser from this configuration that reads data …\nCreate a new CSV parser with a default configuration for …\nBuild a CSV writer from this configuration that writes …\nBuild a CSV writer with a default configuration that …\nReturn the field at index <code>i</code>.\nReturn the field at index <code>i</code>.\nReturns a mutable reference to the underlying reader.\nReturns a reference to the underlying reader.\nReturn a reference to the underlying writer.\nWhether to treat the first row as a special header row.\nReturns true if and only if this reader has been …\nWhether to write a header row before writing any other row.\nReturns a reference to the first row read by this parser.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAccess the underlying <code>ByteRecord</code> that failed UTF-8 …\nConvert this <code>StringRecord</code> into a <code>ByteRecord</code>.\nReturns an owned iterator over all records as raw bytes.\nReturns an owned iterator over deserialized records.\nConsumes the <code>IntoInnerError</code> and returns the error which …\nReturns the underlying writer which generated the error.\nUnwraps this CSV reader, returning the underlying reader.\nFlush the contents of the internal buffer and return the …\nUnwrap this error into its underlying type.\nDrop this iterator and return the underlying CSV reader.\nDrop this iterator and return the underlying CSV reader.\nDrop this iterator and return the underlying CSV reader.\nReturns an owned iterator over all records as strings.\nA custom Serde deserializer for possibly invalid <code>Option&lt;T&gt;</code> …\nReturns true if and only if this reader has been exhausted.\nReturns true if and only if this record is empty.\nReturns true if and only if this record is empty.\nReturns true if this is an I/O error.\nReturns an iterator over all fields in this record.\nReturns an iterator over all fields in this record.\nReturn the underlying error kind.\nReturn the specific type of this error.\nReturns the number of fields in this record.\nReturns the number of fields in this record.\nThe line number, starting at <code>1</code>, of this position.\nCreate a new empty <code>ByteRecord</code>.\nReturns a new position initialized to the start value.\nCreate a new builder for configuring CSV parsing.\nCreate a new empty <code>StringRecord</code>.\nCreate a new builder for configuring CSV writing.\nReturn the position of this record, if available.\nReturn the position for this error, if one exists.\nReturn the position for this error, if one exists.\nReturn the current position of this CSV reader.\nReturn the position of this record, if available.\nAdd a new field to this record.\nAdd a new field to this record.\nThe quote character to use when parsing CSV.\nThe quote character to use when writing CSV.\nThe quoting style to use when writing CSV.\nEnable or disable quoting.\nReturn the start and end position of a field in this …\nReturn the start and end position of a field in this …\nRead a single row into the given byte record. Returns …\nRead a single row into the given record. Returns false …\nReturn a reference to the underlying CSV reader.\nReturn a reference to the underlying CSV reader.\nReturn a reference to the underlying CSV reader.\nReturn a reference to the underlying CSV reader.\nReturn a reference to the underlying CSV reader.\nReturn a reference to the underlying CSV reader.\nReturn a mutable reference to the underlying CSV reader.\nReturn a mutable reference to the underlying CSV reader.\nReturn a mutable reference to the underlying CSV reader.\nReturn a mutable reference to the underlying CSV reader.\nReturn a mutable reference to the underlying CSV reader.\nReturn a mutable reference to the underlying CSV reader.\nThe record index, starting with the first record at <code>0</code>.\nReturns a borrowed iterator over all records as strings.\nSeeks the underlying reader to the position given.\nThis is like <code>seek</code>, but provides direct control over how …\nSerialize a single record using Serde.\nSet the byte offset of this position.\nSet the headers of this CSV parser manually as raw bytes.\nSet the headers of this CSV parser manually.\nSet the line number of this position.\nSet the position of this record.\nSet the position of this record.\nSet the record index of this position.\nThe record terminator to use when parsing CSV.\nThe record terminator to use when writing CSV.\nTrim the fields of this record so that leading and …\nWhether fields are trimmed of leading and trailing …\nTrim the fields of this record so that leading and …\nTruncate this record to <code>n</code> fields.\nTruncate this record to <code>n</code> fields.\nA tutorial for handling CSV data in Rust.\nAccess the underlying UTF-8 validation error.\nThe index into the given field up to which valid UTF-8 was …\nCreate a new empty <code>ByteRecord</code> with the given capacity …\nCreate a new empty <code>StringRecord</code> with the given capacity.\nWrite a single <code>ByteRecord</code>.\nWrite a single field.\nWrite a single record.\nThe corresponding UTF-8 error.\nThe deserialization error.\nThe expected number of fields in a record. This is the …\nThe number of fields in the bad record.\nThe position of the record in which this error occurred, if\nThe position of the first record with an unequal number of …\nThe position of this error, if available.")