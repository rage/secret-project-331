searchState.loadedDescShard("ctr", 0, "Generic implementations of CTR mode for block ciphers.\nCTR mode with 128-bit big endian counter.\nCTR mode with 128-bit little endian counter.\nCTR mode with 32-bit big endian counter.\nCTR mode with 32-bit little endian counter.\nCTR mode with 64-bit big endian counter.\nCTR mode with 64-bit little endian counter.\nGeneric CTR block mode instance.\nCTR mode flavors\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBackend numeric type\n128-bit big endian counter flavor.\n128-bit big endian counter flavor.\n32-bit big endian counter flavor.\n32-bit big endian counter flavor.\n64-bit big endian counter flavor.\n64-bit big endian counter flavor.\nTrait implemented by different CTR flavors.\nInner representation of nonce.\nFlavor name\nConvert to a backend value\nGenerate block for given <code>nonce</code> and current counter value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInitialize from bytes.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGenerate block for given <code>nonce</code> and current counter value.\nReturn number of remaining blocks.\nConvert from a backend value")