searchState.loadedDescShard("derive_more", 0, "<code>derive_more</code>\nWhat <code>#[derive(Add)]</code> generates\nWhat <code>#[derive(AddAssign)]</code> generates\nWhat <code>#[derive(AsRef)]</code> generates\nWhat <code>#[derive(AsRef)]</code> generates\nWhat <code>#[derive(Display)]</code> generates\nPossible errors returned by the derived implementations of …\nWhat <code>#[derive(Add)]</code> generates\nWhat <code>#[derive(AddAssign)]</code> generates\nWhat <code>#[derive(Add)]</code> generates\nWhat <code>#[derive(AddAssign)]</code> generates\nWhat <code>#[derive(Add)]</code> generates\nWhat <code>#[derive(AddAssign)]</code> generates\nWhat <code>#[derive(Constructor)]</code> generates\nWhat <code>#[derive(Debug)]</code> generates\nUsing <code>#[derive(Deref)]</code>\nWhat <code>#[derive(DerefMut)]</code> generates\nWhat <code>#[derive(Display)]</code> generates\nWhat <code>#[derive(Mul)]</code> generates\nWhat <code>#[derive(MulAssign)]</code> generates\nUsing <code>#[derive(Error)]</code>\nWhat <code>#[derive(From)]</code> generates\nWhat <code>#[derive(FromStr)]</code> generates\nError of parsing an enum value its string representation.\nWhat <code>#[derive(Index)]</code> generates\nWhat <code>#[derive(IndexMut)]</code> generates\nWhat <code>#[derive(Into)]</code> generates\nUsing <code>#[derive(IntoIterator)]</code>\nWhat <code>#[derive(IsVariant)]</code> generates\nWhat <code>#[derive(Display)]</code> generates\nWhat <code>#[derive(Display)]</code> generates\nOperation is attempted between mismatched enum variants.\nWhat <code>#[derive(Mul)]</code> generates\nWhat <code>#[derive(MulAssign)]</code> generates\nWhat <code>#[derive(Not)]</code> generates\nWhat <code>#[derive(Not)]</code> generates\nWhat <code>#[derive(Display)]</code> generates\nWhat <code>#[derive(Display)]</code> generates\nUsing <code>#[derive(Sum)]</code>\nWhat <code>#[derive(Mul)]</code> generates\nWhat <code>#[derive(MulAssign)]</code> generates\nWhat <code>#[derive(Mul)]</code> generates\nWhat <code>#[derive(MulAssign)]</code> generates\nWhat <code>#[derive(Mul)]</code> generates\nWhat <code>#[derive(MulAssign)]</code> generates\nWhat <code>#[derive(Add)]</code> generates\nWhat <code>#[derive(AddAssign)]</code> generates\nUsing <code>#[derive(Sum)]</code>\nWhat <code>#[derive(TryFrom)]</code> generates\nError returned by the derived <code>TryFrom</code> implementation on …\nWhat <code>#[derive(TryInto)]</code> generates\nError returned by the derived <code>TryInto</code> implementation.\nWhat <code>#[derive(TryUnwrap)]</code> generates\nError returned by the derived <code>TryUnwrap</code> implementation.\nOperation is attempted on unit-like enum variants.\nError returned by the derived implementations when an …\nWhat <code>#[derive(Unwrap)]</code> generates\nWhat <code>#[derive(Display)]</code> generates\nWhat <code>#[derive(Display)]</code> generates\nError returned by the derived implementations when an …\nModule containing derive definitions only, without their …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nOriginal input value which failed to convert via the …\nOriginal input value which failed to convert via the …\nOriginal input value which failed to convert via the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nModule containing derive definitions with their …\nWhat <code>#[derive(Add)]</code> generates\nWhat <code>#[derive(AddAssign)]</code> generates\nWhat <code>#[derive(AsRef)]</code> generates\nWhat <code>#[derive(AsRef)]</code> generates\nWhat <code>#[derive(Display)]</code> generates\nWhat <code>#[derive(Add)]</code> generates\nWhat <code>#[derive(AddAssign)]</code> generates\nWhat <code>#[derive(Add)]</code> generates\nWhat <code>#[derive(AddAssign)]</code> generates\nWhat <code>#[derive(Add)]</code> generates\nWhat <code>#[derive(AddAssign)]</code> generates\nWhat <code>#[derive(Constructor)]</code> generates\nWhat <code>#[derive(Debug)]</code> generates\nUsing <code>#[derive(Deref)]</code>\nWhat <code>#[derive(DerefMut)]</code> generates\nWhat <code>#[derive(Display)]</code> generates\nWhat <code>#[derive(Mul)]</code> generates\nWhat <code>#[derive(MulAssign)]</code> generates\nUsing <code>#[derive(Error)]</code>\nWhat <code>#[derive(From)]</code> generates\nWhat <code>#[derive(FromStr)]</code> generates\nWhat <code>#[derive(Index)]</code> generates\nWhat <code>#[derive(IndexMut)]</code> generates\nWhat <code>#[derive(Into)]</code> generates\nUsing <code>#[derive(IntoIterator)]</code>\nWhat <code>#[derive(IsVariant)]</code> generates\nWhat <code>#[derive(Display)]</code> generates\nWhat <code>#[derive(Display)]</code> generates\nWhat <code>#[derive(Mul)]</code> generates\nWhat <code>#[derive(MulAssign)]</code> generates\nWhat <code>#[derive(Not)]</code> generates\nWhat <code>#[derive(Not)]</code> generates\nWhat <code>#[derive(Display)]</code> generates\nWhat <code>#[derive(Display)]</code> generates\nUsing <code>#[derive(Sum)]</code>\nWhat <code>#[derive(Mul)]</code> generates\nWhat <code>#[derive(MulAssign)]</code> generates\nWhat <code>#[derive(Mul)]</code> generates\nWhat <code>#[derive(MulAssign)]</code> generates\nWhat <code>#[derive(Mul)]</code> generates\nWhat <code>#[derive(MulAssign)]</code> generates\nWhat <code>#[derive(Add)]</code> generates\nWhat <code>#[derive(AddAssign)]</code> generates\nUsing <code>#[derive(Sum)]</code>\nWhat <code>#[derive(TryFrom)]</code> generates\nWhat <code>#[derive(TryInto)]</code> generates\nWhat <code>#[derive(TryUnwrap)]</code> generates\nWhat <code>#[derive(Unwrap)]</code> generates\nWhat <code>#[derive(Display)]</code> generates\nWhat <code>#[derive(Display)]</code> generates\nWhat <code>#[derive(Add)]</code> generates\nWhat <code>#[derive(AddAssign)]</code> generates\nWhat <code>#[derive(AsRef)]</code> generates\nWhat <code>#[derive(AsRef)]</code> generates\nWhat <code>#[derive(Display)]</code> generates\nWhat <code>#[derive(Add)]</code> generates\nWhat <code>#[derive(AddAssign)]</code> generates\nWhat <code>#[derive(Add)]</code> generates\nWhat <code>#[derive(AddAssign)]</code> generates\nWhat <code>#[derive(Add)]</code> generates\nWhat <code>#[derive(AddAssign)]</code> generates\nWhat <code>#[derive(Constructor)]</code> generates\nWhat <code>#[derive(Debug)]</code> generates\nUsing <code>#[derive(Deref)]</code>\nWhat <code>#[derive(DerefMut)]</code> generates\nWhat <code>#[derive(Display)]</code> generates\nWhat <code>#[derive(Mul)]</code> generates\nWhat <code>#[derive(MulAssign)]</code> generates\nUsing <code>#[derive(Error)]</code>\nWhat <code>#[derive(From)]</code> generates\nWhat <code>#[derive(FromStr)]</code> generates\nWhat <code>#[derive(Index)]</code> generates\nWhat <code>#[derive(IndexMut)]</code> generates\nWhat <code>#[derive(Into)]</code> generates\nUsing <code>#[derive(IntoIterator)]</code>\nWhat <code>#[derive(IsVariant)]</code> generates\nWhat <code>#[derive(Display)]</code> generates\nWhat <code>#[derive(Display)]</code> generates\nWhat <code>#[derive(Mul)]</code> generates\nWhat <code>#[derive(MulAssign)]</code> generates\nWhat <code>#[derive(Not)]</code> generates\nWhat <code>#[derive(Not)]</code> generates\nWhat <code>#[derive(Display)]</code> generates\nWhat <code>#[derive(Display)]</code> generates\nUsing <code>#[derive(Sum)]</code>\nWhat <code>#[derive(Mul)]</code> generates\nWhat <code>#[derive(MulAssign)]</code> generates\nWhat <code>#[derive(Mul)]</code> generates\nWhat <code>#[derive(MulAssign)]</code> generates\nWhat <code>#[derive(Mul)]</code> generates\nWhat <code>#[derive(MulAssign)]</code> generates\nWhat <code>#[derive(Add)]</code> generates\nWhat <code>#[derive(AddAssign)]</code> generates\nUsing <code>#[derive(Sum)]</code>\nWhat <code>#[derive(TryFrom)]</code> generates\nWhat <code>#[derive(TryInto)]</code> generates\nWhat <code>#[derive(TryUnwrap)]</code> generates\nWhat <code>#[derive(Unwrap)]</code> generates\nWhat <code>#[derive(Display)]</code> generates\nWhat <code>#[derive(Display)]</code> generates")