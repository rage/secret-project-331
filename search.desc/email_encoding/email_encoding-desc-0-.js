searchState.loadedDescShard("email_encoding", 0, "Low-level crate implementing various RFCs for encoding …\nEmail body encoding algorithms.\nEmail header encoding algorithms.\nBase64\n<code>[u8]</code> variant\n8bit (UTF-8)\nA possible email <code>Content-Transfer-Encoding</code>\nQuoted Printable\n7bit (US-ASCII)\n<code>str</code> variant\nA borrowed <code>str</code> or <code>[u8]</code>\nBase64 email body encoder.\nChoose the most efficient <code>Encoding</code> for <code>input</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBase64 encode the provided bytes.\nPredict how many bytes <code>encode</code> is going to write given a …\nQuoted String encoder.\nRFC 2047 encoder.\nRFC 2231 encoder.\nUtilities for writing email headers to a <code>Write</code>r.\nEncode a string that may need to be quoted.\nEncode a string via RFC 2047.\nEncode a string via RFC 2231.\nWrapper around <code>Write</code> that remembers the length of the last …\nWrapper around <code>Write</code> that remembers the length of the last …\nGet a <code>Write</code>r which automatically line folds text written …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the length in bytes of the last line written to the …\nConstruct a new <code>EmailWriter</code>.\nGo to a new line and reset the <code>line_len</code> to <code>0</code>.\nGet the length in bytes of the last line written to the …\nWrite a space which <em>might</em> get wrapped to a new line on the …")