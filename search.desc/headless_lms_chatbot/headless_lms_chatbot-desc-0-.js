searchState.loadedDescShard("headless_lms_chatbot", 0, "For chatbot-related features.\nA small DSL for building OData <code>$filter</code> expressions against …\nA client for interacting with Azure Blob Storage.\nDeletes a file (blob) from the specified container.\nEnsures the container used to store the blobs exists. If …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nUploads a file to the specified container.\nThe format accepted by the API.\nCustom stream that encapsulates both the response stream …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the search indexer exists, is not running, and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nJSON markers for LLM prompt\nMaximum percentage of context window to use in a single …\nMaximum context window size for LLM in tokens\nTemperature for requests, low for deterministic results\nSystem prompt for converting course material to markdown\nUser prompt for converting course material to markdown\nAppends markdown content to a result string with proper …\nCalculate the safe token limit based on context window and …\nCleans content by converting the material blocks to clean …\nPrepare messages for the LLM request\nProcess a subset of blocks in a single LLM request\nProcess all chunks and combine the results\nSplit blocks into chunks that fit within token limits\nSplits an oversized block into smaller string chunks\nSimple completion-focused LLM request for Azure OpenAI …\nBase LLM request structure (common fields)\nResponse from LLM for simple completions\nCommon message structure used for LLM requests\nRole of a message in a conversation\nBuilds common headers for LLM requests\nEstimate the number of tokens in a given text.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMakes a non-streaming request to an LLM using application …\nMakes a non-streaming request to an LLM\nMakes a streaming request to an LLM\nPrepares Azure OpenAI endpoint with API version\nProcess a non-streaming LLM response\nA <strong>data structure</strong> that can be deserialized from any data …\nUUID namespace for Domain Name System (DNS).\nUUID namespace for ISO Object Identifiers (OIDs).\nUUID namespace for Uniform Resource Locators (URLs).\nUUID namespace for X.500 Distinguished Names (DNs).\nA connection to a PostgreSQL database.\nA <strong>data structure</strong> that can be serialized into any data …\nA Universally Unique Identifier (UUID).\nGet a borrowed <code>Braced</code> formatter.\nReturns a slice of 16 octets containing the value.\nReturns the four field values of the UUID.\nGet a borrowed <code>Hyphenated</code> formatter.\nGet a borrowed <code>Simple</code> formatter.\nReturns a 128bit value containing the value.\nReturns two 64bit values containing the value.\nGet a borrowed <code>Urn</code> formatter.\nGet a <code>Braced</code> formatter.\nIssue a <code>COPY FROM STDIN</code> statement and transition the …\nIssue a <code>COPY TO STDOUT</code> statement and transition the …\nDeserialize this value from the given Serde deserializer.\nA buffer that can be used for <code>encode_...</code> calls, that is …\nConstructs an event at the error level.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a <code>NonNilUuid</code> back into a <code>Uuid</code>.\nReturns the argument unchanged.\nCreates a UUID using the supplied bytes.\nCreates a UUID using the supplied bytes in little endian …\nCreates a reference to a UUID from a reference to the …\nCreates a UUID from four field values.\nCreates a UUID from four field values in little-endian …\nCreates a UUID using the supplied bytes.\nCreates a UUID using the supplied bytes in little endian …\nCreates a UUID from a 128bit value.\nCreates a UUID from a 128bit value in little-endian order.\nCreates a UUID from two 64bit values.\nIf the UUID is the correct version (v1, or v6) this will …\nIf the UUID is the correct version (v1, v6, or v7) this …\nReturns the variant of the UUID structure.\nReturns the version of the UUID.\nReturns the version number of the UUID.\nGet a <code>Hyphenated</code> formatter.\nConstructs an event at the info level.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes self and returns the underlying byte value of the …\nTests if the UUID is max (all ones).\nTests if the UUID is nil (all zeros).\nThe ‘max UUID’ (all ones).\nCreates a random UUID.\nCreates a UUID using a name from a namespace, based on the …\nThe ‘nil UUID’ (all zeros).\nParses a <code>Uuid</code> from a string of hexadecimal digits with …\nSerialize this value into the given Serde serializer.\nthe version number of the server in <code>libpq</code> format\nGet a <code>Simple</code> formatter.\nReturns the bytes of the UUID in little-endian order.\nReturns the four field values of the UUID in little-endian …\nReturns a 128bit little-endian value containing the value.\nAttempts to create an ApplicationConfiguration from …\nParses a <code>Uuid</code> from a string of hexadecimal digits with …\nParses a <code>Uuid</code> from a string of hexadecimal digits with …\nGet a <code>Urn</code> formatter.\nConstructs an event at the warn level.\nCollection all() operator (e.g., …\nCollection any() operator (e.g., <code>Rooms/any()</code> or …\nBoolean field expression (e.g., <code>IsEnabled</code>)\n<code>search.in(field, &#39;v1|v2|...&#39;, &#39;|&#39;)</code> with custom delimiter\nList values can only be used with search.in operations, …\nExplicit parentheses to override precedence\nA composable OData boolean expression.\nError type for search filter operations.\nA strongly-typed OData filter value.\nCollection all() operator (e.g., …\n<code>expr1 and expr2</code>\nCollection any() operator without filter (e.g., <code>Rooms/any()</code>…\nCollection any() operator with filter (e.g., …\n<code>field eq value</code>\nBoolean field expression (e.g., <code>IsEnabled</code>)\nHelper function to format a filter operand, adding …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\n<code>field ge value</code>\n<code>field gt value</code>\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>field le value</code>\n<code>field lt value</code>\n<code>field ne value</code>\n<code>not (expr)</code>\nCreate a null value\n<code>expr1 or expr2</code>\nWrap expression in explicit parentheses to override …\nInsert an arbitrary OData sub-expression (e.g. …\n<code>search.in(field, &#39;v1,v2,...&#39;, &#39;,&#39;)</code>\n<code>search.in(field, &#39;v1|v2|...&#39;, &#39;|&#39;)</code> with custom delimiter\nSerialize this value into an OData literal.\nSerialize this filter into a complete OData <code>$filter</code> string.")