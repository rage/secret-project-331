searchState.loadedDescShard("headless_lms_models", 0, "Functions and structs for interacting with the database.\nMany database tables are related to either a course or an …\nIds will be generated based on the associated data. …\nIds will be generated on the database level. This should …\nHelper struct to use with functions that insert data into …\nA “trait alias” so this <code>for&lt;&#39;a&gt;</code> … string doesn’t …\nContains error and result types for all the model …\nGets reference to the fixed data, if there are any.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaps into the contained <code>Uuid</code> value or generates a new one.\nMaps <code>PKeyPolicy&lt;T&gt;</code> to <code>PKeyPolicy&lt;U&gt;</code> by applying a function …\nMaps a reference of contained data in <code>Fixed(T)</code> to …\nRe-exports commonly used types for convenient use across …\nReturns the argument unchanged.\nReturns the argument unchanged.\nChecks if the user has completed all requirements to be …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA certificate configuration is a default configuration if …\nHow text should be positioned relative to the given …\nUses the same default values as the <code>CREATE TABLE</code> statement …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFinds all configurations that applies to any instance of a …\nA default certificate configuration requires only one …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>ToString::to_string</code>, but without panic on OOM.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf undefined when creating a chapter, will use the course …\nCHANGE TO NON NULL WHEN FRONTEND MODULE EDITING IMPLEMENTED\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nTrue if the chapter is currently open or was open and is …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks the opens_at field for the chapter and compares it …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nShould contain all information required to display the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets the current conversation for the user, if any. Also …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn all background questions (and existing answers) …\nReturn all background questions that will need to be asked …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGets all course ids associated with the given exam id.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInserts enrollment if it doesn’t exist yet.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDeletes submissions, peer reviews, points and etc. for a …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAn object representing that a completion has been …\nId of the completion that was registered to the study …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the number of students that have completed the course\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe registration date that is visible in the study …\nThe student number the completion was registed to.\nCompletion in the form that is recognized by authorized …\nGrading object that maps the system grading information to …\nThe date when the student completed the course. The value …\nThe language used in the completion of the course.\nWhen the student has attempted to register the completion.\nDate when the student opened the form to register their …\nID of the course module.\nWhen the record was created\nEmail at the time of completing the course. Used to match …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets all module completions for the user on a single …\nGets summaries for all completions on the given course …\nGets automatically granted course module completion for …\nAlso returns soft deleted completions so that we can make …\nGet the number of students that have completed the course\nGets latest created completion for the given user on the …\nGrade that the student received for the completion.\nThe grade to be passed to the study registry. Uses the …\nID of the completion.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether or not the student is eligible for credit for the …\nWhether or not the student is qualified for credit based …\nWhether or not the completion has been registered to a …\nFinds the best grade\nStreams completions.\nTier of the completion. Currently always null. …\nChecks whether the user has any completions for the given …\nID of the user for the completion.\nUser id in courses.mooc.fi for received registered …\nBased on CourseModulesSchema but completion_policy parsed …\nMatches the columns in the database.\nReturns associated data for <code>Automatic</code> variant, if matches.\nIf set, use this link rather than the default one when …\nCourse module associated with these requirements.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets course modules for the given course as a map, indexed …\nGets course module where the given exercise belongs to. …\nGets all course modules with a matching <code>uh_course_code</code> or …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nShorthand for checking whether the given exercise related …\nWhether the given number is higher than the exercise …\nWhether the given number is higher than the exercises …\norder_number == 0 in and only if name == None\nRepresents the subset of page fields that are required to …\nIf true, copies all user permissions from the original …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets full course structure including all the pages.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEmail of the teacher who is responsible for the course. …\nName of the teacher who is responsible for the course. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet ids for automatically graded exams that have ended but …\nCreates a record for the given <code>exam_id</code> or makes sure that …\nContains the error value\nError type used by all models. Used as the error type in …\nThe type of ModelError that occured.\nUsed as the result types for all models.\nContains the success value\nStack trace, generated automatically when the error is …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOriginal error that caused this error.\nA trace of tokio tracing spans, generated automatically …\n<code>ToString::to_string</code>, but without panic on OOM.\nWhether or not the exam has already ended at the specified …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether or not the exam has already started at the …\nChecks whether a submission can be made for the given exam.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAdds a log entry for reset exercises for a user\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns service info meant for the course material. If no …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nExercise service definition that the CMS can use to render …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a url that can be used to grade a submission for …\nReturns a url that can be used to generate a public …\nThis is needed because connecting to services directly …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAttempts to find a single random <code>ExerciseSlideSubmission</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFetches the grading for the student, but hides the result …\nFor now gets this information from some task submission in …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nUsed to get the necessary info for rendering a submission …\nSimilar to get_ids_by_exercise_id but returns the record …\nget all submissions for user and course module and …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInformation necessary for the frontend to render an …\nIf none, the task is not completable at the moment because …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUnique for each (exercise_service, user) combo. If none, …\nIndicates what is the user’s completion status for a …\nThe user has completed the activity associated with the …\nThe grading could not complete.\nThe grading process is completed; the score value, if any, …\nTells what’s the status of the grading progress for a …\nThe activity is being drafted and is available for comment.\nThe user has not started the activity, or the activity has …\nThere is no grading process occurring; for example, the …\nFinal Grade is pending, but does not require manual …\nFinal Grade is pending, and it does require human …\nThe activity associated with the exercise has been started …\nThe activity has been submitted at least once by the user …\nCollects user_ids and related exercise_ids according to …\nNone for logged out users.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nResets all related tables for selected users and related …\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nVerifies that the user has completed the given module and …\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGeneral functionality related to course instances\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns (interval_unit, time_unit) for use in SQL queries …\nCollection of functions used for processing and evaluating …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFunctions for precomputing anonymous aggregate statistics …\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\nAlways update the user_exercise_state table though this …\nCreates a new chapter with a front page.\nCreates a new course with a front page and default …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAfter this one <code>set_chapter_front_pages</code> needs to be called …\nEnrolls the user to the given course instance.\nA generic result representing an average metric over a …\nRepresents cohort activity metrics for both weekly and …\nA generic result representing a count metric over a time …\nThe number of active users in this cohort for the given …\nThe activity period (for example, the start of the week or …\nThe average value. For example, the average time (in …\nGet average time from course start to first exercise …\nThe start date of the cohort (either day or week).\nThe count (for example, the number of users).\nGet course completion counts with specified time …\nGet completion counts for all language versions of a …\nGet course completion counts with specified time …\nGet first exercise submission counts with specified time …\nGet first exercise submission counts with specified time …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet cohort activity statistics with specified time …\nTotal unique users who have completed the course in all …\nTotal unique users who have completed the course.\nTotal unique users who have completed the course, grouped …\nTotal unique users who have returned at least one exercise.\nTotal unique users who have returned at least one …\nTotal unique users who have started the course in all …\nTotal unique users in the course settings table.\nTotal unique users in the course settings table, grouped …\nGets user IDs to exclude from course language group …\nGets user IDs to exclude from course statistics for a …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe day offset from the cohort start (only applicable for …\nThe start of the time period (e.g., day, week, month) …\nThe start of the time period (e.g., day, week, month) …\nGet unique users starting counts with specified time …\nGet unique users starting counts for all language versions …\nGet unique users starting counts with specified time …\nGet users returning exercises counts with specified time …\nGet users returning exercises counts with specified time …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nProduces a summary of course completions grouped by user’…\nGets course completion statistics for a specific email …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGrades exercise tasks by sending a request to their …\nIf passed to to an exercise state update, it will update …\nIntended for test purposes only.\nContains data sent by the student when they make a …\nInserts user submission to database. Tasks within …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets submissions that require input from the teacher to …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUpdates the user exercise state starting from a single …\nUsed to for calculating averages when acting on …\nUpdates the user exercise state starting from a slide …\nCalculates the latest statistics for dates that are not …\nIf none, no answer was available for review.\nUses the same type as we use when we render and exercise …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSelects a user’s own submission to be self-reviewed. …\nStarts peer review state for the student for this exercise.\nTries to select a submission for user to peer review.\nReturns a tuple of the exercise slide submission id and a …\nFilters submitted peer review answers to those that are …\nCreates completion for the user if eligible and previous …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets a preview of changes that will occur to completions …\nGets course modules with user’s completion status for …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGoes through all course instances on a course and grants …\nGoes through all users on the course instance and grants …\nChecks whether the course module can be completed …\nFetches all course module completions for the given user …\nChecks whether the student can partake in an exam.\nReturns true if there is at least one exam associated with …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSame as <code>UserExerciseStateUpdateRequiredData</code> but public and …\nSame as …\nVisible only in the current module (and submodules) to …\nVisible only in the current module (and submodules) to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNone if a teacher has not made a grading decision yet.\nThe outer option is to indicate whether this cached value …\nNone if peer review is not enabled for the exercise\nThe outer option is to indicate whether this cached value …\nLoads all required data and updates user_exercise_state. …\nAllows you to pass some data that …\nThe grades summed up from all the user exercise slide …\nLoads peer review config and normalizes weights, if …\nReturns an object with all dependencies for the …\nWhat the peer review thinks the state should be changed to\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMakes sure we don’t do state updates with deleted data …\nFetches email, email subscription status and user ID for …\nFetches all user marketing consents with detailed user …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUsed to update the synced_to_mailchimp_at to a list of …\nUpdates user consents to false in bulk using Mailchimp …\nUsed to add the user_mailchimp_ids to a list of new users …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDeletes entries older than 1 hour – for keeping the …\nFor clearing the table after the user has given a peer …\nReturns an exercise slide submission id that has been …\nReturns an exercise slide submission id that has been …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nWoothee uses UNKNOWN instead of None, this fixes that\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalculates the statistics for a single day.\nReturns the argument unchanged.\nGets the latest date for which the statistics have been …\nCalls <code>U::from(self)</code>.\nCalculates the statistics for a single day.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalculates the statistics for a single day.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalculates the statistics for a single day.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRepresents the subset of page fields that are required to …\nRepresents the subset of page fields that can be updated …\nRead from the course’s settings if None. If course_id is …\nCreates a new <code>NewCoursePage</code> for the same course as this …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIf set, set this page to be the front page of this course …\nGets all pages that belong to the given course that match …\nGets the page that belongs to the given exam. For exams, …\nGets all pages that belong to the given chapter that match …\nGets all pages that belong to the given course but not in …\nHacky way to implement a nullable boolean filter. Based on …\nReturns search results for a phrase i.e. looks for matches …\nReturns search results for the given words. The words can …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates <code>NewCoursePage</code> with provided values that is public …\nMakes the order numbers and chapter ids to match in the db …\nRestore page contents and exercises to a previous revision\nSets the content of this page.\nSets the hidden status of this page.\nOnly used when testing.\nRemaps ids from updates to exercise slides that may have …\nRemaps ids from updates to exercise tasks that may have …\nRemaps ids from updates to exercises that may have their …\nChecks that each exercise has at least one slide and each …\nIf true, the frontend needs to update the url in the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf the average of the peer review likert answers is …\nIf the average of the peer review likert answers is …\nLike <code>PeerOrSelfReviewConfig</code> but only the fields it’s …\nAll answers will be sent to be manually reviewed by the …\nDetermines how we will treat the answer being peer …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nUsually you want to use <code>get_by_exercise_or_course_id</code> …\nReturns the correct peer review config depending on …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGroups answers to peer reviews by peer review ids.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the peer reviews given by this user. Does not …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nModifies the questions in memory so that the weights sum …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nGets multiple records of <code>PeerReviewQueueEntry</code> that still …\nGets multiple records of <code>PeerReviewQueueEntry</code> ordered by …\nReturns entries that have been waiting for teacher to …\nGets multiple records of <code>PeerReviewQueueEntry</code> that still …\nCalls <code>U::from(self)</code>.\nInserts or updates the queue entry indexed by <code>user_id</code>, …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe error types of this program all implement this trait …\nRepresents a single database connection.\nISO 8601 combined date and time with time zone.\nA <strong>data structure</strong> that can be deserialized from any data …\nA record that can be built from a row returned by the …\nThe maximum possible <code>DateTime&lt;Utc&gt;</code>.\nThe minimum possible <code>DateTime&lt;Utc&gt;</code>.\nUUID namespace for Domain Name System (DNS).\nUUID namespace for ISO Object Identifiers (OIDs).\nUUID namespace for Uniform Resource Locators (URLs).\nUUID namespace for X.500 Distinguished Names (DNs).\nRepresents the URL query parameters <code>page</code> and <code>limit</code>, used …\nA connection to a PostgreSQL database.\nA <strong>data structure</strong> that can be serialized into any data …\nIndicates that a SQL type is supported for a database.\nThe Unix Epoch, 1970-01-01 00:00:00 UTC.\nThe UTC time zone. This is the most efficient time zone …\nA Universally Unique Identifier (UUID).\nGet a borrowed <code>Braced</code> formatter.\nReturns a slice of 16 octets containing the value.\nReturns the four field values of the UUID.\nGet a borrowed <code>Hyphenated</code> formatter.\nGet a borrowed <code>Simple</code> formatter.\nReturns a 128bit value containing the value.\nReturns two 64bit values containing the value.\nGet a borrowed <code>Urn</code> formatter.\nBegin a new transaction or establish a savepoint within …\nBegin a new transaction with a custom statement.\nGet a <code>Braced</code> formatter.\nThe number of statements currently cached in the …\nAdd a duration in <code>Days</code> to the date part of the <code>DateTime</code>.\nAdds given <code>Months</code> to the current date and time.\nAdds given <code>TimeDelta</code> to the current date and time.\nSubtract a duration in <code>Days</code> from the date part of the …\nSubtracts given <code>Months</code> from the current date and time.\nSubtracts given <code>TimeDelta</code> from the current date and time.\nRemoves all statements from the cache, closing them on the …\nExplicitly close this database connection.\nDetermines if this Rust type is compatible with the given …\nEstablish a new database connection.\nEstablish a new database connection with the provided …\nIssue a <code>COPY FROM STDIN</code> statement and transition the …\nIssue a <code>COPY TO STDOUT</code> statement and transition the …\nRetrieves the date component with an associated timezone.\nRetrieves the date component.\nDeserialize this value from the given Serde deserializer.\nA buffer that can be used for <code>encode_...</code> calls, that is …\nFix the offset from UTC to its current value, dropping the …\nFormats the combined date and time per the specified …\nFormats the combined date and time with the specified …\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a <code>NonNilUuid</code> back into a <code>Uuid</code>.\nReturns the argument unchanged.\nConvert this <code>DateTime&lt;Local&gt;</code> instance into a <code>DateTime&lt;Utc&gt;</code> …\nConvert this <code>DateTime&lt;Utc&gt;</code> instance into a …\nConvert this <code>DateTime&lt;Utc&gt;</code> instance into a <code>DateTime&lt;Local&gt;</code> …\nConvert this <code>DateTime&lt;Local&gt;</code> instance into a …\nReturns the argument unchanged.\nConvert this <code>DateTime&lt;FixedOffset&gt;</code> instance into a …\nConvert this <code>DateTime&lt;FixedOffset&gt;</code> instance into a …\nReturns the argument unchanged.\nCreates a UUID using the supplied bytes.\nCreates a UUID using the supplied bytes in little endian …\nCreates a reference to a UUID from a reference to the …\nCreates a UUID from four field values.\nCreates a UUID from four field values in little-endian …\nMakes a new <code>DateTime</code> from a <code>NaiveDateTime</code> in <em>local</em> time …\nMakes a new <code>DateTime</code> from its components: a <code>NaiveDateTime</code> …\nCreates a UUID using the supplied bytes.\nCreates a UUID using the supplied bytes in little endian …\nMakes a new <code>DateTime&lt;Utc&gt;</code> from the number of non-leap …\nCreates a new <code>DateTime&lt;Utc&gt;</code> from the number of non-leap …\nMakes a new <code>DateTime&lt;Utc&gt;</code> from the number of non-leap …\nCreates a new <code>DateTime&lt;Utc&gt;</code> from the number of non-leap …\nCreates a UUID from a 128bit value.\nCreates a UUID from a 128bit value in little-endian order.\nCreates a UUID from two 64bit values.\nMakes a new <code>DateTime</code> from its components: a <code>NaiveDateTime</code> …\nIf the UUID is the correct version (v1, or v6) this will …\nIf the UUID is the correct version (v1, v6, or v7) this …\nReturns the variant of the UUID structure.\nReturns the version of the UUID.\nReturns the version number of the UUID.\nGet a <code>Hyphenated</code> formatter.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes self and returns the underlying byte value of the …\nReturns <code>true</code> if the connection is currently in a …\nTests if the UUID is max (all ones).\nTests if the UUID is nil (all zeros).\nGuaranteed to be positive.\nThe ‘max UUID’ (all ones).\nReturns a view to the naive local datetime.\nReturns a view to the naive UTC datetime.\nErrors on non-positive page or limit values.\nCreates a random UUID.\nCreates a UUID using a name from a namespace, based on the …\nThe ‘nil UUID’ (all zeros).\nReturns a <code>DateTime&lt;Utc&gt;</code> which corresponds to the current …\nGuaranteed to be nonnegative.\nRetrieves an associated offset from UTC.\nGuaranteed to be positive.\nHelper to paginate an existing Vec efficiently.\nParses a string from a user-specified format into a …\nParses an RFC 2822 date-and-time string into a …\nParses an RFC 3339 date-and-time string into a …\nParses a string from a user-specified format into a …\nParses a <code>Uuid</code> from a string of hexadecimal digits with …\nCompare two DateTimes based on their true time, ignoring …\nChecks if a connection to the database is still valid.\nSerialize this value into the given Serde serializer.\nthe version number of the server in <code>libpq</code> format\nRestore any buffers in the connection to their default …\nSubtracts another <code>DateTime</code> from the current date and time. …\nGet a <code>Simple</code> formatter.\nRetrieves the time component.\nReturns the number of non-leap seconds since January 1, …\nReturns the number of non-leap-microseconds since January …\nReturns the number of non-leap-milliseconds since January …\nReturns the number of non-leap-nanoseconds since January …\nReturns the number of non-leap-nanoseconds since January …\nReturns the number of microseconds since the last second …\nReturns the number of milliseconds since the last second …\nReturns the number of nanoseconds since the last second …\nRetrieves an associated time zone.\nReturns the bytes of the UUID in little-endian order.\nReturns the four field values of the UUID in little-endian …\nReturns an RFC 2822 date and time string such as …\nReturns an RFC 3339 and ISO 8601 date and time string such …\nReturn an RFC 3339 and ISO 8601 date and time string with …\nReturns a 128bit little-endian value containing the value.\nTurn this <code>DateTime</code> into a <code>DateTime&lt;Utc&gt;</code>, dropping the …\nReturns a <code>Date</code> which corresponds to the current date.\nGuaranteed to be positive.\nExecute the function inside a transaction.\nParses a <code>Uuid</code> from a string of hexadecimal digits with …\nParses a <code>Uuid</code> from a string of hexadecimal digits with …\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\nReturns the canonical SQL type for this Rust type.\nGet a <code>Urn</code> formatter.\nMakes a new <code>DateTime</code> with the day of month (starting from …\nMakes a new <code>DateTime</code> with the day of month (starting from …\nMakes a new <code>DateTime</code> with the hour number changed.\nMakes a new <code>DateTime</code> with the minute number changed.\nMakes a new <code>DateTime</code> with the month number (starting from …\nMakes a new <code>DateTime</code> with the month number (starting from …\nMakes a new <code>DateTime</code> with nanoseconds since the whole …\nMakes a new <code>DateTime</code> with the day of year (starting from …\nMakes a new <code>DateTime</code> with the day of year (starting from …\nMakes a new <code>DateTime</code> with the second number changed.\nSet the time to a new fixed time on the existing date.\nChanges the associated time zone. The returned <code>DateTime</code> …\nMakes a new <code>DateTime</code> with the year number changed, while …\nRetrieve the elapsed years from now to the given <code>DateTime</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new regrading for the exercise task submission …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nUsed internally only by the …\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates <code>NewResearchForm</code> with provided values that is …\nSets the content of this research form.\nReturns a human-readable description of the domain this …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets all roles related to any course in a language group. …\nGets all roles related to a specific course. This includes:\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nGets all of the user’s course settings that have their …\nCalls <code>U::from(self)</code>.\nCreates new user course settings based on the enrollment …\nReturns the argument unchanged.\nRetrieves all users enrolled in a specific course\nCalls <code>U::from(self)</code>.\nIncludes all users who have returned an exercise on a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEither a course instance or exam id.\nConvenience struct that combines user state to the …\nIn this stage the user submits answers to the exercise. If …\nIn this stage the student is instructed to give peer …\nIn this stage the the reviews have been completed and the …\nTells what stage of reviewing the user is currently in. …\nIn this stage the student is instructed to review their …\nIn this stage the student has completed everything they …\nIn this stage the student has completed the neccessary …\nProvides a reference to the inner <code>Exercise</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets course instance metrics for a single module.\nGets the total amount of points that the user has received …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>ToString::to_string</code>, but without panic on OOM.\nTODO: should be moved to the user_exercise_state_updater …\nTODO: should be removed\nProvides a reference to the inner <code>UserExerciseState</code>.\nReturns a new state for the activity progress.\nReturns a new state for the grading progress.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nUpserts user score from task grading results. The score …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nIncludes all users who have returned an exercise on a …\nCalls <code>U::from(self)</code>.")