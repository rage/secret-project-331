searchState.loadedDescShard("headless_lms_utils", 0, "Commonly used utils.\nRedis cache wrapper.\nError utilities and the error and result types for all the …\nAllows storing files to a file storage backend.\nProvides functionality for checksumming directory trees.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAttempts to create an ApplicationConfiguration from …\nAttempts to create an AzureChatbotConfiguration from …\nAttempts to create an AzureSearchConfiguration from …\nAttempts to create an AzureBlobStorageConfiguration from …\nAttempts to create an AzureConfiguration by calling the …\nWrapper for accessing a redis cache.\nStores the given value in the redis cache as JSON (<code>Vec&lt;u8&gt;</code>…\nReturns the argument unchanged.\nRetrieves and deserializes the corresponding value for the …\nRetrieves a value from cache, or executes the provided …\nCalls <code>U::from(self)</code>.\nPanics\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRemoves the private spec from exercise tasks.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nContains a common trait for all the error types for this …\nCustom formatting for stack backtraces inteded to be …\nContains error and result types for all the util functions.\nThe error types of this program all implement this trait …\nFormats backtraces for printing but omits unnecessary …\nContains the error value\nContains the success value\nError type used by all models. Used as the error type in …\nThe type of UtilError that occured.\nUsed as the result types for all utils.\nStack trace, generated automatically when the error is …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOriginal error that caused this error.\nA trace of tokio tracing spans, generated automatically …\nAllows storing files to a file storage backend.\nDelete a file.\nDownload a file to memory.\nDownload a file without loading the whole file to memory.\nThis function returns a path to a folder where downloaded …\nGet a url that can be used to download the file without …\nGet a url for a file in FileStore that can be used to …\nUpload a file that’s in memory to a path.\nUpload a file without loading the whole file to memory\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nNeeds to not be async because of how this is used in …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nNeeds to not be async because of how this is used in …\nRecursively hashes a folder returning a checksum.\nFor use with join! or try_join! Makes the future to run …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTries to init from env\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new mapper by reading the folder from env …\nRepresents the URL query parameters <code>page</code> and <code>limit</code>, used …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGuaranteed to be positive.\nErrors on non-positive page or limit values.\nGuaranteed to be nonnegative.\nGuaranteed to be positive.\nHelper to paginate an existing Vec efficiently.\nGuaranteed to be positive.\nChecks whether the string is IETF language code where …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")