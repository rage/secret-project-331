searchState.loadedDescShard("icu", 0, "<code>icu</code> is the main meta-crate of the <code>ICU4X</code> project.\nThis is a calendar that encompasses all formattable ‚Ä¶\nConvenient type for selecting the kind of AnyCalendar to ‚Ä¶\nTypes that contain a calendar\nA <code>Buddhist</code> calendar\nThe kind of a <code>Buddhist</code> calendar\nA calendar implementation\nThe calendar being wrapped\nA <code>Chinese</code> calendar\nThe kind of a <code>Chinese</code> calendar\nA <code>Coptic</code> calendar\nThe kind of a <code>Coptic</code> calendar\nA <code>Dangi</code> calendar\nThe kind of a <code>Dangi</code> calendar\nA date for a given calendar.\nError type for date creation.\nThe internal type used to represent dates\nAn <code>Ethiopian</code> calendar\nThe kind of an <code>Ethiopian</code> calendar, with Amete Mihret era\nThe kind of an <code>Ethiopian</code> calendar, with Amete Alem era\nThe (proleptic) Gregorian Calendar\nA <code>Gregorian</code> calendar\nThe kind of a <code>Gregorian</code> calendar\nA <code>Hebrew</code> calendar\nThe kind of a <code>Hebrew</code> calendar\nA <code>HijriSimulated</code> calendar\nThe kind of an <code>HijriSimulated</code>, Mecca calendar\nA <code>HijriTabular</code> calendar\nThe kind of an <code>HijriTabular</code> calendar using ‚Ä¶\nThe kind of an <code>HijriTabular</code> calendar using ‚Ä¶\nA <code>HijriUmmAlQura</code> calendar\nThe kind of an <code>HijriUmmAlQura</code> calendar\nAn <code>Indian</code> calendar\nThe kind of a <code>Indian</code> calendar\nTrait for calendars that may be converted to <code>AnyCalendar</code>\nThe ISO-8601 Calendar\nAn <code>Iso</code> calendar\nThe kind of an <code>Iso</code> calendar\nA <code>Japanese</code> calendar\nThe kind of a <code>Japanese</code> calendar\nA <code>JapaneseExtended</code> calendar\nThe kind of a <code>JapaneseExtended</code> calendar\nExpected a different calendar.\nThe RFC 9557 string is missing fields required for parsing ‚Ä¶\nAn error returned from parsing an RFC 9557 string to an ‚Ä¶\nA <code>Persian</code> calendar\nThe kind of a <code>Persian</code> calendar\nA field is out of range for its domain.\nValue is out of range.\nAn argument is out of range for its domain.\nThis exists as a wrapper around <code>&amp;&#39;a T</code> so that <code>Date&lt;&amp;&#39;a C&gt;</code> ‚Ä¶\nA <code>Roc</code> calendar\nThe kind of a <code>Roc</code> calendar\nSyntax error.\nThe RFC 9557 string specifies an unknown calendar.\nUnknown era\nUnknown month code\nThe type of YearInfo returned by the date\nWrap the calendar type in <code>Ref&lt;T&gt;</code>, making it cheaper to ‚Ä¶\nObtain the inner calendar\nTypes for individual calendars\nGet a reference to the contained calendar\nReturns the <code>CalendarAlgorithm</code> that is required to match ‚Ä¶\nGet a reference to the contained calendar wrapper\nConvert this <code>Date&lt;AnyCalendar&gt;</code> to another <code>AnyCalendar</code>, if ‚Ä¶\nReturns information about the year cycle, for cyclic ‚Ä¶\nConvert a date for this calendar into an <code>AnyDateInner</code>\nThe calendar-specific day-of-month represented by <code>date</code>\nThe calendar-specific day-of-month represented by <code>self</code>\nThe calendar-specific day-of-month represented by <code>date</code>\nThe calendar-specific day-of-month represented by <code>date</code>\nThe calendar-specific day-of-month represented by <code>date</code>\nThe day of the week for this date\nInformation of the day of the year\nThe calendar-specific day-of-month represented by <code>self</code>\nInformation of the day of the year\nInformation of the day of the year\nCount the number of days in a given month, specified by ‚Ä¶\nThe number of days in the month of this date\nCount the number of days in a given year, specified by ‚Ä¶\nThe number of days in the year of this date\nObtain a name for the calendar for debug printing\nReturns information about the era for calendars using eras.\nThe extended year value\nThe ‚Äúextended year‚Äù, typically anchored with year 1 as ‚Ä¶\nThe argument that is out of range, such as ‚Äúyear‚Äù\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nMove an <code>AnyCalendar</code> into a <code>Self</code>, or returning it as an ‚Ä¶\nConvert an <code>AnyCalendar</code> reference into a <code>Self</code> reference.\nConstruct a date from era/month codes and fields\nConstruct a date from era/month codes and fields\nConstruct the date from an ISO date\nConstruct the date from a <code>RataDie</code>\nConstruct a date from a <code>RataDie</code> and some calendar ‚Ä¶\nConstruct a date from raw values for a given calendar. ‚Ä¶\nGet the inner date implementation. Should not be called ‚Ä¶\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWrap the contained calendar type in <code>Arc&lt;T&gt;</code>, making it ‚Ä¶\nWrap the contained calendar type in <code>Rc&lt;T&gt;</code>, making it ‚Ä¶\nCalculate if a date is in a leap year\nReturns whether <code>self</code> is in a calendar-specific leap year\nThe calendar-specific check if <code>date</code> is in a leap year\nThe <code>AnyCalendarKind</code> enum variant associated with this ‚Ä¶\nThe <code>AnyCalendarKind</code> corresponding to the calendar this ‚Ä¶\nThe maximum value (inclusive). This might not be tight.\nThe minimum value (inclusive). This might not be tight.\nThe calendar-specific month represented by <code>date</code>\nThe calendar-specific month represented by <code>self</code>\nThe calendar-specific month represented by <code>date</code>\nThe calendar-specific month represented by <code>date</code>\nThe calendar-specific month represented by <code>date</code>\nCount the number of months in a given year, specified by ‚Ä¶\nThe number of months in the year of this date\nConstructs an AnyCalendar for a given calendar kind from ‚Ä¶\nSelects the <code>AnyCalendarKind</code> appropriate for the given ‚Ä¶\nConstruct a new ISO Calendar\nConstruct a date from an ISO date and some calendar ‚Ä¶\nLocale preferences used by this crate\nüöß [Unstable] Data provider struct definitions for this ‚Ä¶\nConvert this calendar into an <code>AnyCalendar</code>, moving it\nType-erase the date, converting it to a date for ‚Ä¶\nConvert the Date to a date in a different calendar\nObtain an ISO date from this date\nConvert the Date to an ISO Date\nObtain a <code>RataDie</code> from this date\nConvert the date to a <code>RataDie</code>\nCreates a <code>Date</code> in the given calendar from an RFC 9557 ‚Ä¶\nCreates a <code>Date</code> in the given calendar from an RFC 9557 ‚Ä¶\nConstruct a new Buddhist Date.\nConstruct a new Chinese date from a <code>year</code>, <code>month</code>, and <code>day</code>. ‚Ä¶\nConstruct new Coptic Date.\nConstruct a new Dangi date from a <code>year</code>, <code>month</code>, and <code>day</code>. ‚Ä¶\nConstruct new Ethiopian Date.\nConstruct a date from from era/month codes and fields, and ‚Ä¶\nConstruct a new Gregorian Date.\nConstruct new Hebrew Date.\nConstruct new Tabular Hijri Date.\nConstruct new Indian Date, with year provided in the ≈öaka ‚Ä¶\nConstruct a new ISO date from integers.\nConstruct a new Japanese Date with all eras.\nConstruct a new Japanese Date.\nConstruct new Julian Date.\nConstruct new Persian Date.\nConstruct a new Republic of China calendar Date.\nConstruct new simulated Hijri Date.\nConstruct new Hijri Umm al-Qura Date.\nA version of <code>Self::new</code> that uses custom data provided by a ‚Ä¶\nA version of <code>Self::new</code> that uses custom data provided by a ‚Ä¶\nThis module contains various types used by <code>icu_calendar</code> ‚Ä¶\nThe actual value\nFunctions for region-specific weekday information.\nThe ISO week of the year containing this date.\nThe calendar-specific year-info.\nInformation about the year\nThe calendar-specific year represented by <code>date</code>\nThe field that is out of range, such as ‚Äúyear‚Äù\nThe maximum value (inclusive). This might not be tight.\nThe minimum value (inclusive). This might not be tight.\nThe actual value\nUse the single Anno Mundi era, anchored at the date of ‚Ä¶\nUse the Anno Mundi era, anchored at the date of Creation, ‚Ä¶\nThis is a calendar that encompasses all formattable ‚Ä¶\nConvenient type for selecting the kind of AnyCalendar to ‚Ä¶\nThe Thai Solar Buddhist Calendar\nA <code>Buddhist</code> calendar\nThe kind of a <code>Buddhist</code> calendar\nThe Chinese Calendar\nA <code>Chinese</code> calendar\nThe kind of a <code>Chinese</code> calendar\nThe Coptic Calendar\nA <code>Coptic</code> calendar\nThe kind of a <code>Coptic</code> calendar\nThe Traditional Korean (Dangi) Calendar\nA <code>Dangi</code> calendar\nThe kind of a <code>Dangi</code> calendar\nThe Ethiopian Calendar\nAn <code>Ethiopian</code> calendar\nThe kind of an <code>Ethiopian</code> calendar, with Amete Mihret era\nThe kind of an <code>Ethiopian</code> calendar, with Amete Alem era\nWhich era style the ethiopian calendar uses\nFriday July 16, 622 AD (0622-07-19 ISO)\nThe (proleptic) Gregorian Calendar\nA <code>Gregorian</code> calendar\nThe kind of a <code>Gregorian</code> calendar\nThe Hebrew Calendar\nA <code>Hebrew</code> calendar\nThe kind of a <code>Hebrew</code> calendar\nThe simulated Hijri Calendar\nA <code>HijriSimulated</code> calendar\nThe kind of an <code>HijriSimulated</code>, Mecca calendar\nThe tabular Hijri Calendar.\nA <code>HijriTabular</code> calendar\nThe epoch for the <code>HijriTabular</code> calendar.\nThe leap year rule for the <code>HijriTabular</code> calendar.\nThe kind of an <code>HijriTabular</code> calendar using ‚Ä¶\nThe kind of an <code>HijriTabular</code> calendar using ‚Ä¶\nThe Umm al-Qura Hijri Calendar\nA <code>HijriUmmAlQura</code> calendar\nThe kind of an <code>HijriUmmAlQura</code> calendar\nThe Indian National (≈öaka) Calendar\nAn <code>Indian</code> calendar\nThe kind of a <code>Indian</code> calendar\nThe ISO-8601 Calendar\nAn <code>Iso</code> calendar\nThe kind of an <code>Iso</code> calendar\nThe Japanese Calendar (with modern eras only)\nA <code>Japanese</code> calendar\nThe kind of a <code>Japanese</code> calendar\nThe Japanese Calendar (with historical eras)\nA <code>JapaneseExtended</code> calendar\nThe kind of a <code>JapaneseExtended</code> calendar\nThe Julian Calendar\nThe Persian Calendar\nA <code>Persian</code> calendar\nThe kind of a <code>Persian</code> calendar\nThe Republic of China Calendar\nA <code>Roc</code> calendar\nThe kind of a <code>Roc</code> calendar\nThusday July 15, 622 AD (0622-07-18 ISO)\nLeap years 2, 5, 7, 10, 13, 16, 18, 21, 24, 26, 29\nThe calendar-specific day-of-month represented by <code>date</code>\nThe calendar-specific day-of-month represented by <code>date</code>\nThe calendar-specific day-of-month represented by <code>date</code>\nThe calendar-specific day-of-month represented by <code>date</code>\nThe calendar-specific day-of-month represented by <code>date</code>\nInformation of the day of the year\nInformation of the day of the year\nInformation of the day of the year\nObtain a name for the calendar for debug printing\nReturns whether this has the Amete Alem era\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe calendar-specific month represented by <code>date</code>\nThe calendar-specific month code represented by <code>date</code>; ‚Ä¶\nThe calendar-specific month represented by <code>date</code>\nThe calendar-specific month represented by <code>date</code>\nThe calendar-specific month represented by <code>date</code>\nCreates a new <code>Chinese</code> with some precomputed calendrical ‚Ä¶\nCreates a new <code>Dangi</code> with some precomputed calendrical ‚Ä¶\nConstruct a new Ethiopian Calendar for the Amete Mihret ‚Ä¶\nConstruct a new <code>Hebrew</code>\nCreates a new <code>HijriUmmAlQura</code>.\nConstruct a new <code>HijriTabular</code> with the given leap year rule ‚Ä¶\nConstruct a new Indian Calendar\nCreates a new <code>Japanese</code> using only modern eras (post-meiji) ‚Ä¶\nCreates a new <code>Japanese</code> from using all eras (including ‚Ä¶\nConstruct a new Julian Calendar\nConstructs a new Persian Calendar\nConstruct a new <code>Chinese</code> without any precomputed ‚Ä¶\nConstruct a new <code>Dangi</code> without any precomputed calendrical ‚Ä¶\nCreates a new <code>HijriSimulated</code> for reference location Mecca, ‚Ä¶\nConstruct a new <code>HijriSimulated</code> for reference location ‚Ä¶\nConstruct a new Ethiopian Calendar with a value specifying ‚Ä¶\nInternal scaffolding types\nA version of <code>Self::new_mecca</code> that uses custom data ‚Ä¶\nA version of [<code>Self :: new</code>] that uses custom data provided ‚Ä¶\nA version of <code>Self::new</code> that uses custom data provided by a ‚Ä¶\nA version of <code>Self::new</code> that uses custom data provided by a ‚Ä¶\nA version of <code>Self::new</code> that uses custom data provided by a ‚Ä¶\nA version of <code>Self::new</code> that uses custom data provided by a ‚Ä¶\nA version of [<code>Self :: new</code>] that uses custom data provided ‚Ä¶\nA version of [<code>Self :: new</code>] that uses custom data provided ‚Ä¶\nA version of [<code>Self :: new</code>] that uses custom data provided ‚Ä¶\nA version of [<code>Self :: new</code>] that uses custom data provided ‚Ä¶\nThe calendar-specific year represented by <code>date</code>\nThe calendar-specific year represented by <code>date</code> Julian has ‚Ä¶\nTrait marking other traits that are considered unstable ‚Ä¶\nThai Buddhist calendar (same as Gregorian except for the ‚Ä¶\nA Unicode Calendar Identifier defines a type of calendar.\nThe preferences for calendars formatting.\nTraditional Chinese calendar\nHijri calendar, tabular (intercalary years ‚Ä¶\nCoptic calendar\nTraditional Korean calendar\nEthiopic calendar, Amete Alem (epoch approx. 5493 B.C.E)\nEthiopic calendar, Amete Mihret (epoch approx, 8 C.E.)\nGregorian calendar\nTraditional Hebrew calendar\nHijri calendar\nHijri Calendar sub-type\nIndian calendar\nISO calendar (Gregorian calendar using the ISO 8601 ‚Ä¶\nJapanese Imperial calendar\nPersian calendar\nHijri calendar, Saudi Arabia sighting\nRepublic of China calendar\nHijri calendar, tabular (intercalary years ‚Ä¶\nHijri calendar, Umm al-Qura\nA helper function for displaying as a <code>&amp;str</code>.\nThe user‚Äôs preferred calendar system.\nExtends the preferences with the values from another set ‚Ä¶\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLocale Preferences for the Preferences structure.\nBaked data\nPrecomputed data for the Chinese calendar\nPrecomputed data for the Dangi calendar\nPrecomputed data for the Hijri obsevational calendar\nFull Japanese era names\nModern Japanese era names\nWeek information\nThe date at which an era started\n<code>ULE</code> type for <code>EraStartDate</code>\nA data structure containing the necessary era data for ‚Ä¶\nAn ICU4X mapping to a subset of CLDR weekData. See ‚Ä¶\nBitset representing weekdays.\nüöß [Unstable] Data provider struct definitions for ‚Ä¶\nReturns whether the set contains the day.\nA map from era start dates to their era codes\nThe day the era started in\nThe first day of a week.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nüöß [Unstable] Data provider struct definitions for ‚Ä¶\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe month the era started in\nCreates a new WeekdaySet using the provided days.\nBitset representing weekdays that are part of the ‚Äò‚Ä¶\nThe year the era started in\nPrecomputed data for the Chinese calendar\nPrecomputed data for the Dangi calendar\nCached/precompiled data for a certain range of years for a ‚Ä¶\nThe struct containing compiled ChineseData\nA list of precomputed data for each year beginning with ‚Ä¶\nThe ISO year corresponding to the first data entry for ‚Ä¶\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPrecomputed data for the Hijri obsevational calendar\nCached/precompiled data for a certain range of years for a ‚Ä¶\nThe struct containing compiled Hijri YearInfo\nA list of precomputed data for each year beginning with ‚Ä¶\nThe extended year corresponding to the first data entry ‚Ä¶\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe century is required, the era may be included.\nA cyclic year, and the related ISO year\nYear information for a year that is specified as a cyclic ‚Ä¶\nA 1-based day number in a month.\nA day of week in month. 1-based.\nThe current day of the year, 1-based.\nAn era and a year in that era\nThe century and era are required.\nThe era is required, the century may be included.\nYear information for a year that is specified with an era\nA week number in a year\nRepresentation of a month in a year\nRepresentation of a formattable month.\nThe <em>Rata Die</em>, or <em>R.D.</em>: number of days since January 1, 1 ‚Ä¶\nThe year is unambiguous without a century or era.\nA weekday in a 7-day week, according to ISO-8601.\nDefines whether the era or century is required to ‚Ä¶\nThe type of year: Calendars like Chinese don‚Äôt have an ‚Ä¶\nAdds a number of days to this <code>RataDie</code> in a const-friendly ‚Ä¶\nThe ambiguity of the era/year combination\nGet the cyclic year informat, if available\nGet the era year information, if available\nThe era code as defined by CLDR, expect for cases where ‚Ä¶\nAn era index, for calendars with a small set of eras.\nGet <em>some</em> year number that can be displayed\nA month code, useable for formatting\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from an ISO-8601 weekday number to an <code>Weekday</code> ‚Ä¶\nReturns an option which is <code>Some</code> containing the non-month ‚Ä¶\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet whether the month is a leap month\nThe ISO year\nGets the month number. A month number N is not necessarily ‚Ä¶\nCreate a <code>RataDie</code>\nConstruct a ‚Äúnormal‚Äù month code given a number (‚ÄúMxx‚Ä¶\nThe month number in this given year. For calendars with ‚Ä¶\nGet the month number and whether or not it is leap from ‚Ä¶\nThe ISO year corresponding to this year\nCalculate the number of days between two <code>RataDie</code> in a ‚Ä¶\nThe month code, used to distinguish months during leap ‚Ä¶\nConvert this to an <code>i64</code> value representing the <code>RataDie</code>\nCalculate the number of days between two <code>RataDie</code> in a ‚Ä¶\nThe 1-based ISO week number\nThe numeric year in that era\nThe year in the cycle, 1-based\nInformation about the first day of the week and the ‚Ä¶\nThe preferences for the week information.\nIterator that yields weekdays that are part of the weekend.\nExtends the preferences with the values from another set ‚Ä¶\nThe first day of the week\nThe first day of a week.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLocale Preferences for the Preferences structure.\nCreates a new <code>WeekCalculator</code> from compiled data.\nA version of <code>Self::try_new</code> that uses custom data provided ‚Ä¶\nA version of [<code>Self :: try_new</code>] that uses custom data ‚Ä¶\nWeekdays that are part of the ‚Äòweekend‚Äô, for calendar ‚Ä¶\nThe set of weekend days\nA wrapper around <code>CaseMapper</code> that can produce case mapping ‚Ä¶\nA borrowed <code>CaseMapCloser</code>.\nA struct with the ability to convert characters and ‚Ä¶\nA struct with the ability to convert characters and ‚Ä¶\nAn object that accepts characters and/or strings to be ‚Ä¶\nA wrapper around <code>CaseMapper</code> that can compute titlecasing ‚Ä¶\nA borrowed <code>TitlecaseMapper</code>.\nAdds all simple case mappings and the full case folding ‚Ä¶\nAdds all simple case mappings and the full case folding ‚Ä¶\nAdd a character to the set\nAdd a string to the set\nFinds all characters and strings which may casemap to <code>s</code> as ‚Ä¶\nConstructs a borrowed version of this type for more ‚Ä¶\nConstructs a borrowed version of this type for more ‚Ä¶\nConstructs a borrowed version of this type for more ‚Ä¶\nCase-folds the characters in the given string as a ‚Ä¶\nCase-folds the characters in the given string as a String. ‚Ä¶\nCase-folds the characters in the given string as a ‚Ä¶\nCase-folds the characters in the given string as a String, ‚Ä¶\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the full lowercase mapping of the given string as ‚Ä¶\nReturns the full lowercase mapping of the given string as ‚Ä¶\nCreates a <code>CaseMapperBorrowed</code> using compiled data.\nCreates a <code>CaseMapperBorrowed</code> using compiled data.\nA constructor which creates a <code>CaseMapCloserBorrowed</code> using ‚Ä¶\nA constructor which creates a <code>CaseMapCloserBorrowed</code> using ‚Ä¶\nA constructor which creates a <code>TitlecaseMapperBorrowed</code> ‚Ä¶\nA constructor which creates a <code>TitlecaseMapperBorrowed</code> ‚Ä¶\nA constructor which creates a <code>CaseMapCloser</code> from an ‚Ä¶\nA constructor which creates a <code>TitlecaseMapper</code> from an ‚Ä¶\nOptions used by types in this crate\nüöß [Unstable] Data provider struct definitions for this ‚Ä¶\nReturns the simple case folding of the given char. For ‚Ä¶\nReturns the simple case folding of the given char, using ‚Ä¶\nReturns the lowercase mapping of the given <code>char</code>. This ‚Ä¶\nReturns the titlecase mapping of the given <code>char</code>. This ‚Ä¶\nReturns the uppercase mapping of the given <code>char</code>. This ‚Ä¶\nCheaply converts a [<code>CaseMapperBorrowed&lt;&#39;static&gt;</code>] into a ‚Ä¶\nCheaply converts a [<code>CaseMapCloserBorrowed&lt;&#39;static&gt;</code>] into a ‚Ä¶\nCheaply converts a [<code>TitlecaseMapperBorrowed&lt;&#39;static&gt;</code>] into ‚Ä¶\nReturns the full titlecase mapping of the given string as ‚Ä¶\nReturns the full titlecase mapping of the given string as ‚Ä¶\nReturns the full titlecase mapping of the given string as ‚Ä¶\nReturns the full titlecase mapping of the given string as ‚Ä¶\nA version of <code>Self::new</code> that uses custom data provided by a ‚Ä¶\nA version of <code>Self::new</code> that uses custom data provided by a ‚Ä¶\nA version of <code>Self::new</code> that uses custom data provided by a ‚Ä¶\nA version of [<code>Self :: new</code>] that uses custom data provided ‚Ä¶\nA version of [<code>Self :: new</code>] that uses custom data provided ‚Ä¶\nA version of [<code>Self :: new</code>] that uses custom data provided ‚Ä¶\nConstruct this object to wrap an existing CaseMapper (or a ‚Ä¶\nConstruct this object to wrap an existing CaseMapper (or a ‚Ä¶\nA version of [<code>Self :: new_with_mapper</code>] that uses custom ‚Ä¶\nA version of [<code>Self :: new_with_mapper</code>] that uses custom ‚Ä¶\nReturns the full uppercase mapping of the given string as ‚Ä¶\nReturns the full uppercase mapping of the given string as ‚Ä¶\nAdjust the string to the first relevant character before ‚Ä¶\nWhere to start casing the string.\nLowercase the rest of the string (‚ÄúspoNgEBoB‚Äù -&gt; ‚Äú‚Ä¶\nStart titlecasing immediately, even if the character is ‚Ä¶\nVarious options for controlling titlecasing\nAdjust the string to the first cased character before ‚Ä¶\nHow to handle the rest of the string once the beginning of ‚Ä¶\nPreserve the casing of the rest of the string (‚ÄúspoNgEBoB‚Ä¶\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether to start casing at the beginning of the string or ‚Ä¶\nHow to handle the rest of the string once the head of the ‚Ä¶\nBaked data\nThis type contains all of the casemapping data\nReverse case folding data. Maps from multi-character ‚Ä¶\nReverse case mapping data.\nMarker for casemapping data.\nThe primary per-codepoint casefolding data\nThis module contains various types for the header part of ‚Ä¶\nThis is the main module pertaining to casemapping ‚Ä¶\nExceptions to the case mapping data\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe actual map. Maps from strings to a list of codepoints, ‚Ä¶\nCase mapping data\n‚ÄúAbove‚Äù accents with combining class 230\nCase mapping data associated with a single code point\nA subset of case mapping data associated with a single ‚Ä¶\nPacked casemappingdata type\nThe case of a Unicode character\nThis code point is cased. We store the extra data, its ‚Ä¶\nThe dot type of a Unicode character. This indicates how ‚Ä¶\nThis code point is an exception. Provides the case type of ‚Ä¶\nLowercase letter\nNormal characters with combining class 0\nData that is stored in CaseMapData when it is <em>not</em> an ‚Ä¶\nOther accent characters\nSoft-dotted characters with combining class 0\nTitlecase letter\nThis code point is uncased, and has the following extra ‚Ä¶\nUppercase letter\nThe ‚Äúdot type‚Äù\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nWhether this is default-ignoreable\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe rest of the case mapping data\nWhether or not the type is case-sensitive\nA bunch of bits associated with each exception.\nThe bitflags on an exception header.\nPacked slot presence marker\nThe dot type of the character\nThe dot type of the character\nWhether or not the slots are double-width.\nWhether or not the slots are double-width.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIf the character has conditional case folding\nIf the character has conditional case folding\nIf the character has conditional special casing\nIf the character has conditional special casing\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf the character is case sensitive\nIf the character is case sensitive\nThe delta stored in the <code>Delta</code> slot is negative\nThe delta stored in the <code>Delta</code> slot is negative\nThere is no simple casefolding, even if there is a simple ‚Ä¶\nThere is no simple casefolding, even if there is a simple ‚Ä¶\nThis represents case mapping exceptions that can‚Äôt be ‚Ä¶\nA decoded <code>Exception</code> type, with all of the data parsed out ‚Ä¶\nA type representing the wire format of <code>Exception</code>. The data ‚Ä¶\n<code>VarULE</code> type for <code>Exception</code>. See <code>Exception</code> for documentation.\nThe various bit based exception data associated with this.\nThe various bit-based data associated with this exception\nCase folding\nClosure mappings\nFormat : ‚Ä¶\nExtract all the data out into a structured form\nConvert to a wire-format encodeable (VarULE-encodeable) ‚Ä¶\nThe list of exceptions\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe four full-mappings strings, indexed by MappingKind u8 ‚Ä¶\nObtain the exception at index <code>idx</code>. Will return a default ‚Ä¶\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLowercase mapping\nThe simple casefold delta. Its sign is stored in ‚Ä¶\nWhich slots are present in <code>data</code>.\nTitlecase mapping\nUppercase mapping\nCompares strings according to culturally-relevant ordering.\nCompares strings according to culturally-relevant ordering,\nThe preferences for collation.\nConstructs a borrowed version of this type for more ‚Ä¶\nTreatment of case. (Large and small kana differences are ‚Ä¶\nThe collation type. This corresponds to the <code>-u-co</code> BCP-47 ‚Ä¶\nCompare guaranteed well-formed UTF-8 slices.\nCompare potentially ill-formed UTF-16 slices. Unpaired ‚Ä¶\nCompare potentially ill-formed UTF-8 slices. Ill-formed ‚Ä¶\nExtends the preferences with the values from another set ‚Ä¶\nReturns the argument unchanged.\nConvenience conversion for copying the preferences from an ‚Ä¶\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLocale Preferences for the Preferences structure.\nWhen set to <code>True</code>, any sequence of decimal digits is sorted ‚Ä¶\nThis module contains the types that are part of the API ‚Ä¶\nLocale preferences used by this crate\nüöß [Unstable] Data provider struct definitions for this ‚Ä¶\nThe resolved options showing how the default options, the ‚Ä¶\nCheaply converts a [<code>CollatorBorrowed&lt;&#39;static&gt;</code>] into a ‚Ä¶\nCreates <code>CollatorBorrowed</code> for the given locale and options ‚Ä¶\nCreates a collator for the given locale and options from ‚Ä¶\nA version of <code>Self::try_new</code> that uses custom data provided ‚Ä¶\nA version of [<code>Self :: try_new</code>] that uses custom data ‚Ä¶\nWhat to do about characters whose comparison level can be ‚Ä¶\nWhether to distinguish case in sorting, even for sorting ‚Ä¶\nOptions settable by the user of the API.\nCharacters classified as spaces, punctuation, symbols, or ‚Ä¶\nCompare the NFD form by code point order as the quinary ‚Ä¶\nWhat characters get shifted to the quaternary level with ‚Ä¶\nKeep the characters whose level can be varied on the ‚Ä¶\nLeave off the case level option.  Case differences will be ‚Ä¶\nTurn on the case level option, thereby making a separate ‚Ä¶\nCompare only on the level of base letters. This level ‚Ä¶\nCharacters classified as spaces or punctuation are shifted.\nCompare also on the quaternary level. For Japanese, Higana ‚Ä¶\nThe resolved (actually used) options used by the collator.\nCompare also on the secondary level, which corresponds to ‚Ä¶\nShift the characters at or below <code>MaxVariable</code> to the ‚Ä¶\nCharacters classified as spaces are shifted.\nThe collation strength that indicates how many levels to ‚Ä¶\nCharacters classified as spaces, punctuation, or symbols ‚Ä¶\nCompare also on the tertiary level. By default, if the ‚Ä¶\nUser-specified alternate handling collation option.\nResolved alternate handling collation option.\nResolved case first collation option.\nUser-specified case level collation option.\nResolved case level collation option.\nCreate a new <code>CollatorOptions</code> with the defaults.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvenience conversion for copying the options from an ‚Ä¶\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUser-specified max variable collation option.\nResolved max variable collation option.\nResolved numeric collation option.\nUser-specified strength collation option.\nResolved strength collation option.\nCollation parameter key for ordering by case.\nCollation parameter key for numeric handling.\nA Unicode Collation Identifier defines a type of collation ‚Ä¶\nA previous version of the ordering, for compatibility\nDictionary style ordering (such as in Sinhala)\nThe default Unicode collation element table order\nRecommended ordering for emoji characters\nEuropean ordering rules\nNo special case ordering\nNo special handling for numeric ordering\nLower case to be sorted before upper case\nPhonebook style ordering (such as in German)\nPhonetic ordering (sorting based on pronunciation)\nPinyin ordering for Latin and for CJK characters (used in ‚Ä¶\nSpecial collation type for string search\nSpecial collation type for Korean initial consonant search\nDefault ordering for each language\nPinyin ordering for Latin, stroke order for CJK characters ‚Ä¶\nTraditional style ordering (such as in Spanish)\nA sequence of decimal digits is sorted at primary level ‚Ä¶\nPinyin ordering for Latin, Unihan radical-stroke ordering ‚Ä¶\nUpper case to be sorted before lower case\nPinyin ordering for Latin, zhuyin order for Bopomofo and ‚Ä¶\nA helper function for displaying as a <code>&amp;str</code>.\nA helper function for displaying as a <code>&amp;str</code>.\nA helper function for displaying as a <code>&amp;str</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBaked data\nThe main collation data either for the root or for a ‚Ä¶\nSecondary weights for the start of the Combining ‚Ä¶\nData marker for collation diacritics data.\n<code>CollationElement32</code>s for the Hangul Jamo Unicode Block\nData marker for collation jamo data.\nEach non-alias collation that the data provider knows ‚Ä¶\nData marker for collation metadata.\nScript reordering data\nData marker for collation reordering data.\nData marker for singleton root collation data.\nSpecial primaries associated with the root collation\nData marker for collcation special primaries data.\nData marker for collation tailorings.\nSee the mask constants in the <code>impl</code> block for the bit ‚Ä¶\n<code>CollationElement32</code>s used in expansions and as defaults for ‚Ä¶\n<code>CollationElement32</code>s (as <code>u32</code>s) for the Hangul Jamo Unicode ‚Ä¶\n<code>CollationElement</code>s used in expansions and offset CE32s ‚Ä¶\nDefaults and tries for prefix and contraction matching\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe primaries corresponding to <code>MaxVariable</code> character ‚Ä¶\nLimit of last reordered range. 0 if no reordering or no ‚Ä¶\nThe high 8 bits of the numeric primary\nPrimary-weight ranges for script reordering, to be used by ‚Ä¶\n256-byte table for reordering permutation of primary lead ‚Ä¶\nSecondary weights for characters starting from U+0300 up ‚Ä¶\nMapping from <code>char</code> to <code>CollationElement32</code> (represented as ‚Ä¶\nThis module provides a data structure for a ‚Ä¶\nThis module provides necessary functionality for highly ‚Ä¶\nThis module provides functionality for querying of sets of ‚Ä¶\nThis module provides a data structure for an ‚Ä¶\nThis struct represents a de-serialized <code>Char16Trie</code> that was ‚Ä¶\nThis struct represents an iterator over a <code>Char16Trie</code>.\nThe input unit(s) continued a matching string and there is ‚Ä¶\nThe input unit(s) continued a matching string and there is ‚Ä¶\nThe input unit(s) did not continue a matching string. Once ‚Ä¶\nThe input unit(s) matched a string but there is no value ‚Ä¶\nAn enum representing the return value from a lookup in ‚Ä¶\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a new <code>Char16TrieIterator</code> backed by borrowed data ‚Ä¶\nReturns a new <code>Char16Trie</code> with ownership of the provided ‚Ä¶\nReturns a new <code>Char16TrieIterator</code> backed by borrowed data ‚Ä¶\nTraverses the trie from the current state for this input ‚Ä¶\nTraverses the trie from the current state for this input ‚Ä¶\nTraverses the trie from the current state for this input ‚Ä¶\nA membership wrapper for <code>CodePointInversionList</code>.\nA builder for <code>CodePointInversionList</code>.\n<code>VarULE</code> type for <code>CodePointInversionList</code>. See ‚Ä¶\nA CodePointInversionList was constructed with an invalid ‚Ä¶\nA CodePointInversionList was constructed from an invalid ‚Ä¶\nAdd the code point value to the ‚Ä¶\nAdd the character to the <code>CodePointInversionListBuilder</code>\nAdd the range of characters to the ‚Ä¶\nAdd the range of characters, represented as u32, to the ‚Ä¶\nAdd the <code>CodePointInversionList</code> reference to the ‚Ä¶\nReturns <code>CodePointInversionList</code> spanning entire Unicode ‚Ä¶\nReturns <code>CodePointInversionList</code> spanning BMP range\nReturns a <code>CodePointInversionList</code> and consumes the ‚Ä¶\nComputes the complement of the builder, inverting the ‚Ä¶\nSee <code>Self::complement_char</code>\nComplements the character in the builder, adding it if not ‚Ä¶\nComplements the range in the builder, adding any elements ‚Ä¶\nSee <code>Self::complement_range</code>\nComplements the set in the builder, adding any elements in ‚Ä¶\nChecks to see the query is in the <code>CodePointInversionList</code>\nChecks to see the unsigned int is in the ‚Ä¶\nChecks to see if the range is in the <code>CodePointInversionList</code>\nCheck if the calling <code>CodePointInversionList</code> contains all ‚Ä¶\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns an owned inversion list representing the current ‚Ä¶\nReturns a specific range contained in this ‚Ä¶\nReturns the number of ranges contained in this ‚Ä¶\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAttempts to convert this list into a fully-owned one. ‚Ä¶\nReturns whether the build is empty.\nReturns whether or not the <code>CodePointInversionList</code> is empty\nYields an <code>Iterator</code> going through the character set in the ‚Ä¶\nYields an <code>Iterator</code> returning the ranges of the code points ‚Ä¶\nYields an <code>Iterator</code> returning the ranges of the code points ‚Ä¶\nReturns empty <code>CodePointInversionListBuilder</code>\nSee <code>Self::remove_char</code>\nRemove the character from the <code>CodePointInversionListBuilder</code>\nRemove the range of characters from the ‚Ä¶\nSee <code>Self::remove_range</code>\nRemove the <code>CodePointInversionList</code> from the ‚Ä¶\nSee <code>Self::retain_char</code>\nRetain the specified character in the ‚Ä¶\nRetain the range of characters located within the ‚Ä¶\nSee <code>Self::retain_range</code>\nRetain the elements in the specified set within the ‚Ä¶\nReturns the number of elements of the ‚Ä¶\nReturns the end of the initial substring where the ‚Ä¶\nReturns the start of the trailing substring (starting from ‚Ä¶\nReturns a new <code>CodePointInversionList</code> from an inversion list\nReturns a new, fully-owned <code>CodePointInversionList</code> by ‚Ä¶\nA data structure providing a concrete implementation of a ‚Ä¶\n<code>VarULE</code> type for <code>CodePointInversionListAndStringList</code>. See ‚Ä¶\nA string in the string list had an invalid length\nCustom Errors for <code>CodePointInversionListAndStringList</code>.\nTwo strings in the string list compare to each other ‚Ä¶\nA string in the string list appears more than once\nAccess the underlying <code>CodePointInversionList</code>.\nExamples\nExamples\nExamples\nAccess the VarULE type behind the unsized <code>cp_inv_list</code> field\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn true if this set contains multi-code point strings ‚Ä¶\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the number of elements in this set (its ‚Ä¶\nAccess the VarULE type behind the unsized <code>str_list</code> field\nAccess the contained strings.\nReturns a new <code>CodePointInversionListAndStringList</code> from ‚Ä¶\nRepresents a range of consecutive code points sharing the ‚Ä¶\nA custom <code>Iterator</code> type specifically for a code point trie ‚Ä¶\nThis struct represents a de-serialized <code>CodePointTrie</code> that ‚Ä¶\nA custom error type for <code>CodePointTrie</code>.\nThis struct contains the fixed-length header fields of a ‚Ä¶\n<code>CodePointTrie</code> must be constructed from data vector with at ‚Ä¶\nRepresents the ‚Äúfast‚Äù type code point tries for the ‚Ä¶\nCould not construct <code>CodePointTrie</code> from deserialized values\nRepresents the ‚Äúsmall‚Äù type code point tries for the ‚Ä¶\nThe type of trie represents whether the trie has an ‚Ä¶\nA trait representing the values stored in the data array ‚Ä¶\nLast-resort fallback value to return if we cannot read ‚Ä¶\nInternal data null block offset, not shifted. Set to an ‚Ä¶\nReturns the value used as an error value for this trie\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the value that is associated with <code>char</code> in this ‚Ä¶\nReturns the value that is associated with <code>code_point</code> in ‚Ä¶\nReturns the value that is associated with <code>code_point</code> for ‚Ä¶\nReturns a reference to the ULE of the value that is ‚Ä¶\nReturns a <code>CodePointMapRange</code> struct which represents a ‚Ä¶\nReturns a <code>CodePointInversionList</code> for the code points that ‚Ä¶\nThe code point of the start of the last range of the trie. ‚Ä¶\nOffset for the null block in the ‚Äúindex-3‚Äù table of ‚Ä¶\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nYields an <code>Iterator</code> returning ranges of consecutive code ‚Ä¶\nYields an <code>Iterator</code> returning the ranges of the code points ‚Ä¶\nYields an <code>Iterator</code> returning the ranges of the code points ‚Ä¶\nThe value stored in the trie that represents a null value ‚Ä¶\nSample data for <code>CodePointTrie</code> that returns the code point‚Ä¶\nRange of code points from start to end (inclusive).\nA version of the <code>high_start</code> value that is right-shifted 12 ‚Ä¶\nA method for converting back to a <code>u32</code> that can roundtrip ‚Ä¶\nUtilities for reading CodePointTrie data from TOML files.\nThe enum value representing the type of trie, where trie ‚Ä¶\nMaps the <code>CodePointTrie</code> into one that returns a different ‚Ä¶\nA parsing function that is primarily motivated by ‚Ä¶\nConverts the <code>CodePointTrie</code> into one that returns another ‚Ä¶\nReturns a new <code>CodePointTrie</code> backed by borrowed data for ‚Ä¶\nTrie value associated with this range.\nReason for inability to deserialize values.\nReturn a <code>CodePointTrie</code> that returns the Unicode plane ‚Ä¶\nData slice from a <code>CodePointTrie</code> TOML.\nA Serde-compatible struct for reading serialized ‚Ä¶\nA serialized <code>CodePointTrie</code> data array 16-bit values.\nA serialized <code>CodePointTrie</code> data array 32-bit values.\nA serialized <code>CodePointTrie</code> data array 8-bit values.\nGets the <code>data</code> slice.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets the <code>index</code> slice.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAn error while loading some other required data, such as ‚Ä¶\n<code>DateTimeFormatter</code> is a formatter capable of formatting ‚Ä¶\nAn error from constructing a formatter.\nThe user locale preferences for datetime formatting.\n<code>FixedCalendarDateTimeFormatter</code> is a formatter capable of ‚Ä¶\nAn intermediate type during a datetime formatting ‚Ä¶\nAn error from mixing calendar types in a formatter.\nAn error while loading display names for a field.\nA formatter optimized for time and time zone formatting, ‚Ä¶\nReturns the calendar used in this formatter.\nThe user‚Äôs preferred calendar system\nMaps a <code>FixedCalendarDateTimeFormatter</code> of a specific <code>FSet</code> ‚Ä¶\nMaps a <code>DateTimeFormatter</code> of a specific <code>FSet</code> to a more ‚Ä¶\nThe calendar kind of the input object (date being ‚Ä¶\nExtends the preferences with the values from another set ‚Ä¶\nAll available field sets for datetime formatting.\nFormats a datetime. Calendars and fields must match at ‚Ä¶\nFormats a datetime after first converting it to the ‚Ä¶\nFormats a datetime, checking that the calendar system is ‚Ä¶\nFormats a datetime without enforcing either the field set ‚Ä¶\nFormats a datetime without enforcing either the field set ‚Ä¶\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe user‚Äôs preferred hour cycle.\nTypes that can be fed to <code>DateTimeFormatter</code>/‚Ä¶\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMake this <code>FixedCalendarDateTimeFormatter</code> adopt a calendar ‚Ä¶\nLocale Preferences for the Preferences structure.\nThe user‚Äôs preferred numbering system.\nOptions types for date/time formatting.\nParts of a formatted date/time.\nLower-level, power-user APIs for formatting datetimes with ‚Ä¶\nGets the pattern used in this formatted value.\nLocale preferences used by this crate\nüöß [Unstable] Data provider struct definitions for this ‚Ä¶\nScaffolding traits and types for the datetime crate.\nThe calendar kind of the target object (formatter).\nGets a <code>FieldSetBuilder</code> corresponding to the fields and ‚Ä¶\nGets a <code>FieldSetBuilder</code> corresponding to the fields and ‚Ä¶\nConverts the given value to a <code>String</code>.\nAttempt to convert this <code>DateTimeFormatter</code> into one with a ‚Ä¶\nCreates a new <code>FixedCalendarDateTimeFormatter</code> from compiled ‚Ä¶\nCreates a new <code>DateTimeFormatter</code> from compiled data with ‚Ä¶\nA version of <code>Self::try_new</code> that uses custom data provided ‚Ä¶\nA version of <code>Self::try_new</code> that uses custom data provided ‚Ä¶\nA version of [<code>Self :: try_new</code>] that uses custom data ‚Ä¶\nA version of [<code>Self :: try_new</code>] that uses custom data ‚Ä¶\nDatetime formatting without static checking of invariants.\nStruct for combining date/time fields with zone fields.\n<strong>‚Äú17</strong>‚Äù ‚áí day of month (standalone)\n<strong>‚Äú17 Friday</strong>‚Äù ‚áí day of month and weekday\n<strong>‚Äú17 Friday, 3:47:50‚ÄØPM</strong>‚Äù ‚áí day of month and weekday ‚Ä¶\n<strong>‚Äú17, 3:47:50‚ÄØPM</strong>‚Äù ‚áí day of month (standalone) with ‚Ä¶\n<strong>‚ÄúFriday</strong>‚Äù ‚áí weekday (standalone)\n<strong>‚ÄúFriday 3:47:50‚ÄØPM</strong>‚Äù ‚áí weekday (standalone) with ‚Ä¶\n<strong>‚ÄúMay</strong>‚Äù ‚áí month (standalone)\n<strong>‚ÄúMay 17</strong>‚Äù ‚áí month and day\n<strong>‚ÄúFri, May 17</strong>‚Äù ‚áí month, day, and weekday\n<strong>‚ÄúFri, May 17, 3:47:50‚ÄØPM</strong>‚Äù ‚áí month, day, and ‚Ä¶\n<strong>‚ÄúMay 17, 3:47:50‚ÄØPM</strong>‚Äù ‚áí month and day with time\n<strong>‚Äú3:47:50‚ÄØPM</strong>‚Äù ‚áí time (locale-dependent hour cycle)\n<strong>‚Äú2024</strong>‚Äù ‚áí year (standalone)\n<strong>‚ÄúMay 2024</strong>‚Äù ‚áí year and month\n<strong>‚Äú5/17/24</strong>‚Äù ‚áí year, month, and day\n<strong>‚ÄúFri, 5/17/24</strong>‚Äù ‚áí year, month, day, and weekday\n<strong>‚ÄúFri, 5/17/24, 3:47:50‚ÄØPM</strong>‚Äù ‚áí year, month, day, and ‚Ä¶\n<strong>‚Äú5/17/24, 3:47:50‚ÄØPM</strong>‚Äù ‚áí year, month, and day with ‚Ä¶\nWhether fields should be aligned for a column-like layout.\nWhether fields should be aligned for a column-like layout.\nWhether fields should be aligned for a column-like layout.\nWhether fields should be aligned for a column-like layout.\nWhether fields should be aligned for a column-like layout.\nWhether fields should be aligned for a column-like layout.\nWhether fields should be aligned for a column-like layout.\nWhether fields should be aligned for a column-like layout.\nWhether fields should be aligned for a column-like layout.\nWhether fields should be aligned for a column-like layout.\nWhether fields should be aligned for a column-like layout.\nWhether fields should be aligned for a column-like layout.\nWhether fields should be aligned for a column-like layout.\nWhether fields should be aligned for a column-like layout.\nWhether fields should be aligned for a column-like layout.\nWhether fields should be aligned for a column-like layout.\nWhether fields should be aligned for a column-like layout.\nBuilder APIs for dynamic field sets.\nEnumerations over field sets.\nCreates a D skeleton with the given formatting length.\nCreates a DT skeleton with the given formatting length.\nCreates a E skeleton with the given formatting length.\nCreates a ET skeleton with the given formatting length.\nCreates a DE skeleton with the given formatting length.\nCreates a DET skeleton with the given formatting length.\nCreates a MD skeleton with the given formatting length.\nCreates a MDT skeleton with the given formatting length.\nCreates a MDE skeleton with the given formatting length.\nCreates a MDET skeleton with the given formatting length.\nCreates a YMD skeleton with the given formatting length.\nCreates a YMDT skeleton with the given formatting length.\nCreates a YMDE skeleton with the given formatting length.\nCreates a YMDET skeleton with the given formatting length.\nCreates a Y skeleton with the given formatting length.\nCreates a M skeleton with the given formatting length.\nCreates a YM skeleton with the given formatting length.\nCreates a T skeleton with the given formatting length.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a $r#type that formats hours and minutes with the ‚Ä¶\nCreates a $r#type that formats hours, minutes, and seconds ‚Ä¶\nCreates a $r#type that formats hours, minutes, seconds, ‚Ä¶\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nConvert this specific <code>Combo</code> into a more general <code>Combo</code>. ‚Ä¶\nThe desired length of the formatted string.\nThe desired length of the formatted string.\nThe desired length of the formatted string.\nThe desired length of the formatted string.\nThe desired length of the formatted string.\nThe desired length of the formatted string.\nThe desired length of the formatted string.\nThe desired length of the formatted string.\nThe desired length of the formatted string.\nThe desired length of the formatted string.\nThe desired length of the formatted string.\nThe desired length of the formatted string.\nThe desired length of the formatted string.\nThe desired length of the formatted string.\nThe desired length of the formatted string.\nThe desired length of the formatted string.\nThe desired length of the formatted string.\nThe desired length of the formatted string.\nCreates a D skeleton with a long length.\nCreates a DT skeleton with a long length.\nCreates a E skeleton with a long length.\nCreates a ET skeleton with a long length.\nCreates a DE skeleton with a long length.\nCreates a DET skeleton with a long length.\nCreates a MD skeleton with a long length.\nCreates a MDT skeleton with a long length.\nCreates a MDE skeleton with a long length.\nCreates a MDET skeleton with a long length.\nCreates a YMD skeleton with a long length.\nCreates a YMDT skeleton with a long length.\nCreates a YMDE skeleton with a long length.\nCreates a YMDET skeleton with a long length.\nCreates a Y skeleton with a long length.\nCreates a M skeleton with a long length.\nCreates a YM skeleton with a long length.\nCreates a T skeleton with a long length.\nCreates a D skeleton with a medium length.\nCreates a DT skeleton with a medium length.\nCreates a E skeleton with a medium length.\nCreates a ET skeleton with a medium length.\nCreates a DE skeleton with a medium length.\nCreates a DET skeleton with a medium length.\nCreates a MD skeleton with a medium length.\nCreates a MDT skeleton with a medium length.\nCreates a MDE skeleton with a medium length.\nCreates a MDET skeleton with a medium length.\nCreates a YMD skeleton with a medium length.\nCreates a YMDT skeleton with a medium length.\nCreates a YMDE skeleton with a medium length.\nCreates a YMDET skeleton with a medium length.\nCreates a Y skeleton with a medium length.\nCreates a M skeleton with a medium length.\nCreates a YM skeleton with a medium length.\nCreates a T skeleton with a medium length.\nCreates a D skeleton with a short length.\nCreates a DT skeleton with a short length.\nCreates a E skeleton with a short length.\nCreates a ET skeleton with a short length.\nCreates a DE skeleton with a short length.\nCreates a DET skeleton with a short length.\nCreates a MD skeleton with a short length.\nCreates a MDT skeleton with a short length.\nCreates a MDE skeleton with a short length.\nCreates a MDET skeleton with a short length.\nCreates a YMD skeleton with a short length.\nCreates a YMDT skeleton with a short length.\nCreates a YMDE skeleton with a short length.\nCreates a YMDET skeleton with a short length.\nCreates a Y skeleton with a short length.\nCreates a M skeleton with a short length.\nCreates a YM skeleton with a short length.\nCreates a T skeleton with a short length.\nHow precisely to display the time of day\nHow precisely to display the time of day\nHow precisely to display the time of day\nHow precisely to display the time of day\nHow precisely to display the time of day\nHow precisely to display the time of day\nHow precisely to display the time of day\nHow precisely to display the time of day\nSets the alignment option.\nSets the alignment option.\nSets the alignment option.\nSets the alignment option.\nSets the alignment option.\nSets the alignment option.\nSets the alignment option.\nSets the alignment option.\nSets the alignment option.\nSets the alignment option.\nSets the alignment option.\nSets the alignment option.\nSets the alignment option.\nSets the alignment option.\nSets the alignment option.\nSets the alignment option.\nSets the alignment option.\nSets the length option.\nSets the length option.\nSets the length option.\nSets the length option.\nSets the length option.\nSets the length option.\nSets the length option.\nSets the length option.\nSets the length option.\nSets the length option.\nSets the length option.\nSets the length option.\nSets the length option.\nSets the length option.\nSets the length option.\nSets the length option.\nSets the length option.\nSets the length option.\nAssociates this field set with a time precision.\nAssociates this field set with a time precision.\nAssociates this field set with a time precision.\nAssociates this field set with a time precision.\nAssociates this field set with a time precision.\nAssociates this field set with a time precision.\nAssociates this field set with a time precision.\nShorthand to associate this field set with ‚Ä¶\nShorthand to associate this field set with ‚Ä¶\nShorthand to associate this field set with ‚Ä¶\nShorthand to associate this field set with ‚Ä¶\nShorthand to associate this field set with ‚Ä¶\nShorthand to associate this field set with ‚Ä¶\nShorthand to associate this field set with ‚Ä¶\nShorthand to associate this field set with ‚Ä¶\nShorthand to associate this field set with ‚Ä¶\nShorthand to associate this field set with ‚Ä¶\nShorthand to associate this field set with ‚Ä¶\nShorthand to associate this field set with ‚Ä¶\nShorthand to associate this field set with ‚Ä¶\nShorthand to associate this field set with ‚Ä¶\nShorthand to associate this field set with ‚Ä¶\nShorthand to associate this field set with ‚Ä¶\nShorthand to associate this field set with ‚Ä¶\nShorthand to associate this field set with ‚Ä¶\nShorthand to associate this field set with ‚Ä¶\nShorthand to associate this field set with ‚Ä¶\nShorthand to associate this field set with ‚Ä¶\nSets the time precision option.\nSets the time precision option.\nSets the time precision option.\nSets the time precision option.\nSets the time precision option.\nSets the time precision option.\nSets the time precision option.\nSets the time precision option.\nSets the year style option.\nSets the year style option.\nSets the year style option.\nSets the year style option.\nSets the year style option.\nSets the year style option.\nAssociates this field set with a time zone field set.\nAssociates this field set with a time zone field set.\nAssociates this field set with a time zone field set.\nAssociates this field set with a time zone field set.\nAssociates this field set with a time zone field set.\nAssociates this field set with a time zone field set.\nAssociates this field set with a time zone field set.\nAssociates this field set with a time zone field set.\nAssociates this field set with a time zone field set.\nAssociates this field set with a time zone field set.\nAssociates this field set with a time zone field set.\nAssociates this field set with a time zone field set.\nAssociates this field set with a time zone field set.\nAssociates this field set with a time zone field set.\nAssociates this field set with a time zone field set.\nWhen to display the era field in the formatted string.\nWhen to display the era field in the formatted string.\nWhen to display the era field in the formatted string.\nWhen to display the era field in the formatted string.\nWhen to display the era field in the formatted string.\nWhen to display the era field in the formatted string.\nTime zone field sets\nAn error that occurs when creating a field set from a ‚Ä¶\nThe day of the month, as in ‚Äúon the 1st‚Äù.\nThe day of the month and day of the week, as in ‚Ä¶\nAn enumeration over all possible date and calendar period ‚Ä¶\nThe day of the week alone, as in ‚ÄúSaturday‚Äù.\nThe exemplar city format, as in ‚ÄúLos Angeles‚Äù.\nA builder for dynamic field sets.\nThe long generic non-location format, as in ‚ÄúPacific ‚Ä¶\nThe short generic non-location format, as in ‚ÄúPT‚Äù.\nThe value in <code>DateFields</code> is not a valid for the specified ‚Ä¶\nThe long offset format, as in ‚ÄúGMT‚àí8:00‚Äù.\nThe short offset format, as in ‚ÄúGMT‚àí8‚Äù.\nThe location format, as in ‚ÄúLos Angeles time‚Äù.\nA standalone month, as in ‚ÄúJanuary‚Äù.\nThe month and day of the month, as in ‚ÄúJanuary 1st‚Äù.\nThe month, day of the month, and day of the week, as in ‚Ä¶\nThe builder needs <code>DateFields</code> in order to build the ‚Ä¶\nThe builder needs <code>TimePrecision</code> in order to build the ‚Ä¶\nThe builder needs <code>ZoneStyle</code> in order to build the ‚Ä¶\nThe long specific non-location format, as in ‚ÄúPacific ‚Ä¶\nThe short specific non-location format, as in ‚ÄúPDT‚Äù.\nSuperfluous options were specified.\nAll values of this enumeration.\nAll values of this enumeration.\nA year, as in ‚Äú2000‚Äù.\nA month and year, as in ‚ÄúJanuary 2000‚Äù.\nThe year, month, and day of the month, as in ‚ÄúJanuary ‚Ä¶\nThe year, month, day of the month, and day of the week, as ‚Ä¶\nAn enumeration over all possible time zone styles.\nThe alignment context, such as when displaying dates in a ‚Ä¶\nBuilds a <code>CalendarPeriodFieldSet</code>.\nBuilds a <code>CompositeFieldSet</code>.\nBuilds a <code>CompositeDateTimeFieldSet</code>.\nBuilds a <code>DateFieldSet</code>.\nBuilds a <code>DateAndTimeFieldSet</code>.\nBuilds a <code>TimeFieldSet</code>.\nBuilds a <code>ZoneFieldSet</code>.\nBuilds a <code>Combo</code> for a zoned date.\nBuilds a <code>Combo</code> for a zoned date and time.\nBuilds a <code>Combo</code> for a zoned time.\nThe set of date fields, such as ‚Äúyear and month‚Äù or ‚Äú‚Ä¶\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether this <code>DateFields</code> variant represents a ‚Ä¶\nThe length of a formatted date/time string.\nCreates a new, empty <code>FieldSetBuilder</code>.\nThe precision to display the time of day.\nHow to display the year and era.\nThe style to display the time zone.\nAll attributes associated with this enum.\nAll attributes associated with this enum.\nAll attributes associated with this enum.\nAll attributes associated with this enum.\nField set for a calendar period.\nField set for a calendar period.\nAn enumeration over all possible calendar period field ‚Ä¶\nAn enum supporting date, calendar period, time, and ‚Ä¶\nAn enum supporting all possible field sets and options.\nThe day of the month, as in ‚Äúon the 1st‚Äù.\nThe day of the month and day of the week, as in ‚Ä¶\nThe day of the month and day of the week with time of day, ‚Ä¶\nThe day of the month with time of day, as in ‚Äúon the 1st ‚Ä¶\nField set for a date.\nField set for a date.\nAn enumeration over all possible date+time composite field ‚Ä¶\nAn enumeration over all possible date field sets.\nField set for a date and a time together.\nField set for a date and a time together.\nField set for a date, a time, and a time zone together.\nField set for a date and a time zone together.\nThe day of the week alone, as in ‚ÄúSaturday‚Äù.\nThe day of the week alone with time of day, as in ‚Ä¶\nThe exemplar city format, as in ‚ÄúLos Angeles.\nThe long generic non-location format, as in ‚ÄúPacific ‚Ä¶\nThe short generic non-location format, as in ‚ÄúPT‚Äù.\nThe long offset format, as in ‚ÄúGMT‚àí8:00‚Äù.\nThe short offset format, as in ‚ÄúGMT‚àí8‚Äù.\nThe location format, as in ‚ÄúLos Angeles Time‚Äù.\nA standalone month, as in ‚ÄúJanuary‚Äù.\nThe month and day of the month, as in ‚ÄúJanuary 1st‚Äù.\nThe month, day of the month, and day of the week, as in ‚Ä¶\nThe month, day of the month, and day of the week with time ‚Ä¶\nThe month and day of the month with time of day, as in ‚Ä¶\nThe long specific non-location format, as in ‚ÄúPacific ‚Ä¶\nThe short specific non-location format, as in ‚ÄúPDT‚Äù.\nA time of day.\nField set for a time.\nField set for a time.\nAn enumeration over all possible time field sets.\nField set for a time and a time zone together.\nA year, as in ‚Äú2000‚Äù.\nA month and year, as in ‚ÄúJanuary 2000‚Äù.\nThe year, month, and day of the month, as in ‚ÄúJanuary ‚Ä¶\nThe year, month, day of the month, and day of the week, as ‚Ä¶\nThe year, month, day of the month, and day of the week ‚Ä¶\nThe year, month, and day of the month with time of day, as ‚Ä¶\nField set for a time zone.\nAn enumeration over all possible zone field sets.\nType alias representing all possible date + time + time ‚Ä¶\nType alias representing all possible date + time zone ‚Ä¶\nType alias representing all possible time + time zone ‚Ä¶\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the <code>CompositeFieldSet</code> corresponding to this ‚Ä¶\nIf the <code>CompositeFieldSet</code> does not contain a time zone, ‚Ä¶\nAssociates this field set with a time zone field set.\nAssociates this field set with a time zone field set.\nAssociates this field set with a time zone field set.\n<strong>‚ÄúChicago</strong>‚Äù ‚áí time zone in exemplar city format\n<strong>‚ÄúCentral Time</strong>‚Äù ‚áí time zone in generic non-location ‚Ä¶\n<strong>‚ÄúCT</strong>‚Äù ‚áí time zone in generic non-location format, ‚Ä¶\n<strong>‚ÄúGMT-05:00</strong>‚Äù ‚áí UTC offset, long length\n<strong>‚ÄúGMT-5</strong>‚Äù ‚áí UTC offset, short length\n<strong>‚ÄúChicago Time</strong>‚Äù ‚áí time zone in location format\n<strong>‚ÄúCentral Daylight Time</strong>‚Äù ‚áí time zone in specific ‚Ä¶\n<strong>‚ÄúCDT</strong>‚Äù ‚áí time zone in specific non-location format, ‚Ä¶\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA date for a given calendar.\nA date and time for a given calendar.\nA representation of a time in hours, minutes, seconds, and ‚Ä¶\nA CLDR time zone identity.\nA utility type that can hold time zone information.\nAn offset from Coordinated Universal Time (UTC).\nA date and time for a given calendar, local to a specified ‚Ä¶\nThe date\nThe date, local to the time zone\nReturns the argument unchanged.\nCreate a <code>UtcOffset</code> from a seconds input without checking ‚Ä¶\nHour\nReturns the hours part of if the <code>UtcOffset</code>\nCalls <code>U::from(self)</code>.\nWhether the <code>UtcOffset</code> is non-negative.\nWhether the <code>UtcOffset</code> is zero.\nMinute\nReturns the minutes part of if the <code>UtcOffset</code>.\nSecond\nReturns the seconds part of if the <code>UtcOffset</code>.\nSubsecond\nThe time\nThe time, local to the time zone\nReturns the raw offset value in seconds.\nAttempt to create a <code>UtcOffset</code> from a seconds input.\nParse a <code>UtcOffset</code> from bytes.\nSee <code>Self::try_from_str</code>\nCreates a <code>UtcOffset</code> of zero.\nThe time zone\nThe alignment context of the formatted string.\nAlign fields as the locale specifies them to be aligned.\nDisplay the century and/or era when needed to disambiguate ‚Ä¶\nAlign fields as appropriate for a column layout. For ‚Ä¶\nAlways display the century, and display the era when ‚Ä¶\nDisplay the hour. Hide all other time fields.\nThe length of a formatted date/time string.\nA long date; typically spelled-out, as in ‚ÄúJanuary 1, ‚Ä¶\nA medium-sized date; typically abbreviated, as in ‚ÄúJan. ‚Ä¶\nDisplay the hour and minute. Hide the second.\nDisplay the hour; display the minute if nonzero. Hide the ‚Ä¶\nOne fractional digit (tenths of a second).\nTwo fractional digits (hundredths of a second).\nThree fractional digits (milliseconds).\nFour fractional digits.\nFive fractional digits.\nSix fractional digits (microseconds).\nSeven fractional digits.\nEight fractional digits.\nNine fractional digits (nanoseconds)\nDisplay the hour, minute, and second. Hide fractional ‚Ä¶\nA short date; typically numeric, as in ‚Äú1/1/2000‚Äù.\nDisplay the hour, minute, and second with the given number ‚Ä¶\nA specification for how many fractional second digits to ‚Ä¶\nA specification for how precisely to display the time of ‚Ä¶\nAlways display the century and era.\nA specification of how to render the year and the era.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructs a <code>SubsecondDigits</code> from an integer number of ‚Ä¶\nA <code>Part</code> used by <code>FormattedDateTime</code>.\nA <code>Part</code> used by <code>FormattedDateTime</code>.\nA <code>Part</code> used by <code>FormattedDateTime</code>.\nA <code>Part</code> used by <code>FormattedDateTime</code>.\nA <code>Part</code> used by <code>FormattedDateTime</code>.\nA <code>Part</code> used by <code>FormattedDateTime</code>.\nA <code>Part</code> used by <code>FormattedDateTime</code>.\nA <code>Part</code> used by <code>FormattedDateTime</code>.\nA <code>Part</code> used by <code>FormattedDateTime</code>.\nA <code>Part</code> used by <code>FormattedDateTime</code>.\nA <code>Part</code> used by <code>FormattedDateTime</code>.\nA <code>Part</code> used by <code>FormattedDateTime</code>.\nAn abbreviated calendar-dependent year or era name.\nAn abbreviated calendar-dependent month name for ‚Ä¶\nAn abbreviated weekday name for formatting with other ‚Ä¶\nAn abbreviated 12-hour day period name, including display ‚Ä¶\nA field conflicts with a previous field.\nAn error arising from the <code>data provider</code> for loading names.\nA low-level type that formats datetime patterns with ‚Ä¶\nA pattern for formatting a datetime in a calendar.\nA formatter for a specific <code>DateTimePattern</code>.\nChoices for loading day period names.\nThe [<code>DecimalFormatter</code>] has not been loaded.\nThe specific field for which an error occurred.\nA low-level type that formats datetime patterns with ‚Ä¶\nA pattern that has been interpolated and implements ‚Ä¶\nError for the [<code>TryWriteable</code>] implementation of ‚Ä¶\nThe specific formatter does not support this field.\nThe [<code>CyclicYear::year</code>] of the input is not valid for this ‚Ä¶\nThe era code of the input is not valid for this calendar.\nThe <code>MonthCode</code> of the input is not valid for this calendar.\nAn input field (such as ‚Äúhour‚Äù or ‚Äúmonth‚Äù) is ‚Ä¶\nChoices for loading month names.\nThe localized names for a field have not been loaded.\nA narrow calendar-dependent year or era name. Not ‚Ä¶\nA narrow calendar-dependent month name for formatting with ‚Ä¶\nA narrow weekday name for formatting with other fields. ‚Ä¶\nAn abbreviated 12-hour day period name, including display ‚Ä¶\nError returned from <code>FixedCalendarDateTimeNames</code>‚Äôs pattern ‚Ä¶\nA short weekday name for formatting with other fields.\nAn abbreviated calendar-dependent month name for ‚Ä¶\nAn abbreviated weekday name for stand-alone display.\nA narrow calendar-dependent month name for stand-alone ‚Ä¶\nA narrow weekday name for stand-alone display. Not ‚Ä¶\nA short weekday name for stand-alone display.\nA wide calendar-dependent month name for stand-alone ‚Ä¶\nA wide weekday name for stand-alone display.\nError returned from constructors that map from AnyCalendar ‚Ä¶\nThe pattern contains a field symbol for which formatting ‚Ä¶\nThe field symbol is not supported in that length.\nThe pattern contains a field that has a valid symbol but ‚Ä¶\nChoices for loading weekday names.\nA wide calendar-dependent year or era name.\nA wide calendar-dependent month name for formatting with ‚Ä¶\nA wide weekday name for formatting with other fields.\nA wide 12-hour day period name, including display names ‚Ä¶\nChoices for loading year names.\nMaps a <code>FixedCalendarDateTimeNames</code> of a specific <code>FSet</code> to a ‚Ä¶\nMaps a <code>FixedCalendarDateTimeNames</code> of a specific <code>FSet</code> to a ‚Ä¶\nFormats a date and time of day with a custom date/time ‚Ä¶\nCreate an <code>ErrorField</code> (stable wrapper) from a <code>Field</code> ‚Ä¶\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates an instance with the names loaded in a ‚Ä¶\nCreates an instance with the names and calendar loaded in ‚Ä¶\nIncludes day period names for the specified length with ‚Ä¶\nLoads a <code>DecimalFormatter</code> with compiled data.\nAssociates this <code>FixedCalendarDateTimeNames</code> with a pattern ‚Ä¶\nIncludes month names for the specified symbol and length ‚Ä¶\nIncludes shared essential patterns for time zone ‚Ä¶\nIncludes exemplar city names for time zone formatting with ‚Ä¶\nIncludes generic non-location long time zone names with ‚Ä¶\nIncludes generic non-location long time zone names and all ‚Ä¶\nIncludes generic non-location short time zone names with ‚Ä¶\nIncludes generic non-location short time zone names and ‚Ä¶\nIncludes all data for short and long localized offset time ‚Ä¶\nIncludes location names for time zone formatting with ‚Ä¶\nIncludes specific non-location long time zone names with ‚Ä¶\nIncludes specific non-location long time zone names and ‚Ä¶\nIncludes specific non-location short time zone names with ‚Ä¶\nIncludes specific non-location short time zone names and ‚Ä¶\nIncludes weekday names for the specified symbol and length ‚Ä¶\nIncludes year (era or cycle) names for the specified ‚Ä¶\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe calendar kind that is not supported.\nLoads day period names for the specified length.\nLoads a <code>DecimalFormatter</code> from a data provider.\nAssociates this <code>FixedCalendarDateTimeNames</code> with a datetime ‚Ä¶\nLoads month names for the specified symbol and length.\nLoads shared essential patterns for time zone formatting.\nLoads exemplar city names for time zone formatting.\nLoads generic non-location long time zone names.\nLoads generic non-location long time zone names and all ‚Ä¶\nLoads generic non-location short time zone names.\nLoads generic non-location short time zone names and all ‚Ä¶\nLoads all data for short and long localized offset time ‚Ä¶\nLoads location names for time zone formatting.\nLoads specific non-location long time zone names.\nLoads specific non-location long time zone names and all ‚Ä¶\nLoads specific non-location short time zone names.\nLoads specific non-location short time zone names and all ‚Ä¶\nLoads weekday names for the specified symbol and length.\nLoads year (era or cycle) names for the specified length.\nCreates a completely empty instance, not even with number ‚Ä¶\nConverts the given value to a <code>String</code>.\nCreates a <code>DateTimePattern</code> from a pattern string.\nLoads a pattern for the given field set with compiled data ‚Ä¶\nLoads a pattern for the given field set with compiled data ‚Ä¶\nA version of <code>Self::try_into_formatter</code> that uses custom ‚Ä¶\nA version of <code>Self::try_into_formatter</code> that uses custom ‚Ä¶\nA version of <code>Self::try_into_formatter</code> that uses custom ‚Ä¶\nA version of <code>Self::try_into_formatter</code> that uses custom ‚Ä¶\nConstructor that takes a selected locale and creates an ‚Ä¶\nA version of <code>Self::try_new</code> that uses custom data provided ‚Ä¶\nA version of [<code>Self :: try_new</code>] that uses custom data ‚Ä¶\nCreates a completely empty instance, not even with number ‚Ä¶\nAssociates this <code>FixedCalendarDateTimeNames</code> with a pattern ‚Ä¶\nMax\nValue\nThe field that was not able to be loaded.\nThe field that prevented the new field from being loaded.\nThai Buddhist calendar (same as Gregorian except for the ‚Ä¶\nA Unicode Calendar Identifier defines a type of calendar.\nTraditional Chinese calendar\nHijri calendar, tabular (intercalary years ‚Ä¶\nCoptic calendar\nTraditional Korean calendar\nEthiopic calendar, Amete Alem (epoch approx. 5493 B.C.E)\nEthiopic calendar, Amete Mihret (epoch approx, 8 C.E.)\nGregorian calendar\nVariant of the 12-hour clock, sometimes used in Japan. ‚Ä¶\nThe typical 12-hour clock. Hours are numbered 1‚Äì12. ‚Ä¶\nThe 24-hour clock. Hour are numbered 0‚Äì23. Corresponds ‚Ä¶\nTraditional Hebrew calendar\nHijri calendar\nHijri Calendar sub-type\nA Unicode Hour Cycle Identifier defines the preferred time ‚Ä¶\nIndian calendar\nISO calendar (Gregorian calendar using the ISO 8601 ‚Ä¶\nJapanese Imperial calendar\nA Unicode Number System Identifier defines a type of ‚Ä¶\nPersian calendar\nHijri calendar, Saudi Arabia sighting\nRepublic of China calendar\nHijri calendar, tabular (intercalary years ‚Ä¶\nHijri calendar, Umm al-Qura\nA helper function for displaying as a <code>&amp;str</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBaked data\n<code>DatetimePatternsDateBuddhistV1</code>\n<code>DatetimePatternsDateChineseV1</code>\n<code>DatetimePatternsDateCopticV1</code>\n<code>DatetimePatternsDateDangiV1</code>\n<code>DatetimePatternsDateEthiopianV1</code>\n<code>DatetimePatternsDateGregorianV1</code>\n<code>DatetimePatternsDateHebrewV1</code>\n<code>DatetimePatternsDateHijriV1</code>\n<code>DatetimePatternsDateIndianV1</code>\n<code>DatetimePatternsDateJapaneseV1</code>\n<code>DatetimePatternsDateJapanextV1</code>\n<code>DatetimePatternsDatePersianV1</code>\n<code>DatetimePatternsDateRocV1</code>\n<code>DatetimePatternsTimeV1</code>\nA field of <code>PackedPatternsBuilder</code>.\nüìè This item has a stack size of 32 bytes on the stable ‚Ä¶\nA builder for a <code>PackedPatterns</code>.\nBuilds a packed pattern representation from the builder.\nData structs for calendar-specific symbols and patterns.\nThe list of patterns. Length should be between 1 and 9, ‚Ä¶\nEnums representing the fields in a date pattern, including ‚Ä¶\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAn encoding of which standard/variant cell corresponds to ‚Ä¶\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe ‚Äúlong‚Äù length pattern plural elements.\nThe ‚Äúmedium‚Äù length pattern plural elements.\nData structs and markers for semantic skeletons and ‚Ä¶\nStructured datetime pattern types for datagen and the data ‚Ä¶\nThe ‚Äúshort‚Äù length pattern plural elements.\nPatterns always available.\nData provider structs for time zones.\nConverts this packed data to a builder that can be mutated.\nPatterns for variant 0. If <code>None</code>, falls back to standard.\nPatterns for variant 1. If <code>None</code>, falls back to standard.\nPattern data for dates.\nSymbol data for the months, weekdays, and eras needed to ‚Ä¶\nString data for the name, abbreviation, and narrow form of ‚Ä¶\nPattern data for times.\nSymbol data for the day periods needed to format a time.\nSymbol data for era abbreviations.\nDate pattern data, broken down by pattern length.\nFormatting symbols for <code>DayPeriod</code>.\nSymbol data for day periods.\nSymbol data for eras.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPatterns used to combine date and time length patterns ‚Ä¶\nFormatting symbols for <code>Month</code>.\nSymbol data for months.\nSymbol data for era names.\nSymbol data for era narrow forms.\nData structs for date / time patterns that store data ‚Ä¶\nBy default a locale will prefer one hour cycle type over ‚Ä¶\nThese patterns are common uses of time formatting, broken ‚Ä¶\nThese patterns are common uses of time formatting, broken ‚Ä¶\nFormatting symbols for <code>Weekday</code>.\nSymbol data for weekdays.\nThe struct containing the symbol data for DayPeriod that ‚Ä¶\nSymbol data for the ‚Äúformat‚Äù style formatting of ‚Ä¶\nSymbol data for the ‚Äústand-alone‚Äù style formatting of ‚Ä¶\nLocale data for DayPeriod corresponding to the symbols.\nAbbreviated length symbol for ‚Äústand-alone‚Äù style ‚Ä¶\nAbbreviated length symbol for ‚Äúformat‚Äù style symbol ‚Ä¶\nDay period for AM (before noon).\nThe symbol data for ‚Äúformat‚Äù style symbols.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDay period for midnight, in locales that support it.\nNarrow length symbol for ‚Äústand-alone‚Äù style symbol ‚Ä¶\nNarrow length symbol for ‚Äúformat‚Äù style symbol for ‚Ä¶\nDay period for noon, in locales that support it.\nDay period for PM (after noon).\nShort length symbol for ‚Äústand-alone‚Äù style symbol for ‚Ä¶\nShort length symbol for ‚Äúformat‚Äù style symbol for ‚Ä¶\nThe symbol data for ‚Äústand-alone‚Äù style symbols.\nWide length symbol for ‚Äústand-alone‚Äù style symbol for ‚Ä¶\nWide length symbol for ‚Äúformat‚Äù style symbol for ‚Ä¶\nThe struct containing the symbol data for Month that ‚Ä¶\nSymbol data for the ‚Äúformat‚Äù style formatting of Month.\nA calendar with an arbitrary number of months, potentially ‚Ä¶\nTwelve symbols for a solar calendar\nSymbol data for the ‚Äústand-alone‚Äù style formatting of ‚Ä¶\nLocale data for Month corresponding to the symbols.\nAbbreviated length symbol for ‚Äústand-alone‚Äù style ‚Ä¶\nAbbreviated length symbol for ‚Äúformat‚Äù style symbol ‚Ä¶\nThe symbol data for ‚Äúformat‚Äù style symbols.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the symbol for the given month code\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNarrow length symbol for ‚Äústand-alone‚Äù style symbol ‚Ä¶\nNarrow length symbol for ‚Äúformat‚Äù style symbol for ‚Ä¶\nShort length symbol for ‚Äústand-alone‚Äù style symbol for ‚Ä¶\nShort length symbol for ‚Äúformat‚Äù style symbol for ‚Ä¶\nThe symbol data for ‚Äústand-alone‚Äù style symbols.\nWide length symbol for ‚Äústand-alone‚Äù style symbol for ‚Ä¶\nWide length symbol for ‚Äúformat‚Äù style symbol for ‚Ä¶\n‚Äúfull‚Äù length\nAn enum containing four lengths (full, long, medium, ‚Ä¶\nData struct for generic date/time patterns, broken down by ‚Ä¶\nData struct for date/time patterns broken down by pattern ‚Ä¶\n‚Äúlong‚Äù length\n‚Äúmedium‚Äù length\n‚Äúshort‚Äù length\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nA full length date/time pattern.\nA full length glue pattern of other formatted elements.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA long length date/time pattern.\nA long length glue pattern of other formatted elements.\nA medium length date/time pattern.\nA medium length glue pattern of other formatted elements.\nA short length date/time pattern.\nA short length glue pattern of other formatted elements.\nThe struct containing the symbol data for Weekday that ‚Ä¶\nSymbol data for the ‚Äúformat‚Äù style formatting of ‚Ä¶\nSymbol data for the ‚Äústand-alone‚Äù style formatting of ‚Ä¶\nLocale data for Weekday corresponding to the symbols.\nAbbreviated length symbol for ‚Äústand-alone‚Äù style ‚Ä¶\nAbbreviated length symbol for ‚Äúformat‚Äù style symbol ‚Ä¶\nThe symbol data for ‚Äúformat‚Äù style symbols.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNarrow length symbol for ‚Äústand-alone‚Äù style symbol ‚Ä¶\nNarrow length symbol for ‚Äúformat‚Äù style symbol for ‚Ä¶\nShort length symbol for ‚Äústand-alone‚Äù style symbol for ‚Ä¶\nShort length symbol for ‚Äúformat‚Äù style symbol for ‚Ä¶\nThe symbol data for ‚Äústand-alone‚Äù style symbols.\nWide length symbol for ‚Äústand-alone‚Äù style symbol for ‚Ä¶\nWide length symbol for ‚Äúformat‚Äù style symbol for ‚Ä¶\nField symbol for the AM, PM day period.  (Does not include ‚Ä¶\nField symbol for calendar year (numeric).\nField symbol for cyclic year; used in calendars where ‚Ä¶\nAn enum for the possible symbols of a day field in a date ‚Ä¶\nDay number relative to a time period longer than a week ‚Ä¶\nField symbol for day of month (numeric).\nField symbol for the day of week occurrence relative to ‚Ä¶\nField symbol for day of year (numeric).\nAn enum for the possible symbols of a day period field in ‚Ä¶\nName of a period within a day.\n<code>ULE</code> type for DayPeriod\n<code>ULE</code> type for Day\nA second field with fractional digits.\nSeconds with fractional digits. If seconds are an integer, ‚Ä¶\n<code>ULE</code> type for DecimalSecond\nEra name.\nAn error relating to the field for a date pattern field as ‚Ä¶\nA field within a date pattern string, also referred to as ‚Ä¶\nAn enum representing the length of a field within a date ‚Ä¶\nVarious numeric overrides for datetime patterns as found ‚Ä¶\nA field symbol for a date formatting pattern.\n<code>ULE</code> type for <code>FieldSymbol</code>\n<code>ULE</code> type for <code>Field</code>\nNumeric: pad to 5 digits\nField symbol for month number or name in a pattern that ‚Ä¶\nField symbol for day of week (text format only).\nNumeric: pad to 4 digits\nField symbol for the generic non-location format of a time ‚Ä¶\nField symbol for numeric hour [0-11].\nField symbol for numeric hour [1-12].\nField symbol for numeric hour [0-23].\n<code>hanidays</code>\n<code>hanidec</code>\n<code>hebr</code>\nAn enum for the possible symbols of an hour field in a ‚Ä¶\nHour number within a day, possibly with day period.\n<code>ULE</code> type for Hour\nInvalid character for a field symbol.\nInvalid field symbol index.\nThe length of the field string within the pattern is ‚Ä¶\nAn error originating inside of the data provider.\nField symbol for either the ISO-8601 basic format or ‚Ä¶\nField symbol for either the ISO-8601 basic format or ‚Ä¶\n<code>jpnyear</code>\nAn error relating to the length of a field within a date ‚Ä¶\nField symbol for day of week; numeric formats produce a ‚Ä¶\nField symbol for the localized offset format of a time ‚Ä¶\nField symbol for any of: the time zone id, time zone ‚Ä¶\nField symbol for milliseconds in day (numeric).\nMinute number within an hour.\nAn enum for the possible symbols of a month field in a ‚Ä¶\nMonth number or month name.\n<code>ULE</code> type for Month\nField symbol for the am, pm, noon, midnight day period.\nFieldLength::One (numeric), but overridden with a ‚Ä¶\nNumeric: minimum digits\nField symbol for related ISO; some calendars which use ‚Ä¶\n<code>romanlow</code>\nAn enum for the possible symbols of a second field in a ‚Ä¶\nSeconds integer within a minute or milliseconds within a ‚Ä¶\nField symbol for second (numeric).\n<code>ULE</code> type for Second\nNumeric: pad to 6 digits\nField symbol for the specific non-location format of a ‚Ä¶\nField symbol for a ‚Äústand-alone‚Äù month number or name.\nField symbol for stand-alone local day of week number/name.\nA second with 1 fractional digit: ‚Äú1.0‚Äù\nA second with 2 fractional digits: ‚Äú1.00‚Äù\nA second with 3 fractional digits: ‚Äú1.000‚Äù\nA second with 4 fractional digits: ‚Äú1.0000‚Äù\nA second with 5 fractional digits: ‚Äú1.00000‚Äù\nA second with 6 fractional digits: ‚Äú1.000000‚Äù\nA second with 7 fractional digits: ‚Äú1.0000000‚Äù\nA second with 8 fractional digits: ‚Äú1.00000000‚Äù\nA second with 9 fractional digits: ‚Äú1.000000000‚Äù\nAn error relating to the field symbol for a date pattern ‚Ä¶\nNumeric: pad to 3 digits\nAn enum for the possible symbols of a time zone field in a ‚Ä¶\nTime zone as a name, a zone ID, or a ISO 8601 numerical ‚Ä¶\n<code>ULE</code> type for TimeZone\nNumeric: pad to 2 digits\nUnknown field symbol.\nAn enum for the possible symbols of a week field in a date ‚Ä¶\nWeek number or week name.\nAn enum for the possible symbols of a weekday field in a ‚Ä¶\nDay number or day name relative to a week.\n<code>ULE</code> type for Weekday\nAn enum for the possible symbols of a year field in a date ‚Ä¶\nYear number or year name.\n<code>ULE</code> type for Year\nConvert this to the corresponding string code\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRecover a <code>Field</code> (unstable) from an <code>ErrorField</code> (stable ‚Ä¶\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe length of the <code>Field</code>, which in conjunction with the ‚Ä¶\nThe field symbol for the <code>Field</code>, which corresponds to the ‚Ä¶\nConverts the given value to a <code>String</code>.\nThis calendar is cyclic (Chinese, Dangi), so it uses ‚Ä¶\n<code>DatetimeNamesDayChineseV1</code>\n<code>DatetimeNamesDayDangiV1</code>\n<code>DatetimeNamesDayPlaceholderV1</code>\n<code>DatetimeNamesDayperiodV1</code>\n<code>DatetimeNamesMonthBuddhistV1</code>\n<code>DatetimeNamesMonthChineseV1</code>\n<code>DatetimeNamesMonthCopticV1</code>\n<code>DatetimeNamesMonthDangiV1</code>\n<code>DatetimeNamesMonthEthiopianV1</code>\n<code>DatetimeNamesMonthGregorianV1</code>\n<code>DatetimeNamesMonthHebrewV1</code>\n<code>DatetimeNamesMonthHijriV1</code>\n<code>DatetimeNamesMonthIndianV1</code>\n<code>DatetimeNamesMonthJapaneseV1</code>\n<code>DatetimeNamesMonthJapanextV1</code>\n<code>DatetimeNamesMonthPersianV1</code>\n<code>DatetimeNamesMonthRocV1</code>\n<code>DatetimeNamesWeekdayV1</code>\n<code>DatetimeNamesYearBuddhistV1</code>\n<code>DatetimeNamesYearChineseV1</code>\n<code>DatetimeNamesYearCopticV1</code>\n<code>DatetimeNamesYearDangiV1</code>\n<code>DatetimeNamesYearEthiopianV1</code>\n<code>DatetimeNamesYearGregorianV1</code>\n<code>DatetimeNamesYearHebrewV1</code>\n<code>DatetimeNamesYearHijriV1</code>\n<code>DatetimeNamesYearIndianV1</code>\n<code>DatetimeNamesYearJapaneseV1</code>\n<code>DatetimeNamesYearJapanextV1</code>\n<code>DatetimeNamesYearPersianV1</code>\n<code>DatetimeNamesYearRocV1</code>\n<code>DatetimePatternsGlueV1</code>\n<code>DatetimeNamesDayperiodV1</code>\nThis calendar has a small, fixed set of eras with numeric ‚Ä¶\nThe default per-length patterns used for combining dates, ‚Ä¶\nMonth codes M01, M02, M03, .. M01L, M02L, ‚Ä¶\nThis represents the formatting to apply to numeric values ‚Ä¶\nMonth codes M01, M02, M03, .. (can allow for M13 onwards)\nNames that can be stored as a simple linear array.\nNames used for representing the month.\nCalendar-agnostic month name data marker\nThis calendar has a variable set of eras with numeric ‚Ä¶\n<code>DatetimeNamesWeekdayV1</code>\nNames used for representing the year.\nCalendar-agnostic year name data marker\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nHelpers involving the data marker attributes used for date ‚Ä¶\nThe names, in order. Order specified on the struct docs.\nThe pattern\nField contexts supported in data marker attributes.\nDate, time, and time zone combinations supported in data ‚Ä¶\nField lengths supported in data marker attribute.\nPattern lengths supported in data marker attributes.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a name data marker attribute from the enum values.\nParses a name data marker attribute to enum values.\nParses a pattern data marker attribute to enum values.\nUsed to represent either H11/H12, or H23. Skeletons only ‚Ä¶\nA field, like ‚Äúabbreviated months‚Äù. Mostly follows UTS ‚Ä¶\nAn element of a <code>GenericPattern</code>.\nCan either be fields::Hour::H11 or fields::Hour::H12\nfields::Hour::H23\nSmallest time unit = hours.\nA literal code point\nA literal code point.\nSmallest time unit = minutes.\nSmallest time unit = Nanoseconds.\nNo time is in the pattern.\nA low-level pattern parsing error.\nAn element of a <code>Pattern</code>.\nA single digit, 0..=9\nSmallest time unit = seconds.\nThe granularity of time represented in a <code>Pattern</code>. Ordered ‚Ä¶\nFigure out the coarse hour cycle given a pattern, which is ‚Ä¶\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRetrieves the granularity of time represented by a ‚Ä¶\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the other coarse hour cycle (map h11/h12 to h23/h24, ‚Ä¶\nReturns <code>true</code> if the most granular time being displayed ‚Ä¶\nReference <code>Pattern</code> implementation intended to follow Unicode\nRuntime <code>Pattern</code> implementation which is optimized for ‚Ä¶\nA fully-owned, non-zero-copy type corresponding to ‚Ä¶\nA fully-owned, non-zero-copy type corresponding to <code>Pattern</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert a <code>Pattern</code> to a vector of pattern items.\nA raw, low-level pattern with literals and placeholders.\nA raw, low-level pattern for datetime formatting.\nMetadata associated with a <code>Pattern</code>.\n<code>VarULE</code> type for <code>Pattern</code>. See <code>Pattern</code> for documentation.\nBorrows a <code>Pattern</code> from another <code>Pattern</code>.\nThe function allows for creation of new DTF pattern from a ‚Ä¶\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a <code>PatternMetadata</code> from the <code>TimeGranularity</code> enum.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe list of <code>GenericPatternItem</code>s.\nThe list of <code>PatternItem</code>s.\nPre-computed metadata about the pattern.\nConverts the given value to a <code>String</code>.\nConverts the given value to a <code>String</code>.\nAn ICU4X mapping to the CLDR timeZoneNames exemplar cities.\nAn ICU4X mapping to the CLDR timeZoneNames exemplar cities.\nAn ICU4X mapping to generic metazone names. See CLDR-JSON ‚Ä¶\nMetazone ID in a compact format\nAn ICU4X mapping to the metazones at a given period. See ‚Ä¶\nAn ICU4X mapping to specific metazone names. Specific ‚Ä¶\nAn ICU4X mapping to the CLDR timeZoneNames format strings. ‚Ä¶\n<code>TimezoneMetazonePeriodsV1</code>\n<code>TimezoneNamesCitiesOverrideV1</code>\n<code>TimezoneNamesCitiesRootV1</code>\n<code>TimezoneNamesEssentialsV1</code>\n<code>TimezoneNamesGenericLongV1</code>\n<code>TimezoneNamesGenericShortV1</code>\n<code>TimezoneNamesLocationsOverrideV1</code>\n<code>TimezoneNamesLocationsRootV1</code>\n<code>TimezoneNamesSpecificLongV1</code>\n<code>TimezoneNamesSpecificShortV1</code>\n<code>TimezoneNamesStandardLongV1</code>\nThe default mapping between metazone id and localized ‚Ä¶\nThe default mapping between metazone id and localized ‚Ä¶\nPer-zone exemplar city name. This is deduplicated against ‚Ä¶\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe default mapping between period and offsets. The second ‚Ä¶\nPer-zone location display name\nThe localized offset format.\nThe separator sign\nThe localized unknown-offset format.\nThe localized zero-offset format.\nThe override mapping between timezone id and localized ‚Ä¶\nThe override mapping between timezone id and localized ‚Ä¶\nThe format string for a region‚Äôs daylight time.\nThe format string for a region‚Äôs generic time.\nMetazone Name with Location Pattern.\nThe format string for a region‚Äôs standard time.\nThe metazones for which the standard name is in ‚Ä¶\nTrait to consolidate data provider markers external to ‚Ä¶\nTrait to consolidate data provider markers defined by this ‚Ä¶\nTrait to consolidate data provider markers defined by this ‚Ä¶\nTrait to consolidate data provider markers external to ‚Ä¶\nTrait to consolidate data provider markers defined by this ‚Ä¶\nTrait to consolidate data provider markers defined by this ‚Ä¶\nTrait implemented on formattable datetime types.\nThe type for a <code>Buddhist</code> calendar\nA collection of marker types associated with all ‚Ä¶\nThe type for a <code>Chinese</code> calendar\nA calendar that can be found in CLDR.\nThe field is already loaded with a different length\nA type that can be converted into a specific calendar ‚Ä¶\nThe converted type. This can be the same as the receiver ‚Ä¶\nThe type for a <code>Coptic</code> calendar\nAssociated types for date formatting.\nThe type for a <code>Dangi</code> calendar\nAn implementation of <code>MaybePayload</code> that wraps an optional ‚Ä¶\nBorrowed version of <code>DataPayloadWithVariables</code>.\nA trait associating types for date formatting in any ‚Ä¶\nA trait associating types for date formatting in any ‚Ä¶\nMarker for loading date skeleton patterns.\nA trait associating constants and types implementing ‚Ä¶\nA trait for a <code>DateTimeNamesMarker</code> that can be created from ‚Ä¶\nTrait for a type that owns datetime names data, usually in ‚Ä¶\nMarker for resolving the day-of-month input field.\nMarker for resolving the day-of-week input field.\nMarker for resolving the day-of-year input field.\nMarker for loading day period names.\nMarker for loading core time zone data.\nThe type for an <code>Ethiopian</code> calendar (either era style)\nMarker for loading exemplar city names for time zone ‚Ä¶\nMarker for loading exemplar city names for time zone ‚Ä¶\nThe container‚Äôs field set doesn‚Äôt support the field\nImplementation of <code>CalMarkers</code> that includes data for all ‚Ä¶\nMarker for loading generic long time zone names.\nMarker for loading generic short time zone names.\nA type that can return a certain field <code>T</code>.\nMarker for loading the date/time glue pattern.\nThe type for a <code>Gregorian</code> calendar\nThe type for a <code>Hebrew</code> calendar\nThe type for Hirji calendars\nMarker for resolving the day-of-month input field.\nAn input associated with a fixed, static calendar.\nAn input that may be associated with a specific runtime ‚Ä¶\nThe type for a <code>Indian</code> calendar\nA calendar type that is supported by <code>DateTimeFormatter</code>.\nThe type for a <code>Japanese</code> calendar\nMarker for loading location names for time zone formatting\nMarker for loading location names for time zone formatting\nA type that may or may not be a <code>DataPayload</code> and may or may ‚Ä¶\nAn error returned by <code>MaybePayload</code>.\nMarker for loading metazone periods.\nMarker for resolving the day-of-week input field.\nCross-calendar data markers for month names.\nMarker for resolving the month input field.\nThe data marker for loading month symbols for this ‚Ä¶\nMarker for loading month names.\nTrait that associates a container for a payload ‚Ä¶\nMarker for resolving the any-calendar-kind input field.\nImplementation of <code>CalMarkers</code> that includes data for no ‚Ä¶\nThe type for a <code>Persian</code> calendar\nThe type for a <code>Roc</code> calendar\nMarker for resolving the day-of-year input field.\nCross-calendar data markers for date skeleta.\nThe data marker for loading skeleton patterns for this ‚Ä¶\nMarker for loading specific long time zone names.\nMarker for loading generic short time zone names.\nMarker for loading standard long time zone names.\nAssociated types for time formatting.\nA trait associating types for time formatting (input types ‚Ä¶\nMarker for loading time skeleton patterns.\nMarker for resolving the time zone id input field.\nMarker for resolving the time zone non-location display ‚Ä¶\nMarker for resolving the time zone offset input field.\nMarker for resolving the time zone variant input field.\nA trait associating types for date formatting in a ‚Ä¶\nTrait marking other traits that are considered unstable ‚Ä¶\nMarker for loading weekday names.\nMarker for loading weekday names.\nCross-calendar data markers for year names.\nMarker for resolving the year input field.\nThe data marker for loading year symbols for this calendar.\nMarker for loading year names.\nAssociated types for time zone formatting.\nA trait associating types for time zone formatting (input ‚Ä¶\nChecks whether this type is compatible with the given ‚Ä¶\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the value of this trait‚Äôs field <code>T</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts <code>self</code> to the specified <code>AnyCalendar</code>.\nAn input bag with all possible datetime input fields.\nDay of month\nDay of year\nThe [<code>DecimalFormatter</code>] has not been loaded.\nAn intermediate type during a datetime formatting ‚Ä¶\nError for the <code>TryWriteable</code> implementation of ‚Ä¶\nHour\nThe [<code>CyclicYear::year</code>] of the input is not valid for this ‚Ä¶\nThe era code of the input is not valid for this calendar.\nThe <code>MonthCode</code> of the input is not valid for this calendar.\nMinute\nAn input field (such as ‚Äúhour‚Äù or ‚Äúmonth‚Äù) is ‚Ä¶\nThe kind of a missing datetime input field.\nMonth\nThe localized names for a field have not been loaded.\nSecond\nSubsecond\nTime zone identifier\nTime zone name timestamp\nTime zone variant\nThe pattern contains a field symbol for which formatting ‚Ä¶\nThe pattern contains a field that has a valid symbol but ‚Ä¶\nWeekday\nYear\nCyclic year\nEra year\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGets the pattern used in this formatted value.\nSets all fields from a <code>Date</code> input.\nSets all fields from a <code>Time</code> input.\nSets the time zone ID.\nSets the local time for time zone name resolution.\nSets the time zone UTC offset.\nSets the time zone variant.\nMax\nValue\nA formatter for <code>Decimal</code>, rendering decimal digits in an ‚Ä¶\nThe preferences for fixed decimal formatting.\nAn intermediate structure returned by <code>DecimalFormatter</code>. ‚Ä¶\nExtends the preferences with the values from another set ‚Ä¶\nFormats a <code>Decimal</code>, returning a <code>FormattedDecimal</code>.\nFormats a <code>Decimal</code>, returning a [<code>String</code>].\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nTypes that can be fed to <code>DecimalFormatter</code> and their ‚Ä¶\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLocale Preferences for the Preferences structure.\nThe user‚Äôs preferred numbering system.\nOptions for <code>DecimalFormatter</code>.\nParts of a formatted decimal.\nLocale preferences used by this crate\nüöß [Unstable] Data provider struct definitions for this ‚Ä¶\nConverts the given value to a <code>String</code>.\nCreates a new <code>DecimalFormatter</code> from compiled data and an ‚Ä¶\nA version of <code>Self::try_new</code> that uses custom data provided ‚Ä¶\nA version of [<code>Self :: try_new</code>] that uses custom data ‚Ä¶\nShow a minus sign on negative numbers and a plus sign on ‚Ä¶\nRender the sign according to locale preferences. In most ‚Ä¶\nA Type containing a <code>UnsignedDecimal</code> and a <code>Sign</code> to ‚Ä¶\nShow a minus sign on negative numbers and a plus sign on ‚Ä¶\nShow a minus sign on strictly negative numbers. Do not ‚Ä¶\nDo not display the sign. Positive and negative numbers are ‚Ä¶\nConfiguration for when to render the minus sign or plus ‚Ä¶\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAlways render grouping separators.\nRender grouping separators according to locale preferences.\nA bag of options defining how numbers will be formatted by ‚Ä¶\nConfiguration for how often to render grouping separators.\nRender grouping separators only if there are at least 2 ‚Ä¶\nNever render grouping separators.\nReturns the argument unchanged.\nReturns the argument unchanged.\nWhen to render grouping separators.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA <code>Part</code> used by <code>FormattedDecimal</code>.\nA <code>Part</code> used by <code>FormattedDecimal</code>.\nA <code>Part</code> used by <code>FormattedDecimal</code>.\nA <code>Part</code> used by <code>FormattedDecimal</code>.\nA <code>Part</code> used by <code>FormattedDecimal</code>.\nA <code>Part</code> used by <code>FormattedDecimal</code>.\nA Unicode Number System Identifier defines a type of ‚Ä¶\nBaked data\nThe digits for a given numbering system. This data ought ‚Ä¶\nA stack representation of the strings used in ‚Ä¶\nSymbols and metadata required for formatting a <code>Decimal</code>.\n<code>VarULE</code> type for <code>DecimalSymbolStrsBuilder</code>. See ‚Ä¶\nData marker for decimal symbols\nA collection of settings expressing where to put grouping ‚Ä¶\nBuild a <code>DecimalSymbolsStrs</code>\nAccess the VarULE type behind the unsized <code>decimal_separator</code>‚Ä¶\nReturn thhe decimal separator\nCharacter used to separate the integer and fraction parts ‚Ä¶\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAccess the VarULE type behind the unsized ‚Ä¶\nReturn thhe decimal separator\nCharacter used to separate groups in the integer part of ‚Ä¶\nSettings used to determine where to place groups in the ‚Ä¶\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe minimum number of digits required before the first ‚Ä¶\nReturn (prefix, suffix) for the minus sign\nAccess the VarULE type behind the unsized <code>minus_sign_prefix</code>‚Ä¶\nPrefix to apply when a negative sign is needed.\nAccess the VarULE type behind the unsized <code>minus_sign_suffix</code>‚Ä¶\nSuffix to apply when a negative sign is needed.\nAccess the VarULE type behind the unsized <code>numsys</code> field\nReturn the numbering system\nThe numbering system to use.\nReturn (prefix, suffix) for the minus sign\nAccess the VarULE type behind the unsized <code>plus_sign_prefix</code> ‚Ä¶\nPrefix to apply when a positive sign is needed.\nAccess the VarULE type behind the unsized <code>plus_sign_suffix</code> ‚Ä¶\nSuffix to apply when a positive sign is needed.\nThe size of the first (lowest-magnitude) group.\nThe size of groups after the first group.\nString data for the symbols: +/- affixes and separators\nThe <code>Writeable</code> implementation that is returned by ‚Ä¶\nA formatter that renders sequences of items in an ‚Ä¶\nThe preferences for list formatting.\nExtends the preferences with the values from another set ‚Ä¶\nReturns a <code>Writeable</code> composed of the input <code>Writeable</code>s and ‚Ä¶\nReturns a [<code>String</code>] composed of the input <code>Writeable</code>s and ‚Ä¶\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.")