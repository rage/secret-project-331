searchState.loadedDescShard("icu_calendar", 0, "Types for dealing with dates and custom calendars.\nTypes that contain a calendar\nA calendar implementation\nThe calendar being wrapped\nA date for a given calendar.\nError type for date creation.\nThe internal type used to represent dates\nTrait for calendars that may be converted to <code>AnyCalendar</code>\nExpected a different calendar.\nThe RFC 9557 string is missing fields required for parsing ‚Ä¶\nAn error returned from parsing an RFC 9557 string to an ‚Ä¶\nA field is out of range for its domain.\nValue is out of range.\nAn argument is out of range for its domain.\nThis exists as a wrapper around <code>&amp;&#39;a T</code> so that <code>Date&lt;&amp;&#39;a C&gt;</code> ‚Ä¶\nSyntax error.\nThe RFC 9557 string specifies an unknown calendar.\nUnknown era\nUnknown month code\nThe type of YearInfo returned by the date\nWrap the calendar type in <code>Ref&lt;T&gt;</code>, making it cheaper to ‚Ä¶\nObtain the inner calendar\nTypes for individual calendars\nGet a reference to the contained calendar\nReturns the <code>CalendarAlgorithm</code> that is required to match ‚Ä¶\nGet a reference to the contained calendar wrapper\nConvert this <code>Date&lt;AnyCalendar&gt;</code> to another <code>AnyCalendar</code>, if ‚Ä¶\nReturns information about the year cycle, for cyclic ‚Ä¶\nConvert a date for this calendar into an <code>AnyDateInner</code>\nThe calendar-specific day-of-month represented by <code>date</code>\nThe calendar-specific day-of-month represented by <code>self</code>\nThe day of the week for this date\nInformation of the day of the year\nThe calendar-specific day-of-month represented by <code>self</code>\nCount the number of days in a given month, specified by ‚Ä¶\nThe number of days in the month of this date\nCount the number of days in a given year, specified by ‚Ä¶\nThe number of days in the year of this date\nObtain a name for the calendar for debug printing\nReturns information about the era for calendars using eras.\nThe extended year value\nThe ‚Äúextended year‚Äù, typically anchored with year 1 as ‚Ä¶\nThe argument that is out of range, such as ‚Äúyear‚Äù\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nMove an <code>AnyCalendar</code> into a <code>Self</code>, or returning it as an ‚Ä¶\nConvert an <code>AnyCalendar</code> reference into a <code>Self</code> reference.\nConstruct a date from era/month codes and fields\nConstruct the date from an ISO date\nConstruct the date from a <code>RataDie</code>\nConstruct a date from a <code>RataDie</code> and some calendar ‚Ä¶\nConstruct a date from raw values for a given calendar. ‚Ä¶\nGet the inner date implementation. Should not be called ‚Ä¶\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWrap the contained calendar type in <code>Arc&lt;T&gt;</code>, making it ‚Ä¶\nWrap the contained calendar type in <code>Rc&lt;T&gt;</code>, making it ‚Ä¶\nCalculate if a date is in a leap year\nReturns whether <code>self</code> is in a calendar-specific leap year\nThe <code>AnyCalendarKind</code> enum variant associated with this ‚Ä¶\nThe maximum value (inclusive). This might not be tight.\nThe minimum value (inclusive). This might not be tight.\nThe calendar-specific month represented by <code>date</code>\nThe calendar-specific month represented by <code>self</code>\nCount the number of months in a given year, specified by ‚Ä¶\nThe number of months in the year of this date\nConstruct a date from an ISO date and some calendar ‚Ä¶\nLocale preferences used by this crate\nüöß [Unstable] Data provider struct definitions for this ‚Ä¶\nConvert this calendar into an <code>AnyCalendar</code>, moving it\nType-erase the date, converting it to a date for ‚Ä¶\nConvert the Date to a date in a different calendar\nObtain an ISO date from this date\nConvert the Date to an ISO Date\nObtain a <code>RataDie</code> from this date\nConvert the date to a <code>RataDie</code>\nCreates a <code>Date</code> in the given calendar from an RFC 9557 ‚Ä¶\nCreates a <code>Date</code> in the given calendar from an RFC 9557 ‚Ä¶\nConstruct a new Buddhist Date.\nConstruct a new Chinese date from a <code>year</code>, <code>month</code>, and <code>day</code>. ‚Ä¶\nConstruct new Coptic Date.\nConstruct a new Dangi date from a <code>year</code>, <code>month</code>, and <code>day</code>. ‚Ä¶\nConstruct new Ethiopian Date.\nConstruct a date from from era/month codes and fields, and ‚Ä¶\nConstruct a new Gregorian Date.\nConstruct new Hebrew Date.\nConstruct new Tabular Hijri Date.\nConstruct new Indian Date, with year provided in the ≈öaka ‚Ä¶\nConstruct a new ISO date from integers.\nConstruct a new Japanese Date with all eras.\nConstruct a new Japanese Date.\nConstruct new Julian Date.\nConstruct new Persian Date.\nConstruct a new Republic of China calendar Date.\nConstruct new simulated Hijri Date.\nConstruct new Hijri Umm al-Qura Date.\nThis module contains various types used by <code>icu_calendar</code> ‚Ä¶\nThe actual value\nFunctions for region-specific weekday information.\nThe ISO week of the year containing this date.\nThe calendar-specific year-info.\nInformation about the year\nThe field that is out of range, such as ‚Äúyear‚Äù\nThe maximum value (inclusive). This might not be tight.\nThe minimum value (inclusive). This might not be tight.\nThe actual value\nUse the single Anno Mundi era, anchored at the date of ‚Ä¶\nUse the Anno Mundi era, anchored at the date of Creation, ‚Ä¶\nThis is a calendar that encompasses all formattable ‚Ä¶\nConvenient type for selecting the kind of AnyCalendar to ‚Ä¶\nThe Thai Solar Buddhist Calendar\nA <code>Buddhist</code> calendar\nThe kind of a <code>Buddhist</code> calendar\nThe Chinese Calendar\nA <code>Chinese</code> calendar\nThe kind of a <code>Chinese</code> calendar\nThe Coptic Calendar\nA <code>Coptic</code> calendar\nThe kind of a <code>Coptic</code> calendar\nThe Traditional Korean (Dangi) Calendar\nA <code>Dangi</code> calendar\nThe kind of a <code>Dangi</code> calendar\nThe Ethiopian Calendar\nAn <code>Ethiopian</code> calendar\nThe kind of an <code>Ethiopian</code> calendar, with Amete Mihret era\nThe kind of an <code>Ethiopian</code> calendar, with Amete Alem era\nWhich era style the ethiopian calendar uses\nFriday July 16, 622 AD (0622-07-19 ISO)\nThe (proleptic) Gregorian Calendar\nA <code>Gregorian</code> calendar\nThe kind of a <code>Gregorian</code> calendar\nThe Hebrew Calendar\nA <code>Hebrew</code> calendar\nThe kind of a <code>Hebrew</code> calendar\nThe simulated Hijri Calendar\nA <code>HijriSimulated</code> calendar\nThe kind of an <code>HijriSimulated</code>, Mecca calendar\nThe tabular Hijri Calendar.\nA <code>HijriTabular</code> calendar\nThe epoch for the <code>HijriTabular</code> calendar.\nThe leap year rule for the <code>HijriTabular</code> calendar.\nThe kind of an <code>HijriTabular</code> calendar using ‚Ä¶\nThe kind of an <code>HijriTabular</code> calendar using ‚Ä¶\nThe Umm al-Qura Hijri Calendar\nA <code>HijriUmmAlQura</code> calendar\nThe kind of an <code>HijriUmmAlQura</code> calendar\nThe Indian National (≈öaka) Calendar\nAn <code>Indian</code> calendar\nThe kind of a <code>Indian</code> calendar\nThe ISO-8601 Calendar\nAn <code>Iso</code> calendar\nThe kind of an <code>Iso</code> calendar\nThe Japanese Calendar (with modern eras only)\nA <code>Japanese</code> calendar\nThe kind of a <code>Japanese</code> calendar\nThe Japanese Calendar (with historical eras)\nA <code>JapaneseExtended</code> calendar\nThe kind of a <code>JapaneseExtended</code> calendar\nThe Julian Calendar\nThe Persian Calendar\nA <code>Persian</code> calendar\nThe kind of a <code>Persian</code> calendar\nThe Republic of China Calendar\nA <code>Roc</code> calendar\nThe kind of a <code>Roc</code> calendar\nThusday July 15, 622 AD (0622-07-18 ISO)\nLeap years 2, 5, 7, 10, 13, 16, 18, 21, 24, 26, 29\nThe calendar-specific day-of-month represented by <code>date</code>\nThe calendar-specific day-of-month represented by <code>date</code>\nThe calendar-specific day-of-month represented by <code>date</code>\nThe calendar-specific day-of-month represented by <code>date</code>\nThe calendar-specific day-of-month represented by <code>date</code>\nThe calendar-specific day-of-month represented by <code>date</code>\nThe calendar-specific day-of-month represented by <code>date</code>\nThe calendar-specific day-of-month represented by <code>date</code>\nInformation of the day of the year\nInformation of the day of the year\nInformation of the day of the year\nInformation of the day of the year\nInformation of the day of the year\nObtain a name for the calendar for debug printing\nReturns whether this has the Amete Alem era\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstruct a date from era/month codes and fields\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe calendar-specific check if <code>date</code> is in a leap year\nThe <code>AnyCalendarKind</code> corresponding to the calendar this ‚Ä¶\nThe calendar-specific month represented by <code>date</code>\nThe calendar-specific month represented by <code>date</code>\nThe calendar-specific month code represented by <code>date</code>; ‚Ä¶\nThe calendar-specific month represented by <code>date</code>\nThe calendar-specific month represented by <code>date</code>\nThe calendar-specific month represented by <code>date</code>\nThe calendar-specific month represented by <code>date</code>\nThe calendar-specific month represented by <code>date</code>\nConstructs an AnyCalendar for a given calendar kind from ‚Ä¶\nSelects the <code>AnyCalendarKind</code> appropriate for the given ‚Ä¶\nCreates a new <code>Chinese</code> with some precomputed calendrical ‚Ä¶\nCreates a new <code>Dangi</code> with some precomputed calendrical ‚Ä¶\nConstruct a new Ethiopian Calendar for the Amete Mihret ‚Ä¶\nConstruct a new <code>Hebrew</code>\nCreates a new <code>HijriUmmAlQura</code>.\nConstruct a new <code>HijriTabular</code> with the given leap year rule ‚Ä¶\nConstruct a new Indian Calendar\nConstruct a new ISO Calendar\nCreates a new <code>Japanese</code> using only modern eras (post-meiji) ‚Ä¶\nCreates a new <code>Japanese</code> from using all eras (including ‚Ä¶\nConstruct a new Julian Calendar\nConstructs a new Persian Calendar\nConstruct a new <code>Chinese</code> without any precomputed ‚Ä¶\nConstruct a new <code>Dangi</code> without any precomputed calendrical ‚Ä¶\nCreates a new <code>HijriSimulated</code> for reference location Mecca, ‚Ä¶\nConstruct a new <code>HijriSimulated</code> for reference location ‚Ä¶\nConstruct a new Ethiopian Calendar with a value specifying ‚Ä¶\nInternal scaffolding types\nA version of <code>Self::new_mecca</code> that uses custom data ‚Ä¶\nA version of [<code>Self :: new</code>] that uses custom data provided ‚Ä¶\nA version of <code>Self::new</code> that uses custom data provided by a ‚Ä¶\nA version of <code>Self::new</code> that uses custom data provided by a ‚Ä¶\nA version of <code>Self::new</code> that uses custom data provided by a ‚Ä¶\nA version of <code>Self::new</code> that uses custom data provided by a ‚Ä¶\nA version of <code>Self::new</code> that uses custom data provided by a ‚Ä¶\nA version of <code>Self::new</code> that uses custom data provided by a ‚Ä¶\nA version of [<code>Self :: new</code>] that uses custom data provided ‚Ä¶\nA version of [<code>Self :: new</code>] that uses custom data provided ‚Ä¶\nA version of [<code>Self :: new</code>] that uses custom data provided ‚Ä¶\nA version of [<code>Self :: new</code>] that uses custom data provided ‚Ä¶\nThe calendar-specific year represented by <code>date</code>\nThe calendar-specific year represented by <code>date</code>\nThe calendar-specific year represented by <code>date</code> Julian has ‚Ä¶\nTrait marking other traits that are considered unstable ‚Ä¶\nThai Buddhist calendar (same as Gregorian except for the ‚Ä¶\n<strong>This is a reexport of a type in <code>icu::locale</code></strong>.\nThe preferences for calendars formatting.\nTraditional Chinese calendar\nHijri calendar, tabular (intercalary years ‚Ä¶\nCoptic calendar\nTraditional Korean calendar\nEthiopic calendar, Amete Alem (epoch approx. 5493 B.C.E)\nEthiopic calendar, Amete Mihret (epoch approx, 8 C.E.)\nGregorian calendar\nTraditional Hebrew calendar\nHijri calendar\n<strong>This is a reexport of a type in <code>icu::locale</code></strong>.\nIndian calendar\nISO calendar (Gregorian calendar using the ISO 8601 ‚Ä¶\nJapanese Imperial calendar\nPersian calendar\nHijri calendar, Saudi Arabia sighting\nRepublic of China calendar\nHijri calendar, tabular (intercalary years ‚Ä¶\nHijri calendar, Umm al-Qura\nA helper function for displaying as a <code>&amp;str</code>.\nThe user‚Äôs preferred calendar system.\nExtends the preferences with the values from another set ‚Ä¶\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLocale Preferences for the Preferences structure.\nBaked data\nFull Japanese era names\nModern Japanese era names\nWeek information\nThe date at which an era started\n<code>ULE</code> type for <code>EraStartDate</code>\nA data structure containing the necessary era data for ‚Ä¶\nAn ICU4X mapping to a subset of CLDR weekData. See ‚Ä¶\nBitset representing weekdays.\nüöß [Unstable] Data provider struct definitions for ‚Ä¶\nReturns whether the set contains the day.\nA map from era start dates to their era codes\nThe day the era started in\nThe first day of a week.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nüöß [Unstable] Data provider struct definitions for ‚Ä¶\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe month the era started in\nCreates a new WeekdaySet using the provided days.\nBitset representing weekdays that are part of the ‚Äò‚Ä¶\nThe year the era started in\nPrecomputed data for the Chinese calendar\nPrecomputed data for the Dangi calendar\nCached/precompiled data for a certain range of years for a ‚Ä¶\nThe struct containing compiled ChineseData\nA list of precomputed data for each year beginning with ‚Ä¶\nThe ISO year corresponding to the first data entry for ‚Ä¶\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPrecomputed data for the Hijri obsevational calendar\nCached/precompiled data for a certain range of years for a ‚Ä¶\nThe struct containing compiled Hijri YearInfo\nA list of precomputed data for each year beginning with ‚Ä¶\nThe extended year corresponding to the first data entry ‚Ä¶\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe century is required, the era may be included.\nA cyclic year, and the related ISO year\nYear information for a year that is specified as a cyclic ‚Ä¶\nA 1-based day number in a month.\nA day of week in month. 1-based.\nThe current day of the year, 1-based.\nAn era and a year in that era\nThe century and era are required.\nThe era is required, the century may be included.\nYear information for a year that is specified with an era\nA week number in a year\nRepresentation of a month in a year\nRepresentation of a formattable month.\nThe year is unambiguous without a century or era.\nA weekday in a 7-day week, according to ISO-8601.\nDefines whether the era or century is required to ‚Ä¶\nThe type of year: Calendars like Chinese don‚Äôt have an ‚Ä¶\nThe ambiguity of the era/year combination\nGet the cyclic year informat, if available\nGet the era year information, if available\nThe era code as defined by CLDR, expect for cases where ‚Ä¶\nAn era index, for calendars with a small set of eras.\nGet <em>some</em> year number that can be displayed\nA month code, useable for formatting\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from an ISO-8601 weekday number to an <code>Weekday</code> ‚Ä¶\nReturns an option which is <code>Some</code> containing the non-month ‚Ä¶\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet whether the month is a leap month\nThe ISO year\nGets the month number. A month number N is not necessarily ‚Ä¶\nConstruct a ‚Äúnormal‚Äù month code given a number (‚ÄúMxx‚Ä¶\nThe month number in this given year. For calendars with ‚Ä¶\nGet the month number and whether or not it is leap from ‚Ä¶\nThe ISO year corresponding to this year\nThe month code, used to distinguish months during leap ‚Ä¶\nThe 1-based ISO week number\nThe numeric year in that era\nThe year in the cycle, 1-based\nInformation about the first day of the week and the ‚Ä¶\nThe preferences for the week information.\nIterator that yields weekdays that are part of the weekend.\nExtends the preferences with the values from another set ‚Ä¶\nThe first day of the week\nThe first day of a week.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLocale Preferences for the Preferences structure.\nCreates a new <code>WeekCalculator</code> from compiled data.\nA version of <code>Self::try_new</code> that uses custom data provided ‚Ä¶\nA version of [<code>Self :: try_new</code>] that uses custom data ‚Ä¶\nWeekdays that are part of the ‚Äòweekend‚Äô, for calendar ‚Ä¶\nThe set of weekend days")