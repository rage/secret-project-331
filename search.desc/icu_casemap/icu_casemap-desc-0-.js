searchState.loadedDescShard("icu_casemap", 0, "Case mapping for Unicode characters and strings.\nA wrapper around <code>CaseMapper</code> that can produce case mapping ‚Ä¶\nA struct with the ability to convert characters and ‚Ä¶\nAn object that accepts characters and/or strings to be ‚Ä¶\nAdds all simple case mappings and the full case folding ‚Ä¶\nAdds all simple case mappings and the full case folding ‚Ä¶\nAdd a character to the set\nAdd a string to the set\nFinds all characters and strings which may casemap to <code>s</code> as ‚Ä¶\n‚ú® <em>Enabled with the <code>compiled_data</code> Cargo feature.</em>\nCase-folds the characters in the given string as a ‚Ä¶\nCase-folds the characters in the given string as a String. ‚Ä¶\nCase-folds the characters in the given string as a ‚Ä¶\nCase-folds the characters in the given string as a String, ‚Ä¶\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the full lowercase mapping of the given string as ‚Ä¶\nReturns the full lowercase mapping of the given string as ‚Ä¶\nCreates a <code>CaseMapper</code> using compiled data.\nA constructor which creates a <code>CaseMapCloser</code> using compiled ‚Ä¶\nA constructor which creates a <code>CaseMapCloser</code> from an ‚Ä¶\nüöß [Unstable] Data provider struct definitions for this ‚Ä¶\nReturns the simple case folding of the given char. For ‚Ä¶\nReturns the simple case folding of the given char, using ‚Ä¶\nReturns the lowercase mapping of the given <code>char</code>. This ‚Ä¶\nReturns the titlecase mapping of the given <code>char</code>. This ‚Ä¶\nReturns the uppercase mapping of the given <code>char</code>. This ‚Ä¶\nTitlecasing-specific try_new_with_mapper_unstable\nReturns the full titlecase mapping of the given string as ‚Ä¶\nReturns the full titlecase mapping of the given string as ‚Ä¶\nA version of <code>Self::new</code> that uses custom data provided by a ‚Ä¶\nA version of <code>Self::new</code> that uses custom data provided by a ‚Ä¶\nA version of [<code>Self :: new</code>] that uses custom data provided ‚Ä¶\nA version of [<code>Self :: new</code>] that uses custom data provided ‚Ä¶\nA version of [<code>Self :: new</code>] that uses custom data provided ‚Ä¶\nA version of [<code>Self :: new</code>] that uses custom data provided ‚Ä¶\nConstruct this object to wrap an existing CaseMapper (or a ‚Ä¶\nA version of [<code>Self :: new_with_mapper</code>] that uses custom ‚Ä¶\nA version of [<code>Self :: new_with_mapper</code>] that uses custom ‚Ä¶\nReturns the full uppercase mapping of the given string as ‚Ä¶\nReturns the full uppercase mapping of the given string as ‚Ä¶\nBaked data\nReverse case folding data. Maps from multi-character ‚Ä¶\nMarker type for <code>CaseMapUnfoldV1</code>: ‚Äúprops/casemap_unfold@1‚Ä¶\nThis type contains all of the casemapping data\nMarker type for <code>CaseMapV1</code>: ‚Äúprops/casemap@1‚Äù\nThe primary per-codepoint casefolding data\nThis module contains various types for the header part of ‚Ä¶\nThis is the main module pertaining to casemapping ‚Ä¶\nExceptions to the case mapping data\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe actual map. Maps from strings to a list of codepoints, ‚Ä¶\nCase mapping data\n‚ÄúAbove‚Äù accents with combining class 230\nCase mapping data associated with a single code point\nA subset of case mapping data associated with a single ‚Ä¶\nPacked casemappingdata type\nThe case of a Unicode character\nThis code point is cased. We store the extra data, its ‚Ä¶\nThe dot type of a Unicode character. This indicates how ‚Ä¶\nThis code point is an exception. Provides the case type of ‚Ä¶\nLowercase letter\nNormal characters with combining class 0\nData that is stored in CaseMapData when it is <em>not</em> an ‚Ä¶\nOther accent characters\nSoft-dotted characters with combining class 0\nTitlecase letter\nThis code point is uncased, and has the following extra ‚Ä¶\nUppercase letter\nThe ‚Äúdot type‚Äù\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nWhether this is default-ignoreable\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe rest of the case mapping data\nWhether or not the type is case-sensitive\nA bunch of bits associated with each exception.\nThe bitflags on an exception header.\nPacked slot presence marker\nThe dot type of the character\nThe dot type of the character\nWhether or not the slots are double-width.\nWhether or not the slots are double-width.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIf the character has conditional case folding\nIf the character has conditional case folding\nIf the character has conditional special casing\nIf the character has conditional special casing\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf the character is case sensitive\nIf the character is case sensitive\nThe delta stored in the <code>Delta</code> slot is negative\nThe delta stored in the <code>Delta</code> slot is negative\nThere is no simple casefolding, even if there is a simple ‚Ä¶\nThere is no simple casefolding, even if there is a simple ‚Ä¶\nThis represents case mapping exceptions that can‚Äôt be ‚Ä¶\nA decoded <code>Exception</code> type, with all of the data parsed out ‚Ä¶\nA type representing the wire format of <code>Exception</code>. The data ‚Ä¶\n<code>VarULE</code> type for <code>Exception</code>. See <code>Exception</code> for documentation.\nThe various bit based exception data associated with this.\nThe various bit-based data associated with this exception\nCase folding\nClosure mappings\nFormat : ‚Ä¶\nExtract all the data out into a structured form\nConvert to a wire-format encodeable (VarULE-encodeable) ‚Ä¶\nThe list of exceptions\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe four full-mappings strings, indexed by MappingKind u8 ‚Ä¶\nObtain the exception at index <code>idx</code>. Will return a default ‚Ä¶\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLowercase mapping\nThe simple casefold delta. Its sign is stored in ‚Ä¶\nWhich slots are present in <code>data</code>.\nTitlecase mapping\nUppercase mapping\nAdjust the string to the first relevant character before ‚Ä¶\nWhere to start casing the string.\nLowercase the rest of the string (‚ÄúspoNgEBoB‚Äù -&gt; ‚Äú‚Ä¶\nStart titlecasing immediately, even if the character is ‚Ä¶\nA wrapper around <code>CaseMapper</code> that can compute titlecasing ‚Ä¶\nVarious options for controlling titlecasing\nAdjust the string to the first cased character before ‚Ä¶\nHow to handle the rest of the string once the beginning of ‚Ä¶\nPreserve the casing of the rest of the string (‚ÄúspoNgEBoB‚Ä¶\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether to start casing at the beginning of the string or ‚Ä¶\nA constructor which creates a <code>TitlecaseMapper</code> using ‚Ä¶\nA constructor which creates a <code>TitlecaseMapper</code> from an ‚Ä¶\nReturns the full titlecase mapping of the given string as ‚Ä¶\nReturns the full titlecase mapping of the given string as ‚Ä¶\nHow to handle the rest of the string once the head of the ‚Ä¶\nA version of <code>Self::new</code> that uses custom data provided by a ‚Ä¶\nA version of [<code>Self :: new</code>] that uses custom data provided ‚Ä¶\nA version of [<code>Self :: new</code>] that uses custom data provided ‚Ä¶\nConstruct this object to wrap an existing CaseMapper (or a ‚Ä¶\nA version of [<code>Self :: new_with_mapper</code>] that uses custom ‚Ä¶\nA version of [<code>Self :: new_with_mapper</code>] that uses custom ‚Ä¶")