searchState.loadedDescShard("icu_collator", 0, "Comparing strings according to language-dependent ‚Ä¶\nWhat to do about characters whose comparison level can be ‚Ä¶\nWhether second level compares the last accent difference ‚Ä¶\nTreatment of case. (Large and small kana differences are ‚Ä¶\nWhether to distinguish case in sorting, even for sorting ‚Ä¶\nCompares strings according to culturally-relevant ordering.\nA list of error outcomes for various operations in this ‚Ä¶\nOptions settable by the user of the API.\nCharacters classified as spaces, punctuation, symbols, or ‚Ä¶\nAn error originating inside of the data provider.\nCompare the NFD form by code point order as the quinary ‚Ä¶\nLower case first.\nRequested data was found but was malformed\nWhat characters get shifted to the quaternary level with ‚Ä¶\nKeep the characters whose level can be varied on the ‚Ä¶\nThe requested collation does not exist\nWhen set to <code>On</code>, any sequence of decimal digits is sorted ‚Ä¶\nUse the default tertiary weights.\nLeave off the case level option.  Case differences will be ‚Ä¶\nLeave off the numeric option.  Decimal digits will be ‚Ä¶\nLeave off the backward second level option. Diacritics in ‚Ä¶\nTurn on the case level option, thereby making a separate ‚Ä¶\nTurn on numeric sorting for any sequence of decimal ‚Ä¶\nTurn on backward second level ordering so that the second ‚Ä¶\nCompare only on the level of base letters. This level ‚Ä¶\nCharacters classified as spaces or punctuation are shifted.\nCompare also on the quaternary level. For Japanese, Higana ‚Ä¶\nThe resolved (actually used) options used by the collator.\nCompare also on the secondary level, which corresponds to ‚Ä¶\nShift the characters at or below <code>MaxVariable</code> to the ‚Ä¶\nCharacters classified as spaces are shifted.\nThe collation strength that indicates how many levels to ‚Ä¶\nCharacters classified as spaces, punctuation, or symbols ‚Ä¶\nCompare also on the tertiary level. By default, if the ‚Ä¶\nUpper case first.\nUser-specified alternate handling collation option.\nResolved alternate handling collation option.\nUser-specified backward second level collation option.\nResolved backward second level collation option.\nUser-specified case first collation option.\nResolved case first collation option.\nUser-specified case level collation option.\nResolved case level collation option.\nCompare guaranteed well-formed UTF-8 slices.\nCompare potentially ill-formed UTF-16 slices. Unpaired ‚Ä¶\nCompare potentially well-formed UTF-8 slices. Ill-formed ‚Ä¶\nThis module exists to contain implementation docs and ‚Ä¶\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvenience conversion for copying the options from an ‚Ä¶\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUser-specified max variable collation option.\nResolved max variable collation option.\nCreate a new <code>CollatorOptions</code> with the defaults.\nUser-specified numeric collation option.\nResolved numeric collation option.\nüöß [Unstable] Data provider struct definitions for this ‚Ä¶\nThe resolved options showing how the default options, the ‚Ä¶\nUser-specified strength collation option.\nResolved strength collation option.\nCreates a collator for the given locale and options from ‚Ä¶\nA version of <code>Self::try_new</code> that uses custom data provided ‚Ä¶\nA version of [<code>Self :: try_new</code>] that uses custom data ‚Ä¶\nA version of [<code>Self :: try_new</code>] that uses custom data ‚Ä¶\nBaked data\nThe main collation data either for the root or for a ‚Ä¶\nMarker type for <code>CollationDataV1</code>: ‚Äúcollator/data@1‚Äù\nSecondary weights for the start of the Combining ‚Ä¶\nMarker type for <code>CollationDiacriticsV1</code>: ‚Äúcollator/dia@1‚Äù\n<code>CollationElement32</code>s for the Hangul Jamo Unicode Block\nMarker type for <code>CollationJamoV1</code>: ‚Äúcollator/jamo@1‚Äù\nEach non-alias collation that the data provider knows ‚Ä¶\nMarker type for <code>CollationMetadataV1</code>: ‚Äúcollator/meta@1‚Äù\nScript reordering data\nMarker type for <code>CollationReorderingV1</code>: ‚Äúcollator/reord@1‚Ä¶\nSpecial primaries associated with the root collation\nMarker type for <code>CollationSpecialPrimariesV1</code>: ‚Äú‚Ä¶\nSee the mask constants in the <code>impl</code> block for the bit ‚Ä¶\n<code>CollationElement32</code>s used in expansions and as defaults for ‚Ä¶\n<code>CollationElement32</code>s (as <code>u32</code>s) for the Hangul Jamo Unicode ‚Ä¶\n<code>CollationElement</code>s used in expansions and offset CE32s ‚Ä¶\nDefaults and tries for prefix and contraction matching\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe primaries corresponding to <code>MaxVariable</code> character ‚Ä¶\nLimit of last reordered range. 0 if no reordering or no ‚Ä¶\nThe high 8 bits of the numeric primary\nPrimary-weight ranges for script reordering, to be used by ‚Ä¶\n256-byte table for reordering permutation of primary lead ‚Ä¶\nSecondary weights for characters starting from U+0300 up ‚Ä¶\nMapping from <code>char</code> to <code>CollationElement32</code> (represented as ‚Ä¶")