searchState.loadedDescShard("icu_list", 0, "Formatting lists in a locale-sensitive way.\nThe <code>Writeable</code> implementation that is returned by â€¦\nA formatter that renders sequences of items in an â€¦\nThe preferences for list formatting.\nExtends the preferences with the values from another set â€¦\nReturns a <code>Writeable</code> composed of the input <code>Writeable</code>s and â€¦\nReturns a <code>String</code> composed of the input <code>Writeable</code>s and the â€¦\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLocale Preferences for the Preferences structure.\nOptions used by types in this crate\nThe <code>Part</code>s used by <code>ListFormatter</code>.\nðŸš§ [Unstable] Data provider struct definitions for this â€¦\nCreates a new <code>ListFormatter</code> that produces a and-type list â€¦\nA version of [<code>Self :: try_new_and</code>] that uses custom data â€¦\nA version of [<code>Self :: try_new_and</code>] that uses custom data â€¦\nCreates a new <code>ListFormatter</code> that produces a or-type list â€¦\nA version of [<code>Self :: try_new_or</code>] that uses custom data â€¦\nA version of [<code>Self :: try_new_or</code>] that uses custom data â€¦\nCreates a new <code>ListFormatter</code> that produces a unit-type list â€¦\nA version of [<code>Self :: try_new_unit</code>] that uses custom data â€¦\nA version of [<code>Self :: try_new_unit</code>] that uses custom data â€¦\nA list of options set by the developer to adjust the â€¦\nRepresents the style of a list. See the CLDR spec for an â€¦\nThe shortest type of list\nA shorter list\nA typical list\nConstructs a new <code>ListFormatterOptions</code> struct.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe length variant should reflect available space for the â€¦\nAuguments the struct with the set <code>ListLength</code>.\nThe <code>Part</code> used by <code>FormattedList</code> to mark the part of the â€¦\nThe <code>Part</code> used by <code>FormattedList</code> to mark the part of the â€¦\nBaked data\nA pattern that can behave conditionally on the next â€¦\nMarker for and lists\nSymbols and metadata required for <code>ListFormatter</code>.\nA pattern containing two numeric placeholders (â€œ{0}, and â€¦\nMarker for or lists\nMarker for unit lists\nThe marker attributes for narrow lists\nThe marker attributes for short lists\nA serde-compatible version of â€¦\nThe special case of a <code>ConditionalListJoinerPattern</code>\nThe marker attributes for wide lists\nThe condition on the following element\nThe default pattern\nReturns the represented <code>DFA</code>\nThe end pattern\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a <code>SerdeDFA</code> from raw bytes. Used internally by â€¦\nConstructs a <code>ListJoinerPattern</code> from raw parts. Used by â€¦\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDeserializes to <code>Option&lt;Self&gt;</code>. Will return <code>None</code> for â€¦\nThe middle pattern. It doesnâ€™t need to be a pattern â€¦\nThe pair pattern, if itâ€™s different from the end pattern.\nThe pattern if the condition matches\nAnd optional special case\nThe start pattern")