searchState.loadedDescShard("icu_list", 0, "Formatting lists in a locale-sensitive way.\nAn error originating inside of the data provider.\nThe <code>Writeable</code> implementation that is returned by ‚Ä¶\nA list of error outcomes for various operations in this ‚Ä¶\nA formatter that renders sequences of items in an ‚Ä¶\nRepresents the style of a list. See the CLDR spec for an ‚Ä¶\nThe shortest type of list\nA shorter list\nA typical list\nReturns a <code>Writeable</code> composed of the input <code>Writeable</code>s and ‚Ä¶\nReturns a <code>String</code> composed of the input <code>Writeable</code>s and the ‚Ä¶\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe <code>Part</code>s used by <code>ListFormatter</code>.\nüöß [Unstable] Data provider struct definitions for this ‚Ä¶\nCreates a new <code>ListFormatter</code> that produces a and-type list ‚Ä¶\nA version of <code>Self::try_new_and_with_length</code> that uses ‚Ä¶\nA version of <code>Self::try_new_and_with_length</code> that uses ‚Ä¶\nA version of <code>Self::try_new_and_with_length</code> that uses ‚Ä¶\nCreates a new <code>ListFormatter</code> that produces a or-type list ‚Ä¶\nA version of <code>Self::try_new_or_with_length</code> that uses custom ‚Ä¶\nA version of <code>Self::try_new_or_with_length</code> that uses custom ‚Ä¶\nA version of <code>Self::try_new_or_with_length</code> that uses custom ‚Ä¶\nCreates a new <code>ListFormatter</code> that produces a unit-type list ‚Ä¶\nA version of <code>Self::try_new_unit_with_length</code> that uses ‚Ä¶\nA version of <code>Self::try_new_unit_with_length</code> that uses ‚Ä¶\nA version of <code>Self::try_new_unit_with_length</code> that uses ‚Ä¶\nThe <code>Part</code> used by <code>FormattedList</code> to mark the part of the ‚Ä¶\nThe <code>Part</code> used by <code>FormattedList</code> to mark the part of the ‚Ä¶\nMarker type for <code>ListFormatterPatternsV1</code>: ‚Äúlist/and@1‚Äù\nBaked data\nA pattern that can behave conditionally on the next ‚Ä¶\nSymbols and metadata required for <code>ListFormatter</code>.\nA pattern containing two numeric placeholders (‚Äú{0}, and ‚Ä¶\nMarker type for <code>ListFormatterPatternsV1</code>: ‚Äúlist/or@1‚Äù\nA serde-compatible version of ‚Ä¶\nThe special case of a <code>ConditionalListJoinerPattern</code>\nMarker type for <code>ListFormatterPatternsV1</code>: ‚Äúlist/unit@1‚Äù\nThe condition on the following element\nThe default pattern\nReturns the represented <code>DFA</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a <code>SerdeDFA</code> from raw bytes. Used internally by ‚Ä¶\nConstructs a <code>ListJoinerPattern</code> from raw parts. Used by ‚Ä¶\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDeserializes to <code>Option&lt;Self&gt;</code>. Will return <code>None</code> for ‚Ä¶\nThe pattern if the condition matches\nAnd optional special case")