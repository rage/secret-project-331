searchState.loadedDescShard("icu_locale", 0, "Canonicalization of locale identifiers based on <code>CLDR</code> data.\nA locale type optimized for use in fallbacking and the ‚Ä¶\nRepresents the direction of a script.\nDuplicated extension.\nInvalid extension subtag.\nInvalid language subtag.\nInvalid script, region or variant subtag.\nA core struct representing a ‚Ä¶\nThe script is left-to-right.\nA core struct representing a <code>Unicode Locale Identifier</code>.\nImplements the algorithm defined in <em>UTS #35: Annex C, </em>‚Ä¶\nProvides methods to determine the direction of a locale.\nImplements the <em>Add Likely Subtags</em> and <em>Remove Likely Subtags</em>\nImplements the algorithm defined in <em>UTS #35: Locale </em>‚Ä¶\nThe canonicalization operation modified the locale.\nList of parser errors that can be generated while parsing ‚Ä¶\nThe script is right-to-left.\nUsed to track the result of a transformation operation ‚Ä¶\nThe unknown language identifier ‚Äúund‚Äù.\nThe unknown locale ‚Äúund‚Äù.\nThe canonicalization operation did not modify the locale.\nCreates a borrowed version of this fallbacker for ‚Ä¶\nThe canonicalize method potentially updates a passed in ‚Ä¶\n<code>const</code> version of <code>Default::default</code>\nThis module provides APIs for getting exemplar characters ‚Ä¶\nUnicode Extensions provide a mechanism to extend the ‚Ä¶\nAny extensions present in the locale identifier.\nTools for locale fallback, enabling arbitrary input ‚Ä¶\nAssociates a configuration with this fallbacker.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the script direction of the given locale.\nThe basic language/script/region components in the locale ‚Ä¶\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts this <code>DataLocale</code> into a <code>Locale</code>.\nReturns whether the given locale is left-to-right.\nReturns whether the given locale is right-to-left.\nReturns whether this <code>DataLocale</code> is <code>und</code> in the locale and ‚Ä¶\nWhether this <code>LanguageIdentifier</code> equals ‚Ä¶\nA macro allowing for compile-time construction of valid ‚Ä¶\nLanguage subtag\nLanguage subtag of the language identifier.\nA macro allowing for compile-time construction of valid ‚Ä¶\nThe maximize method potentially updates a passed in locale ‚Ä¶\nThis returns a new Locale that is the result of running the\nThis returns a new Locale that is the result of running the\nCreates a <code>LocaleFallbacker</code> with compiled fallback data ‚Ä¶\nA constructor which creates a <code>LocaleCanonicalizer</code> from ‚Ä¶\nCreates a <code>LocaleDirectionality</code> from compiled data, using ‚Ä¶\nCreates a <code>LocaleExpander</code> with compiled data for ‚Ä¶\nA constructor which creates a <code>LocaleCanonicalizer</code> from ‚Ä¶\nCreates a <code>LocaleDirectionality</code> from compiled data, using ‚Ä¶\nCreates a <code>LocaleExpander</code> with compiled data for all ‚Ä¶\nCreates a <code>LocaleCanonicalizer</code> with a custom <code>LocaleExpander</code> ‚Ä¶\nCreates a <code>LocaleDirectionality</code> with a custom <code>LocaleExpander</code>‚Ä¶\nCreates a <code>LocaleFallbacker</code> without fallback data. Using ‚Ä¶\nNormalize the language identifier (operating on strings)\nNormalize the locale (operating on strings)\nNormalize the language identifier (operating on UTF-8 ‚Ä¶\nNormalize the locale (operating on UTF-8 formatted byte ‚Ä¶\nCompare this <code>LanguageIdentifier</code> with a potentially ‚Ä¶\nCompare this <code>Locale</code> with a potentially unnormalized BCP-47 ‚Ä¶\nThis API provides necessary functionality for building ‚Ä¶\nüöß [Unstable] Data provider struct definitions for this ‚Ä¶\nRegion subtag\nRegion subtag of the language identifier.\nScript subtag\nScript subtag of the language identifier.\nCompare this <code>DataLocale</code> with BCP-47 bytes.\nCompare this <code>LanguageIdentifier</code> with BCP-47 bytes.\nCompare this <code>Locale</code> with BCP-47 bytes.\nSubivision (-u-sd-) subtag\nLanguage Identifier and Locale contains a set of subtags ‚Ä¶\nConverts the given value to a <code>String</code>.\nConverts the given value to a <code>String</code>.\nConverts the given value to a <code>String</code>.\nReturns an ordering suitable for use in <code>BTreeSet</code>.\nCompare this <code>LanguageIdentifier</code> with another ‚Ä¶\nReturns an ordering suitable for use in <code>BTreeSet</code>.\nA constructor which takes a utf8 slice which may contain ‚Ä¶\nParses a <code>DataLocale</code>.\nA constructor which takes a utf8 slice, parses it and ‚Ä¶\nA constructor which takes a utf8 slice, parses it and ‚Ä¶\nParses a <code>DataLocale</code> from a UTF-8 byte slice.\nSee <code>Self::try_from_str</code>\nSee <code>Self::try_from_str</code>\nA version of <code>Self::new_common</code> that uses custom data ‚Ä¶\nA version of <code>Self::new_common</code> that uses custom data ‚Ä¶\nA version of <code>Self::new_common</code> that uses custom data ‚Ä¶\nA version of [<code>Self :: new_common</code>] that uses custom data ‚Ä¶\nA version of <code>Self::new_common</code> that uses custom data ‚Ä¶\nA version of [<code>Self :: new_common</code>] that uses custom data ‚Ä¶\nA version of <code>Self::new_extended</code> that uses custom data ‚Ä¶\nA version of <code>Self::new_extended</code> that uses custom data ‚Ä¶\nA version of <code>Self::new_extended</code> that uses custom data ‚Ä¶\nA version of [<code>Self :: new_extended</code>] that uses custom data ‚Ä¶\nA version of <code>Self::new_extended</code> that uses custom data ‚Ä¶\nA version of [<code>Self :: new_extended</code>] that uses custom data ‚Ä¶\nA version of <code>Self::new</code> that uses custom data provided by a ‚Ä¶\nA version of [<code>Self :: new</code>] that uses custom data provided ‚Ä¶\nA version of <code>Self::new_with_expander</code> that uses custom data ‚Ä¶\nA version of <code>Self::new_with_expander</code> that uses custom data ‚Ä¶\nA version of [<code>Self :: new_with_expander</code>] that uses custom ‚Ä¶\nVariant subtag\nVariant subtags of the language identifier.\nDocumentation on zero-copy deserialization of locale types.\nA wrapper around <code>UnicodeSet</code> data (characters and strings)\nA borrowed wrapper around code point set data, returned by ‚Ä¶\nConstruct a borrowed version of this type that can be ‚Ä¶\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheaply converts a [<code>ExemplarCharactersBorrowed&lt;&#39;static&gt;</code>] ‚Ä¶\nGet the ‚Äúauxiliary‚Äù set of exemplar characters.\nGet the ‚Äúauxiliary‚Äù set of exemplar characters.\nA version of <code>Self::try_new_auxiliary()</code> that uses custom ‚Ä¶\nGet the ‚Äúindex‚Äù set of exemplar characters.\nGet the ‚Äúindex‚Äù set of exemplar characters.\nA version of <code>Self::try_new_index()</code> that uses custom data ‚Ä¶\nGet the ‚Äúmain‚Äù set of exemplar characters.\nGet the ‚Äúmain‚Äù set of exemplar characters.\nA version of <code>Self::try_new_main()</code> that uses custom data ‚Ä¶\nGet the ‚Äúnumbers‚Äù set of exemplar characters.\nGet the ‚Äúnumbers‚Äù set of exemplar characters.\nA version of <code>Self::try_new_numbers()</code> that uses custom data ‚Ä¶\nGet the ‚Äúpunctuation‚Äù set of exemplar characters.\nGet the ‚Äúpunctuation‚Äù set of exemplar characters.\nA version of <code>Self::try_new_punctuation()</code> that uses custom ‚Ä¶\nDefines the type of extension.\nA map of extensions associated with a given <code>Locale</code>.\nAll other extension types.\nPrivate Extension Type marked as <code>x</code>.\nTransform Extension Type marked as <code>t</code>.\nUnicode Extension Type marked as <code>u</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFunction to create a new map of extensions containing ‚Ä¶\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether there are no extensions present.\nReturns a new empty map of extensions. Same as <code>default()</code>, ‚Ä¶\nOther Use Extensions is a list of extensions other than ‚Ä¶\nA sequence of any other extensions that are present in the ‚Ä¶\nPrivate Use Extensions is a list of extensions intended for\nA representation of the data for a private-use extension, ‚Ä¶\nRetains the specified extension types, clearing all others.\nConverts the given value to a <code>String</code>.\nReturns an ordering suitable for use in <code>BTreeSet</code>.\nTransform Extensions provide information on content ‚Ä¶\nA representation of the data for a transform extension, ‚Ä¶\nUnicode Extensions provide information about user ‚Ä¶\nA representation of the data for a Unicode extension, when ‚Ä¶\nA list of <code>Other Use Extensions</code> as defined in ‚Ä¶\nReturns the argument unchanged.\nA constructor which takes a pre-sorted list of <code>Subtag</code>.\nGets the tag character for this extension as a char.\nGets the tag character for this extension as a byte.\nGets the tag character for this extension as a &amp;str.\nCalls <code>U::from(self)</code>.\nConverts the given value to a <code>String</code>.\nA constructor which takes a str slice, parses it and ‚Ä¶\nSee <code>Self::try_from_str</code>\nA list of <code>Private Use Extensions</code> as defined in ‚Ä¶\nA single item used in a list of <code>Private</code> extensions.\nA helper function for displaying as a <code>&amp;str</code>.\nEmpties the <code>Private</code> list.\nReturns the argument unchanged.\nReturns the argument unchanged.\nUnsafely creates a <code>Subtag</code> from its raw format as returned ‚Ä¶\nA constructor which takes a pre-sorted list of <code>Subtag</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDeconstructs into a raw format to be consumed by ‚Ä¶\nReturns a new empty list of private-use extensions. Same ‚Ä¶\nA constructor which takes a single <code>Subtag</code>.\nCompare with a potentially unnormalized BCP-47 string.\nCompare with BCP-47 bytes.\nConverts the given value to a <code>String</code>.\nConverts the given value to a <code>String</code>.\nSafely creates a <code>Subtag</code> from its raw format as returned by ‚Ä¶\nA constructor which takes a str slice, parses it and ‚Ä¶\nA constructor which takes a str slice, parses it and ‚Ä¶\nSee <code>Self::try_from_str</code>\nSee <code>Self::try_from_str</code>\nA list of <code>Key</code>-<code>Value</code> pairs representing functional ‚Ä¶\nA key used in a list of <code>Fields</code>.\nA list of <code>Unicode BCP47 T Extensions</code> as defined in ‚Ä¶\nA value used in a list of <code>Fields</code>.\nA helper function for displaying as a <code>&amp;str</code>.\nEmpties the <code>Fields</code> list.\nClears the transform extension, effectively removing it ‚Ä¶\nReturns <code>true</code> if the list contains a <code>Value</code> for the ‚Ä¶\nThe key-value pairs present in this locale extension, with ‚Ä¶\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nUnsafely creates a <code>Key</code> from its raw format as returned by ‚Ä¶\nReturns a reference to the <code>Value</code> corresponding to the <code>Key</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDeconstructs into a raw format to be consumed by ‚Ä¶\nReturns <code>true</code> if there are no fields.\nReturns <code>true</code> if there are no tfields and no tlang in the ‚Ä¶\nThe <code>LanguageIdentifier</code> specified with this locale ‚Ä¶\nReturns a new empty list of key-value pairs. Same as ‚Ä¶\nReturns a new empty map of Transform extensions. Same as ‚Ä¶\nCompare with a potentially unnormalized BCP-47 string.\nRetains a subset of fields as specified by the predicate ‚Ä¶\nSets the specified keyword, returning the old value if it ‚Ä¶\nCompare with BCP-47 bytes.\nConverts the given value to a <code>String</code>.\nConverts the given value to a <code>String</code>.\nConverts the given value to a <code>String</code>.\nConverts the given value to a <code>String</code>.\nReturns an ordering suitable for use in <code>BTreeSet</code>.\nSafely creates a <code>Key</code> from its raw format as returned by ‚Ä¶\nA constructor which takes a str slice, parses it and ‚Ä¶\nA constructor which takes a str slice, parses it and ‚Ä¶\nA constructor which takes a str slice, parses it and ‚Ä¶\nSee <code>Self::try_from_str</code>\nSee <code>Self::try_from_str</code>\nSee <code>Self::try_from_str</code>\nAn attribute used in a set of <code>Attributes</code>.\nA set of <code>Attribute</code> elements as defined in ‚Ä¶\nA key used in a list of <code>Keywords</code>.\nA list of <code>Key</code>-<code>Value</code> pairs representing functional ‚Ä¶\nA Subivision Id as defined in <code>Unicode Locale Identifier</code>.\nA subdivision suffix used in <code>SubdivisionId</code>.\nUnicode Extensions provide information about user ‚Ä¶\nA value used in a list of <code>Keywords</code>.\nReturns a reference to a single <code>Subtag</code> if the <code>Value</code> ‚Ä¶\nA helper function for displaying as a <code>&amp;str</code>.\nA helper function for displaying as a <code>&amp;str</code>.\nA helper function for displaying as a <code>&amp;str</code>.\nA canonically ordered sequence of single standalone ‚Ä¶\nEmpties the <code>Attributes</code> list.\nClears all Unicode extension keywords, leaving Unicode ‚Ä¶\nClears all Unicode extension keywords and attributes, ‚Ä¶\nReturns <code>true</code> if the list contains a <code>Value</code> for the ‚Ä¶\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nUnsafely creates a <code>Attribute</code> from its raw format as ‚Ä¶\nUnsafely creates a <code>Key</code> from its raw format as returned by ‚Ä¶\nUnsafely creates a <code>SubdivisionSuffix</code> from its raw format ‚Ä¶\nA constructor which takes a pre-sorted list of <code>Attribute</code> ‚Ä¶\nA constructor which takes a pre-sorted list of <code>Value</code> ‚Ä¶\nReturns a reference to the <code>Value</code> corresponding to the <code>Key</code>.\nReturns a mutable reference to the <code>Value</code> corresponding to ‚Ä¶\nReturns a reference to a subtag at index.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDeconstructs into a raw format to be consumed by ‚Ä¶\nDeconstructs into a raw format to be consumed by ‚Ä¶\nDeconstructs into a raw format to be consumed by ‚Ä¶\nDestructs into a single <code>Subtag</code> if the <code>Value</code> contains ‚Ä¶\nConvert to <code>Subtag</code>\nReturns <code>true</code> if there are no keywords.\nReturns <code>true</code> if the Value has no subtags.\nReturns <code>true</code> if there list of keywords and attributes is ‚Ä¶\nProduce an ordered iterator over key-value pairs\nThe key-value pairs present in this locale extension, with ‚Ä¶\nReturns a new empty set of attributes. Same as <code>default()</code>, ‚Ä¶\nReturns a new empty list of key-value pairs. Same as ‚Ä¶\nReturns a new <code>SubdivisionId</code>.\nReturns a new empty map of Unicode extensions. Same as ‚Ä¶\nCreates an empty <code>Value</code>, which corresponds to a ‚Äútrue‚Äù ‚Ä¶\nCreate a new list of key-value pairs having exactly one ‚Ä¶\nCompare with a potentially unnormalized BCP-47 string.\nCompare with a potentially unnormalized BCP-47 string.\nCompare with a potentially unnormalized BCP-47 string.\nAppends a subtag to the back of a <code>Value</code>.\nA region field of a Subdivision Id.\nRemoves the specified keyword, returning the old value if ‚Ä¶\nRemoves and returns the subtag at position <code>index</code> within ‚Ä¶\nRetains a subset of keywords as specified by the predicate ‚Ä¶\nSets the specified keyword, returning the old value if it ‚Ä¶\nCompare with BCP-47 bytes.\nCompare with BCP-47 bytes.\nCompare this <code>Keywords</code> with BCP-47 bytes.\nCompare with BCP-47 bytes.\nReturns the number of subtags in the <code>Value</code>.\nA subdivision suffix field of a Subdivision Id.\nConverts the given value to a <code>String</code>.\nConverts the given value to a <code>String</code>.\nConverts the given value to a <code>String</code>.\nConverts the given value to a <code>String</code>.\nConverts the given value to a <code>String</code>.\nConverts the given value to a <code>String</code>.\nConverts the given value to a <code>String</code>.\nConverts the given value to a <code>String</code>.\nReturns an ordering suitable for use in <code>BTreeSet</code>.\nSafely creates a <code>Attribute</code> from its raw format as returned ‚Ä¶\nSafely creates a <code>Key</code> from its raw format as returned by ‚Ä¶\nSafely creates a <code>SubdivisionSuffix</code> from its raw format as ‚Ä¶\nA constructor which takes a str slice, parses it and ‚Ä¶\nA constructor which takes a str slice, parses it and ‚Ä¶\nA constructor which takes a str slice, parses it and ‚Ä¶\nA constructor which takes a str slice, parses it and ‚Ä¶\nA constructor which takes a str slice, parses it and ‚Ä¶\nA constructor which takes a str slice, parses it and ‚Ä¶\nA constructor which str slice, parses it and produces a ‚Ä¶\nA constructor which takes a str slice, parses it and ‚Ä¶\nSee <code>Self::try_from_str</code>\nSee <code>Self::try_from_str</code>\nSee <code>Self::try_from_str</code>\nSee <code>Self::try_from_str</code>\nSee <code>Self::try_from_str</code>\nSee <code>Self::try_from_str</code>\nSee <code>Self::try_from_str</code>\nSee <code>Self::try_from_str</code>\nPrioritize the language. This is the default behavior.\nConfiguration settings for a particular fallback operation.\nIteration type for locale fallback operations.\nHint for which subtag to prioritize during fallback.\nBorrowed version of <code>LocaleFallbacker</code>.\nA <code>LocaleFallbackerBorrowed</code> with an associated ‚Ä¶\nPrioritize the region.\nPrioritize the script.\nConst-friendly version of <code>Default::default</code>.\nConst version of <code>Default::default</code>.\nCreates an iterator based on a <code>DataLocale</code>.\nAssociates a configuration with this fallbacker.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nBorrows the current <code>DataLocale</code> under fallback.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a <code>LocaleFallbackerBorrowed</code> with compiled fallback ‚Ä¶\nStrategy for choosing which subtags to drop during locale ‚Ä¶\nCheaply converts a [<code>LocaleFallbackerBorrowed&lt;&#39;static&gt;</code>] ‚Ä¶\nPerforms one step of the locale fallback algorithm.\nTakes the current <code>DataLocale</code> under fallback.\nThe structure storing locale subtags used in preferences.\nA low-level trait implemented on each preference exposed ‚Ä¶\nConstructs a new <code>LocalePreferences</code> struct with the ‚Ä¶\nExtends the preferences with the values from another set ‚Ä¶\nA set of extensions which correspond to preferences.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nPreference of Language\nPreference of Region\nConvert to a DataLocale, with language-based fallback ‚Ä¶\nConvert to a DataLocale, with region-based fallback ‚Ä¶\nOptional constructor of the given preference. It takes the ‚Ä¶\nRetrieve unicode extension key corresponding to a given ‚Ä¶\nRetrieve unicode extension value corresponding to the ‚Ä¶\nA set of unicode extensions which correspond to ‚Ä¶\nErrors related to parsing of Preferences.\nA list of Preferences derived from Locale unicode ‚Ä¶\nThe given keyword value is not a valid preference variant.\nError returned by parsers of unicode extensions as ‚Ä¶\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nNegative numbers use parentheses or equivalent\nCSS lev 3 word-break=break-all, allow midword breaks ‚Ä¶\nThai Buddhist calendar (same as Gregorian except for the ‚Ä¶\nA Unicode Calendar Identifier defines a type of calendar.\nCelsius as temperature unit\nTraditional Chinese calendar\nHijri calendar, tabular (intercalary years ‚Ä¶\nCollation parameter key for ordering by case.\nCollation parameter key for numeric handling.\nA Unicode Collation Identifier defines a type of collation ‚Ä¶\nA Unicode Variant Identifier defines a special variant ‚Ä¶\nA previous version of the ordering, for compatibility\nCoptic calendar\nA Unicode Currency Format Identifier defines a style for ‚Ä¶\nA Unicode Currency Identifier defines a type of currency.\nTraditional Korean calendar\nUse the default presentation for emoji characters as ‚Ä¶\nDictionary style ordering (such as in Sinhala)\nA Unicode Dictionary Break Exclusion Identifier specifies ‚Ä¶\nThe default Unicode collation element table order\nRecommended ordering for emoji characters\nUse an emoji presentation for emoji characters if possible\nA Unicode Emoji Presentation Style Identifier\nEuropean ordering rules\nEthiopic calendar, Amete Alem (epoch approx. 5493 B.C.E)\nEthiopic calendar, Amete Mihret (epoch approx, 8 C.E.)\nFahrenheit as temperature unit\nNo special case ordering\nNo special handling for numeric ordering\nA Unicode First Day Identifier defines the preferred first ‚Ä¶\nFriday\nGregorian calendar\nVariant of the 12-hour clock, sometimes used in Japan. ‚Ä¶\nThe typical 12-hour clock. Hours are numbered 1‚Äì12. ‚Ä¶\nThe 24-hour clock. Hour are numbered 0‚Äì23. Corresponds ‚Ä¶\nTraditional Hebrew calendar\nHijri calendar\nHijri Calendar sub-type\nA Unicode Hour Cycle Identifier defines the preferred time ‚Ä¶\nIndian calendar\nISO calendar (Gregorian calendar using the ISO 8601 ‚Ä¶\nJapanese Imperial calendar\nCSS lev 3 word-break=keep-all, prohibit midword breaks ‚Ä¶\nKelvin as temperature unit\nA Unicode Line Break Style Identifier defines a preferred ‚Ä¶\nA Unicode Line Break Word Identifier defines preferred ‚Ä¶\nCSS lev 3 line-break=loose\nLower case to be sorted before upper case\nA Unicode Measurement System Identifier defines a ‚Ä¶\nA Measurement Unit Preference Override defines an override ‚Ä¶\nMetric System\nMonday\nDon‚Äôt use sentence break suppressions data (the default)\nCSS level 3 line-break=normal, e.g. treat CJ as ID, break ‚Ä¶\nCSS lev 3 word-break=normal, normal script/language ‚Ä¶\nA Unicode Number System Identifier defines a type of ‚Ä¶\nPersian calendar\nPhonebook style ordering (such as in German)\nPhonetic ordering (sorting based on pronunciation)\nPrioritize keeping natural phrases (of multiple words) ‚Ä¶\nPinyin ordering for Latin and for CJK characters (used in ‚Ä¶\nPOSIX style locale variant\nA Region Override specifies an alternate region to use for ‚Ä¶\nA Unicode Subdivision Identifier defines a regional ‚Ä¶\nHijri calendar, Saudi Arabia sighting\nRepublic of China calendar\nSaturday\nSpecial collation type for string search\nSpecial collation type for Korean initial consonant search\nA Unicode Sentence Break Suppressions Identifier defines a ‚Ä¶\nDefault ordering for each language\nNegative numbers use the minusSign symbol (the default)\nUse sentence break suppressions data of type ‚Äústandard‚Äù\nCSS level 3 line-break=strict, e.g. treat CJ as NS\nPinyin ordering for Latin, stroke order for CJK characters ‚Ä¶\nSunday\nHijri calendar, tabular (intercalary years ‚Ä¶\nUse a text presentation for emoji characters if possible\nThursday\nA Unicode Timezone Identifier defines a timezone.\nTraditional style ordering (such as in Spanish)\nA sequence of decimal digits is sorted at primary level ‚Ä¶\nTuesday\nUK System of measurement: feet, pints, etc.; pints are 20oz\nUS System of measurement: feet, pints, etc.; pints are 16oz\nHijri calendar, Umm al-Qura\nPinyin ordering for Latin, Unihan radical-stroke ordering ‚Ä¶\nUpper case to be sorted before lower case\nWednesday\nPinyin ordering for Latin, zhuyin order for Bopomofo and ‚Ä¶\nA helper function for displaying as a <code>&amp;str</code>.\nA helper function for displaying as a <code>&amp;str</code>.\nA helper function for displaying as a <code>&amp;str</code>.\nA helper function for displaying as a <code>&amp;str</code>.\nA helper function for displaying as a <code>&amp;str</code>.\nA helper function for displaying as a <code>&amp;str</code>.\nA helper function for displaying as a <code>&amp;str</code>.\nA helper function for displaying as a <code>&amp;str</code>.\nA helper function for displaying as a <code>&amp;str</code>.\nA helper function for displaying as a <code>&amp;str</code>.\nA helper function for displaying as a <code>&amp;str</code>.\nA helper function for displaying as a <code>&amp;str</code>.\nA helper function for displaying as a <code>&amp;str</code>.\nA helper function for displaying as a <code>&amp;str</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis alias data is used for locale canonicalization.\nBaked data\nA set of characters and strings which share a particular ‚Ä¶\nA triplet of strings with a EncodeAsVarULE implementation.\n<code>VarULE</code> type for <code>LanguageStrStrPair</code>. See <code>LanguageStrStrPair</code> ‚Ä¶\nThis likely subtags data is used for full coverage of ‚Ä¶\nThis likely subtags data is used for the minimize and ‚Ä¶\nThis likely subtags data is used for the minimize and ‚Ä¶\nMarker for locale alias data.\nMarker for auxiliary exemplar characters data.\nMarker for index exemplar characters data.\nMarker for main exemplar characters data.\nMarker for numbers exemplar characters data.\nMarker for punctuation exemplar characters data.\nMarker for extended data for likely subtags.\nMarker for data for likely subtags for languages.\nMarker for data for likely subtags for scripts and regions.\nMarker for locale fallback parents data.\nMarker for script direction data.\nLocale fallback rules derived from CLDR parent locales ‚Ä¶\nThis directionality data is used to determine the script ‚Ä¶\nA pair of strings with a EncodeAsVarULE implementation.\n<code>VarULE</code> type for <code>StrStrPair</code>. See <code>StrStrPair</code> for ‚Ä¶\n<code>[region] -&gt; [region]+</code>\nAccess the VarULE type behind tuple struct field #0\nAccess the VarULE type behind tuple struct field #1\nAccess the VarULE type behind tuple struct field #1\nAccess the VarULE type behind tuple struct field #2\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>[langid] -&gt; [langid]</code> This is not a map as it‚Äôs searched ‚Ä¶\nJust language.\nJust language.\n<code>[language{2}] -&gt; [langid]</code>\n<code>[language{3}] -&gt; [langid]</code>\nLanguage and region.\nLanguage and region.\nLanguage and script.\nLanguage and script.\n<code>[language, variant(-variant)*] -&gt; [langid]</code> This is not a ‚Ä¶\nScripts in left-to-right direction.\nMap from language identifier to language identifier, ‚Ä¶\nJust region.\nJust region.\n<code>[region{2}] -&gt; [region]</code>\n<code>[region{3}] -&gt; [region]</code>\nScripts in right-to-left direction.\n<code>[script] -&gt; [script]</code>\nJust script.\nJust script.\nScript and region.\nScript and region.\n<code>sgn-[region] -&gt; [language]</code>\n<code>[value{7}] -&gt; [value{7}]</code>\nUndefined.\n<code>[variant] -&gt; [variant]</code>\nA language subtag (examples: <code>&quot;en&quot;</code>, <code>&quot;csb&quot;</code>, <code>&quot;zh&quot;</code>, <code>&quot;und&quot;</code>, ‚Ä¶\nA region subtag (examples: <code>&quot;US&quot;</code>, <code>&quot;CN&quot;</code>, <code>&quot;AR&quot;</code> etc.)\nA script subtag (examples: <code>&quot;Latn&quot;</code>, <code>&quot;Arab&quot;</code>, etc.)\nA generic subtag.\nThe unknown language ‚Äúund‚Äù.\nA variant subtag (examples: <code>&quot;macos&quot;</code>, <code>&quot;posix&quot;</code>, <code>&quot;1996&quot;</code> etc.)\nA list of variants (examples: <code>[&quot;macos&quot;, &quot;posix&quot;]</code>, etc.)\nA helper function for displaying as a <code>&amp;str</code>.\nA helper function for displaying as a <code>&amp;str</code>.\nA helper function for displaying as a <code>&amp;str</code>.\nA helper function for displaying as a <code>&amp;str</code>.\nA helper function for displaying as a <code>&amp;str</code>.\nEmpties the <code>Variants</code> list.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nUnsafely creates a <code>Language</code> from its raw format as ‚Ä¶\nUnsafely creates a <code>Region</code> from its raw format as returned ‚Ä¶\nUnsafely creates a <code>Script</code> from its raw format as returned ‚Ä¶\nUnsafely creates a <code>Variant</code> from its raw format as returned ‚Ä¶\nUnsafely creates a <code>Subtag</code> from its raw format as returned ‚Ä¶\nCreates a new <code>Variants</code> set from a single <code>Variant</code>.\nCreates a new <code>Variants</code> set from a <code>Vec</code>. The caller is ‚Ä¶\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDeconstructs into a raw format to be consumed by ‚Ä¶\nDeconstructs into a raw format to be consumed by ‚Ä¶\nDeconstructs into a raw format to be consumed by ‚Ä¶\nDeconstructs into a raw format to be consumed by ‚Ä¶\nDeconstructs into a raw format to be consumed by ‚Ä¶\nReturns true if the Region has an alphabetic code.\nWhether the list of variants is empty.\nWhether this <code>Language</code> equals <code>Language::UNKNOWN</code>.\nReturns the length of <code>self</code>.\nReturns a new empty list of variants. Same as <code>default()</code>, ‚Ä¶\nCompare with a potentially unnormalized BCP-47 string.\nCompare with a potentially unnormalized BCP-47 string.\nCompare with a potentially unnormalized BCP-47 string.\nCompare with a potentially unnormalized BCP-47 string.\nCompare with a potentially unnormalized BCP-47 string.\nCompare with BCP-47 bytes.\nCompare with BCP-47 bytes.\nCompare with BCP-47 bytes.\nCompare with BCP-47 bytes.\nCompare with BCP-47 bytes.\nConverts the given value to a <code>String</code>.\nConverts the given value to a <code>String</code>.\nConverts the given value to a <code>String</code>.\nConverts the given value to a <code>String</code>.\nConverts the given value to a <code>String</code>.\nConverts the given value to a <code>String</code>.\nSafely creates a <code>Language</code> from its raw format as returned ‚Ä¶\nSafely creates a <code>Region</code> from its raw format as returned by ‚Ä¶\nSafely creates a <code>Script</code> from its raw format as returned by ‚Ä¶\nSafely creates a <code>Variant</code> from its raw format as returned ‚Ä¶\nSafely creates a <code>Subtag</code> from its raw format as returned by ‚Ä¶\nA constructor which takes a str slice, parses it and ‚Ä¶\nA constructor which takes a str slice, parses it and ‚Ä¶\nA constructor which takes a str slice, parses it and ‚Ä¶\nA constructor which takes a str slice, parses it and ‚Ä¶\nA constructor which takes a str slice, parses it and ‚Ä¶\nSee <code>Self::try_from_str</code>\nSee <code>Self::try_from_str</code>\nSee <code>Self::try_from_str</code>\nSee <code>Self::try_from_str</code>\nSee <code>Self::try_from_str</code>")