searchState.loadedDescShard("icu_pattern", 0, "<code>icu_pattern</code> is a utility crate of the <code>ICU4X</code> project.\nBackend for patterns containing zero, one, or two …\nA two-value enum for the <code>DoublePlaceholder</code> pattern backend.\nExamples\nThe type of error that the <code>TryWriteable</code> for this backend …\nEncountered an illegal character.\nPlaceholder hould not be parsed from the given string …\nThe type of <code>Writeable</code> returned by <code>Self::map_literal</code>.\nA string literal. This can occur in one of three places:\nA string literal. This can occur in one of three places:\nBackend for patterns containing zero or more named …\nA string wrapper for the <code>MultiNamedPlaceholder</code> pattern …\nExamples\nA <code>PatternItem</code> with additional detail returned by the <code>Parser</code>…\nPlaceholder pattern parser.\nAn error returned when parsing a pattern.\nOptions passed to the constructor of <code>Parser</code>.\nA string pattern with placeholders.\nTypes that implement backing data models for <code>Pattern</code> …\nA borrowed item in a <code>Pattern</code>. Items are either string …\nA borrowed-or-owned item in a <code>Pattern</code>. Items are either …\nThe placeholder <code>{0}</code>.\nThe placeholder <code>{1}</code>.\nA placeholder of the type specified on this <code>PatternItem</code>.\nA placeholder of the type specified on this <code>PatternItemCow</code>.\nThe type to be used as the placeholder key in code.\nCowable version of the type to be used as the placeholder …\nTrait implemented on collections that can produce …\nControls how quotes (<code>&#39;</code>) are interpreted.\nQuotes are interpreted as literals, i.e. <code>{0} o&#39;clock</code> will …\nQuotes are required to quote ASCII characters, i.e. …\nQuotes can be used to quote ASCII characters, i.e. both …\nBackend for patterns containing zero or one placeholder.\nA singleton enum for the <code>SinglePlaceholder</code> pattern backend.\nExamples\nThe pattern contains an unclosed placeholder.\nThe pattern contains an unclosed quoted literal.\nThe type of <code>TryWriteable</code> returned by <code>Self::value_for</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a <code>Writeable</code> that interpolates items from the given …\nInterpolates the pattern directly to a string.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns an iterator over the <code>PatternItem</code>s in this pattern.\nMaps a literal string to a <code>Writeable</code> that could contain …\nCreates a new <code>Parser</code>.\nControls how quotes (<code>&#39;</code>) are interpreted.\nThe encoded storage\nThe encoded storage\nThe encoded storage\nThe encoded storage\nMutates this parser and collects all <code>ParsedPatternItem</code>s …\nCreates a pattern from an iterator of pattern items.\nCreates a pattern by parsing a syntax string.\nReturns a <code>TryWriteable</code> that interpolates items from the …\nInterpolates the pattern directly to a string, returning …\nAn iterator method that advances the iterator and returns …\nReturns the <code>TryWriteable</code> to substitute for the given …")