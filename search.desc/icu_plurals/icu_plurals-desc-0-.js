searchState.loadedDescShard("icu_plurals", 0, "Determine the plural category appropriate for a given ‚Ä¶\nCardinal plural forms express quantities of units such as ‚Ä¶\nCLDR ‚Äúfew‚Äù plural category. Used in Romanian, Polish, ‚Ä¶\nCLDR ‚Äúmany‚Äù plural category. Used in Polish, Russian, ‚Ä¶\nCLDR ‚Äúone‚Äù plural category. Signifies the singular ‚Ä¶\nOrdinal plural forms denote the order of items in a set ‚Ä¶\nCLDR ‚Äúother‚Äù plural category, used as a catch-all. ‚Ä¶\nThe plural categories are used to format messages with ‚Ä¶\n<code>ULE</code> type for PluralCategory\nA bag of values for different plural cases.\nA full plural operands representation of a number. See ‚Ä¶\nA type of a plural rule which can be associated with the ‚Ä¶\nA struct which provides an ability to retrieve an ‚Ä¶\nA list of options set by the developer to adjust the ‚Ä¶\nThe preferences for plural rules.\nCLDR ‚Äútwo‚Äù plural category. Used in Arabic, Hebrew, ‚Ä¶\nCLDR ‚Äúzero‚Äù plural category. Used in Arabic and ‚Ä¶\nReturns an ordered iterator over variants of ‚Ä¶\nConverts from <code>&amp;PluralElements&lt;T&gt;</code> to <code>PluralElements&lt;&amp;T&gt;</code>.\nReturns all <code>Plural Categories</code> appropriate for a <code>PluralRules</code>‚Ä¶\nReturns the <code>Plural Category</code> appropriate for the given ‚Ä¶\nConstructs a new <code>PluralRulesOptions</code> struct.\nThe value used when the <code>PluralOperands</code> are exactly 1.\nThe value used when the <code>PluralOperands</code> are exactly 0.\nExtends the preferences with the values from another set ‚Ä¶\nThe value for <code>PluralCategory::Few</code>\nImmutably applies a function <code>f</code> to each value.\nMutably applies a function <code>f</code> to each value.\nConverts a <code>fixed_decimal::CompactDecimal</code> to <code>PluralOperands</code>‚Ä¶\nReturns the argument unchanged.\nConverts a <code>fixed_decimal::Decimal</code> to <code>PluralOperands</code>. ‚Ä¶\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the PluralCategory corresponding to given TR35 ‚Ä¶\nReturns the PluralCategory corresponding to given TR35 ‚Ä¶\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLocale Preferences for the Preferences structure.\nThe value for <code>PluralCategory::Many</code>\nApplies a function <code>f</code> to convert all values to another type.\nCreates a new <code>PluralElements</code> with the given default value.\nThe value for <code>PluralCategory::One</code>\nThe value for <code>PluralCategory::Other</code>\nüöß [Unstable] Data provider struct definitions for this ‚Ä¶\nPlural rule type to use.\nImmutably applies a function <code>f</code> to each value, propagating ‚Ä¶\nMutably applies a function <code>f</code> to each value, propagating a ‚Ä¶\nIf the only variant is <code>other</code>, returns <code>Some(other)</code>.\nApplies a function <code>f</code> to convert all values to another type,\nConstructs a new <code>PluralRules</code> for a given locale and type ‚Ä¶\nConstructs a new <code>PluralRules</code> for a given locale for ‚Ä¶\nA version of <code>Self::try_new_cardinal</code> that uses custom data ‚Ä¶\nA version of [<code>Self :: try_new_cardinal</code>] that uses custom ‚Ä¶\nConstructs a new <code>PluralRules</code> for a given locale for ‚Ä¶\nA version of <code>Self::try_new_ordinal</code> that uses custom data ‚Ä¶\nA version of [<code>Self :: try_new_ordinal</code>] that uses custom ‚Ä¶\nA version of <code>Self::try_new</code> that uses custom data provided ‚Ä¶\nA version of [<code>Self :: try_new</code>] that uses custom data ‚Ä¶\nThe value for <code>PluralCategory::Two</code>\nSets the value for explicit 1.\nSets the value for explicit 0.\nSets the value for <code>PluralCategory::Few</code>.\nSets the value for <code>PluralCategory::Many</code>.\nSets the value for <code>PluralCategory::One</code>.\nSets the value for <code>PluralCategory::Two</code>.\nAuguments the struct with the set <code>PluralRuleType</code>.\nSets the value for <code>PluralCategory::Zero</code>.\nThe value for <code>PluralCategory::Zero</code>\nBaked data\nFour bits of metadata that are stored and retrieved with ‚Ä¶\nA sized packed <code>PluralElements</code> suitable for use in data ‚Ä¶\nA bitpacked DST for <code>PluralElements</code>.\nPlural rule strings conforming to UTS 35 syntax. Includes ‚Ä¶\nData for cardinal classification\nData for ordinal classification\nThe encoded elements.\nRule that matches <code>PluralCategory::Few</code>, or <code>None</code> if not ‚Ä¶\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCasts a byte slice to a <code>PluralElementsPackedULE</code>.\nReturns the value for the given <code>PluralOperands</code> and ‚Ä¶\nReturns the value for the given <code>PluralOperands</code> and ‚Ä¶\nGets the value out of a <code>FourBitMetadata</code>.\nReturns the value for the default (‚Äúother‚Äù) plural ‚Ä¶\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRule that matches <code>PluralCategory::Many</code>, or <code>None</code> if not ‚Ä¶\nRule that matches <code>PluralCategory::One</code>, or <code>None</code> if not ‚Ä¶\nüöß [Unstable] APIs and Data Structures for Plural Rules\nCreates a <code>FourBitMetadata</code> if the given value fits in 4 ‚Ä¶\nRule that matches <code>PluralCategory::Two</code>, or <code>None</code> if not ‚Ä¶\nCreates a <code>FourBitMetadata</code> with a zero value.\nRule that matches <code>PluralCategory::Zero</code>, or <code>None</code> if not ‚Ä¶\nReference version of the Plural Rules parser, AST and ‚Ä¶\nRuntime version of the Plural Rules parser, AST and ‚Ä¶\n<code>AST</code> provides a set of Syntax Tree Nodes used to store the ‚Ä¶\nUnicode Plural Rule serializer converts an <code>AST</code> to a <code>String</code>.\nAn incomplete AST representation of a plural rule. ‚Ä¶\nCompact decimal exponent value: exponent of the power of ‚Ä¶\nA complete AST representation of a plural rule‚Äôs ‚Ä¶\nA decimal value used in samples.\nCurrently, synonym for ‚Äòc‚Äô. however, may be redefined ‚Ä¶\nIn a plural rule <code>Relation</code>, represents that the plural ‚Ä¶\nAn incomplete AST representation of a plural rule. ‚Ä¶\nVisible fraction digits with trailing zeros\nAn integer value of input with the fraction part truncated ‚Ä¶\nAbsolute value of input\nThe opposite of <code>Eq</code> ‚Äì that the plural operand <code>Expression</code>‚Ä¶\nAn incomplete AST representation of a plural rule. ‚Ä¶\nAn enum of <code>Relation</code> operators for plural rules.\nAn interval of numerical values (inclusive of both ‚Ä¶\nAn incomplete AST representation of a plural rule. ‚Ä¶\nAn enum of items that appear in a <code>RangeList</code>: <code>Range</code> or a ‚Ä¶\nAn incomplete AST representation of a plural rule. ‚Ä¶\nA complete AST representation of a plural rule. Comprises ‚Ä¶\nA list of values used in samples.\nA value range used in samples.\nA sample of example values that match the given rule.\nVisible fraction digits without trailing zeros\nNumber of visible fraction digits with trailing zeros\nAn incomplete AST representation of a plural rule, ‚Ä¶\nA single scalar numerical value.\nNumber of visible fraction digits without trailing zeros\nThe set of conditions that each must be satisfied for the ‚Ä¶\nThe list of samples with decimal fractions provided ‚Ä¶\nIndicates the presence of U+2026 HORIZONTAL ELLIPSIS at ‚Ä¶\nThe plural operand variable that optionally includes an ‚Ä¶\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe list of integer samples provided (denoted in LDML by ‚Ä¶\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhen <code>upper_val</code> is <code>None</code>, this field represents a single ‚Ä¶\nAn optional modulo arithmetic base value when modulo ‚Ä¶\nThe plural operand under test in this expression.\nThe operator (equals, not equals) indicating whether the ‚Ä¶\nA sequence of <code>RangeListItem</code>, each of which represents a ‚Ä¶\nA collection of intervals in which all of the contained ‚Ä¶\nThe set of sample numerical values matching each plural ‚Ä¶\nWhen this <code>SampleRange</code> represents an interval of values, ‚Ä¶\nRepresent a a single ‚Äúrelation‚Äù in a plural rule\n<code>VarULE</code> type for <code>Relation</code>. See <code>Relation</code> for documentation.\nConvert to a Relation\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")