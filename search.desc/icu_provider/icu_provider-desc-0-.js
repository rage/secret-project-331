searchState.loadedDescShard("icu_provider", 0, "<code>icu_provider</code> is one of the <code>ICU4X</code> components.\nInvalid character\nA data provider that loads data for a specific data type.\nThe type of the ‚Äúcart‚Äù that is used by <code>DataPayload</code>.\nAn unspecified error occurred.\nThe error type for ICU4X data provider operations.\nA list specifying general categories of data provider ‚Ä¶\nThe borrowed version of a <code>DataIdentifierCow</code>.\nA data identifier identifies a particular version of data, ‚Ä¶\nA locale type optimized for use in fallbacking and the ‚Ä¶\nA <code>DynamicDataMarker</code> with a <code>DataMarkerInfo</code> attached.\nAn additional key to identify data beyond a <code>DataLocale</code>.\nAn additional key to identify data beyond a <code>DataLocale</code>.\nUsed for loading data from a dynamic ICU4X data provider.\nA container for data payloads returned from a data ‚Ä¶\nA data provider that loads data for a specific ‚Ä¶\nA <code>DataProvider</code> associated with a specific marker.\nThe request type passed into all data provider ‚Ä¶\nThe request type passed into all data provider ‚Ä¶\nMetadata for data requests. This is currently empty, but ‚Ä¶\nMetadata for data requests. This is currently empty, but ‚Ä¶\nA response object containing an object as payload and ‚Ä¶\nA response object containing metadata about the returned ‚Ä¶\nA type that implements <code>Yokeable</code>. This should typically be ‚Ä¶\nAn error occured during <code>serde</code> deserialization.\nAn error occured during <code>Any</code> downcasting.\nA data provider that can determine whether it can load a ‚Ä¶\nTrait marker for data structs. All types delivered by the ‚Ä¶\nA data provider that loads data for a specific data type.\nA dynanmic data provider that can determine whether it can ‚Ä¶\nThe single <code>DataMarkerInfo</code> associated with this marker.\nThere is data for the data marker, but not for this ‚Ä¶\nThe data for two <code>DataMarker</code>s is not consistent.\nThe request is invalid, such as a request for a singleton ‚Ä¶\nA <code>DataProvider</code> that can iterate over all supported ‚Ä¶\nA <code>DynamicDataProvider</code> that can iterate over all supported ‚Ä¶\nNo data for the requested data marker. This is only ‚Ä¶\nExtension trait for <code>Result&lt;T, DataError&gt;</code>.\nPropagates all errors other than ‚Ä¶\nBorrows this <code>DataIdentifierCow</code> as a [‚Ä¶\nBorrows this <code>DataIdentifierBorrowed</code> as a [‚Ä¶\nReturns this <code>DataMarkerAttributes</code> as a <code>&amp;str</code>.\nWhether to allow prefix matches for the data marker ‚Ä¶\nWhether to allow prefix matches for the data marker ‚Ä¶\nThis module contains scaffolding for baked providers, ‚Ä¶\nReturns the <code>DataMarkerInfo</code> that this provider uses for ‚Ä¶\nTraits for data providers that produce opaque buffers.\nThe format of the buffer for buffer-backed data, if known ‚Ä¶\nConvert between two <code>DynamicDataMarker</code> types that are ‚Ä¶\nConvert between two <code>DynamicDataMarker</code> types that are ‚Ä¶\nConvert between two <code>DynamicDataMarker</code> types that are ‚Ä¶\nAn optional checksum. This can be used to ensure ‚Ä¶\nüìö <em>This module documents ICU4X constructor signatures.</em>\nReturns a new, empty DataError with kind Custom and a ‚Ä¶\nCreates a data marker.\nImplements required traits on data structs, such as [‚Ä¶\n<code>const</code> version of <code>Default::default</code>\nThis method goes through the motions of <code>load</code>, but only ‚Ä¶\nThis method goes through the motions of <code>load_data</code>, but ‚Ä¶\nConvert a <code>DataPayload</code> to one of the same type with runtime ‚Ä¶\nConvert a mutable reference of a <code>DataPayload</code> to another ‚Ä¶\nUtilities for using trait objects with <code>DataPayload</code>.\nCreates an empty <code>DataMarkerAttributes</code>.\nThe fallback to use for this data marker.\nCreates a <code>DataIdentifierBorrowed</code> for a borrowed <code>DataLocale</code>.\nCreates a <code>DataIdentifierBorrowed</code> for a borrowed ‚Ä¶\nCreates a <code>DataIdentifierBorrowed</code> for a borrowed ‚Ä¶\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a <code>DataIdentifierCow</code> from a borrowed ‚Ä¶\nSee <code>Default::default</code>\nCreates a <code>DataIdentifierCow</code> from an owned <code>DataLocale</code>.\nCreates a <code>DataIdentifierCow</code> from a borrowed ‚Ä¶\nCreates a <code>DataIdentifierCow</code> from an owned ‚Ä¶\nConvert a fully owned (<code>&#39;static</code>) data struct into a ‚Ä¶\nCreates a <code>DataIdentifierCow</code> from an owned ‚Ä¶\nConverts an owned byte buffer into a ‚Ä¶\nConverts a static byte buffer into a ‚Ä¶\nConstruct a <code>DataPayload</code> from a static reference.\nMake a <code>DataPayload</code><code>&lt;</code><code>HelloWorldV1</code><code>&gt;</code> from a static string ‚Ä¶\nCreates a borrowed <code>DataMarkerAttributes</code> from a borrowed ‚Ä¶\nConverts a yoked byte buffer into a ‚Ä¶\nBorrows the underlying data.\nBorrows the underlying data statically if possible.\nWhether this data marker uses checksums for integrity ‚Ä¶\nData provider returning multilingual ‚ÄúHello World‚Äù ‚Ä¶\nThe data identifier for which to load data.\nThe data identifier for which to load data.\nThe ID of this marker.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDeserialize a <code>DataPayload</code><code>&lt;</code><code>BufferMarker</code><code>&gt;</code> into a <code>DataPayload</code> ‚Ä¶\nConverts this DataErrorKind into a DataError.\nConverts this <code>DataLocale</code> into a <code>Locale</code>.\nConverts this <code>DataIdentifierBorrowed</code> into a [‚Ä¶\nWhether this data marker only has a single payload, not ‚Ä¶\nReturns whether this <code>DataLocale</code> is <code>und</code> in the locale and ‚Ä¶\nReturns whether this id is equal to the default.\nReturns a set of <code>DataIdentifierCow</code>.\nGiven a <code>DataMarkerInfo</code>, returns a set of <code>DataIdentifierCow</code>.\nBroad category of the error.\nLanguage subtag\nQuery the provider for data, returning the result.\nQuery the provider for data, returning the result.\nQuery the provider for data, returning the result.\nThe CLDR locale\nThe CLDR locale\nThe resolved locale of the returned data, if locale ‚Ä¶\nConstructs a <code>DataLocale</code> for this <code>DataMarkerInfo</code>.\nMaps <code>DataPayload&lt;M&gt;</code> to <code>DataPayload&lt;M2&gt;</code> by projecting it ‚Ä¶\nVersion of <code>DataPayload::map_project()</code> that borrows <code>self</code> ‚Ä¶\nAdditional <code>DataMarker</code> helpers.\nThe data marker of the request, if available.\nMarker-specific request attributes\nMarker-specific request attributes\nReturns <code>Ok</code> if this data marker matches the argument, or ‚Ä¶\nMetadata about the returned object.\nMetadata that may affect the behavior of the data provider.\nMetadata that may affect the behavior of the data provider.\nCreates a <code>DataProviderWithMarker</code> from a <code>DataProvider</code> with ‚Ä¶\nThe object itself\nCore selection of APIs and structures for the ICU4X data ‚Ä¶\nRegion subtag\nScript subtag\nWhether this error was created in silent mode to not log.\nSilent requests do not log errors. This can be used for ‚Ä¶\nSilent requests do not log errors. This can be used for ‚Ä¶\nAdditional context, if available.\nCompare this <code>DataLocale</code> with BCP-47 bytes.\nSubivision (-u-sd-) subtag\nConverts the given value to a <code>String</code>.\nReturns an ordering suitable for use in <code>BTreeSet</code>.\nParses a <code>DataLocale</code>.\nCreates a borrowed <code>DataMarkerAttributes</code> from a borrowed ‚Ä¶\nCreates an owned <code>DataMarkerAttributes</code> from an owned string.\nParses a <code>DataLocale</code> from a UTF-8 byte slice.\nAttempts to create a borrowed <code>DataMarkerAttributes</code> from a ‚Ä¶\nCreates a <code>Yoke&lt;Y, Option&lt;Cart&gt;&gt;</code> from owned bytes by ‚Ä¶\nVersion of <code>DataPayload::map_project()</code> that bubbles up an ‚Ä¶\nVersion of <code>DataPayload::map_project_cloned()</code> that  bubbles ‚Ä¶\nTraits that data provider implementations can use to ‚Ä¶\nVariant subtag\nSets the checksum.\nLogs the data error with the given context, then return ‚Ä¶\nLogs the data error with the given context, then return ‚Ä¶\nCreates a DataError with a data marker context.\nSets the data marker of a DataError, returning a modified ‚Ä¶\nMutate the data contained in this DataPayload.\nCreates a DataError with a request context.\nLogs the data error with the given request, returning an ‚Ä¶\nCreates a DataError with a string context.\nSets the string context of a DataError, returning a ‚Ä¶\nCreates a DataError with a type name context.\nSets the string context of a DataError to the given type ‚Ä¶\nA backing store for baked data\nThe type returned by the iterator\nGet the value for a key\nIterate over all data\nData stored as as <code>ZeroTrieSimpleAscii</code>\nRegular baked data: a trie for lookups and a slice of ‚Ä¶\nOptimized data stored as a single VarZeroSlice to reduce ‚Ä¶\nThis is a valid separator as <code>DataLocale</code> will never produce ‚Ä¶\nA data structure that compactly maps from ASCII strings to ‚Ä¶\nReturns this trie as a reference transparent over a byte ‚Ä¶\nReturns a trie with a store borrowing from this trie.\nReturns the bytes contained in the underlying store.\nReturns the size of the trie in number of bytes.\nConverts this trie‚Äôs store to a different store ‚Ä¶\nGets a cursor into the current trie.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCasts from a byte slice to a reference to a trie with the ‚Ä¶\n<strong>Const Constructor:</strong> Creates an <code>ZeroTrieSimpleAscii</code> from a ‚Ä¶\n<strong>Const Constructor:</strong> Creates an <code>ZeroTrieSimpleAscii</code> from a ‚Ä¶\nCreate a trie directly from a store.\nConstruct from a trie and values\nConstruct from a trie and values\nQueries the trie for a string.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSame as <code>ZeroTrieSimpleAscii::cursor()</code> but moves self to ‚Ä¶\nTakes the byte store from this trie.\nWrap this specific ZeroTrie variant into a ZeroTrie.\nReturns <code>true</code> if the trie is empty.\nReturns an iterator over the key/value pairs in this trie.\nExports the data from this ZeroTrie type into a BTreeMap.\nExports the data from this ZeroTrie type into a LiteMap.\nConverts a possibly-borrowed $name to an owned one.\nThis impl allows <code>ZeroTrieSimpleAscii</code> to be used inside of ‚Ä¶\nBlanket-implemented trait adding the ‚Ä¶\nSerialize using the [<code>bincode</code>] crate, version 1.\nAn enum expressing all Serde formats known to ICU4X.\n<code>DynamicDataMarker</code> for raw buffers. Returned by ‚Ä¶\nA data provider that returns opaque bytes.\nA <code>BufferProvider</code> that deserializes its data using Serde.\nSerialize using JavaScript Object Notation (JSON), using ‚Ä¶\nSerialize using the <code>postcard</code> crate, version 1.\nWrap this <code>BufferProvider</code> in a <code>DeserializingBufferProvider</code>.\nWrap this <code>BufferProvider</code> in a <code>DeserializingBufferProvider</code>.\nReturns an error if the buffer format is not enabled.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts a buffer into a concrete type by deserializing ‚Ä¶\nConverts a buffer into a concrete type by deserializing ‚Ä¶\nTrait to allow conversion from <code>DataPayload&lt;T&gt;</code> to ‚Ä¶\nImplements <code>UpcastDataPayload</code> from several data markers to ‚Ä¶\nImplements <code>DynamicDataProvider</code> for a marker type <code>S</code> on a ‚Ä¶\nUpcast a <code>DataPayload&lt;T&gt;</code> to a <code>DataPayload&lt;S&gt;</code> where <code>T</code> ‚Ä¶\nA formatted hello world message. Implements <code>Writeable</code>.\nA struct containing ‚ÄúHello World‚Äù in the requested ‚Ä¶\nA type that formats localized ‚Äúhello world‚Äù strings.\nHello World Preferences.\nA data provider returning Hello World strings in different ‚Ä¶\nMarker type for <code>HelloWorld</code>.\nExtends the preferences with the values from another set ‚Ä¶\nFormats a hello world message, returning a ‚Ä¶\nFormats a hello world message, returning a <code>String</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLocale Preferences for the Preferences structure.\nThe translation of ‚ÄúHello World‚Äù.\nConverts the given value to a <code>String</code>.\nCreates a new <code>HelloWorldFormatter</code> for the specified locale.\nA version of <code>Self::try_new</code> that uses custom data provided ‚Ä¶\nA version of [<code>Self :: try_new</code>] that uses custom data ‚Ä¶\nExtension trait for methods on <code>DataMarker</code>\nThe ID of a data marker.\nA compact hash of a <code>DataMarkerInfo</code>. Useful for keys in ‚Ä¶\nA marker for the given <code>DataStruct</code>.\nMagic bytes to locate <code>DataMarkerIdHash</code>es in binaries.\nA <code>DynamicDataMarker</code> that never returns data.\nBinds a <code>DataMarker</code> to a provider supporting it.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets a platform-independent hash of a <code>DataMarkerId</code>.\nImplements <code>DataProvider&lt;NeverMarker&lt;Y&gt;&gt;</code> on a struct.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructs a <code>DataLocale</code> using fallback preferences from ‚Ä¶\nGets the hash value as a byte array.\nThe <code>VarULE</code> type for this data struct, or <code>[()]</code> if it cannot ‚Ä¶\nA trait that associates a <code>VarULE</code> type with a data struct.")