searchState.loadedDescShard("icu_time", 0, "Time and timezone functionality.\nParsed date and time records were not a valid ISO date.\nA date and time for a given calendar.\nParsed fractional digits had excessive precision beyond â€¦\nAn ISO-8601 hour component, for use with ISO calendars.\nThere were two offsets provided that were not consistent â€¦\nThere was an invalid Offset.\nAn ISO-8601 minute component, for use with ISO calendars.\nExpected a different calendar.\nThe set of time zone fields was not expected for the given â€¦\nThere were missing fields required to parse component.\nA fractional second component, stored as nanoseconds.\nThe error type for parsing RFC 9557 strings.\nParsed record is out of valid date range.\nA timezone calculation is required to interpret this â€¦\nAn ISO-8601 second component, for use with ISO calendars.\nSyntax error.\nA representation of a time in hours, minutes, seconds, and â€¦\nAn unknown calendar was provided.\nA date and time for a given calendar, local to a specified â€¦\nThe date\nThe date, local to the time zone\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a <code>ZonedDateTime</code> from an absolute time, in â€¦\nHour\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether the value is zero.\nReturns whether the value is zero.\nReturns whether the value is zero.\nReturns whether the value is zero.\nMinute\nConstruct a new <code>Time</code>, without validating that all â€¦\nConstruct a new <code>Time</code> representing noon (12:00:00.000)\nGets the numeric value for this component.\nGets the numeric value for this component.\nGets the numeric value for this component.\nGets the numeric value for this component.\nðŸš§ [Unstable] Data provider struct definitions for this â€¦\nScaffolding traits and types not generally required in â€¦\nSecond\nConstruct a new <code>Time</code> representing the start of the day â€¦\nSubsecond\nThe time\nThe time, local to the time zone\nCreates a <code>Time</code> from an RFC 9557 string of a time.\nCreates a <code>DateTime</code> in any calendar from an RFC 9557 string.\nCreates a <code>Time</code> in the ISO-8601 calendar from an RFC 9557 â€¦\nCreates a <code>DateTime</code> in any calendar from an RFC 9557 string.\nCreate a <code>ZonedDateTime</code> in any calendar from an RFC 9557 â€¦\nCreate a <code>ZonedDateTime</code> in any calendar from RFC 9557 UTF-8 â€¦\nCreate a <code>ZonedDateTime</code> in any calendar from an RFC 9557 â€¦\nCreate a <code>ZonedDateTime</code> in any calendar from RFC 9557 UTF-8 â€¦\nCreate a <code>ZonedDateTime</code> in any calendar from an RFC 9557 â€¦\nCreate a <code>ZonedDateTime</code> in any calendar from RFC 9557 UTF-8 â€¦\nConstruct a new <code>Time</code>, whilst validating that all â€¦\nCreate a <code>ZonedDateTime</code> in any calendar from an RFC 9557 â€¦\nCreate a <code>ZonedDateTime</code> in any calendar from RFC 9557 â€¦\nCreates a new value at 0.\nCreates a new value at 0.\nCreates a new value at 0.\nCreates a new value at 0.\nTypes for resolving and manipulating time zones.\nThe time zone\nBaked data\n<code>ULE</code> type for TimeZoneVariant\nThe default mapping between period and offsets. The second â€¦\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nðŸš§ [Unstable] Property names-related data for this â€¦\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA provider for mapping Windows Zones to IANA identifiers.\nA mapping from IANA time zone identifiers to BCP-47 time â€¦\nA mapping from normal-case IANA time zone identifiers to â€¦\n<code>IanaToBcp47Map</code>â€™s trie cannot handle differently-cased â€¦\nSee <code>IanaToBcp47Map</code>\nSee [<code>Bcp47ToIanaMap</code>]\nA list of BCP-47 time zone identifiers, sorted by â€¦\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA map from normal-case IANA time zone identifiers to â€¦\nThe list of all normalized IANA identifiers.\nSee <code>WindowsZonesToBcp47Map</code>.\nA mapping from Windows Timezone names to the corresponding â€¦\nA sorted list of BCP-47 time zone identifiers.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA map from a <code>WindowsZoneIdentifier</code> and <code>WindowsRegion</code> to â€¦\nConverts Self to an <code>Option&lt;T&gt;</code>, either <code>Some(T)</code> if able or â€¦\nReturn <code>self</code> as an <code>Option&lt;T&gt;</code>\nThe variant corresponding to <code>&quot;daylight&quot;</code> in CLDR.\nThe time zone offset was invalid. Must be within â€¦\nThe variant corresponding to <code>&quot;standard&quot;</code> in CLDR.\nA CLDR time zone identity.\nA utility type that can hold time zone information.\nA time zone variant, such as Standard Time, or â€¦\nThe synthetic <code>Etc/Unknown</code> time zone.\nAn offset from Coordinated Universal Time (UTC).\nRepresents the different offsets in use for a time zone\n<code>VariantOffsetsCalculator</code> uses data from the data provider â€¦\nThe borrowed version of a  <code>VariantOffsetsCalculator</code>\nThe moment in time for resolving a time zone name.\nReturns a borrowed version of the calculator that can be â€¦\nSets the <code>ZoneNameTimestamp</code> to the given local datetime.\nCalculate zone offsets from timezone and local datetime.\nThe daylight-saving offset, if used.\nReturns a <code>ZoneNameTimestamp</code> for a time far in the future.\nReturns a <code>ZoneNameTimestamp</code> for a time far in the past.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates an instance of <code>ZoneNameTimestamp</code> from a local â€¦\nCreates a zone variant from a TZDB <code>isdst</code> flag, if it is â€¦\nCreate a <code>UtcOffset</code> from a seconds input without checking â€¦\nCreates a new <code>VariantOffsets</code> from a <code>UtcOffset</code> representing â€¦\nReturns the hours part of if the <code>UtcOffset</code>\nTools for parsing IANA time zone IDs.\nThe BCP47 time-zone identifier.\nSets the zone variant by calculating it using a â€¦\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether the <code>UtcOffset</code> is non-negative.\nWhether this <code>TimeZone</code> equals <code>TimeZone::UNKNOWN</code>.\nWhether the <code>UtcOffset</code> is zero.\nReturns the minutes part of if the <code>UtcOffset</code>.\nTime zone data model choices.\nConstructs a <code>VariantOffsetsCalculator</code> using compiled data.\nConstructs a <code>VariantOffsetsCalculatorBorrowed</code> using â€¦\nThe UTC offset, if known.\nReturns the seconds part of if the <code>UtcOffset</code>.\nThe standard offset.\nCheaply converts a [â€¦\nRecovers the local datetime for this <code>ZoneNameTimestamp</code>.\nReturns the raw offset value in seconds.\nAttempt to create a <code>UtcOffset</code> from a seconds input.\nParse a <code>UtcOffset</code> from bytes.\nSee <code>Self::try_from_str</code>\nA version of <code>Self::new</code> that uses custom data provided by a â€¦\nA version of [<code>Self :: new</code>] that uses custom data provided â€¦\nCreates a time zone info with no information.\nCreates a new <code>TimeZoneInfo</code> for the UTC time zone.\nThe time variant e.g. daylight or standard, if known.\nTools for parsing Windows timezone IDs.\nAssociates this <code>TimeZone</code> with a UTC offset, returning a â€¦\nSets a <code>TimeZoneVariant</code> on this time zone.\nSets the <code>ZoneNameTimestamp</code> field.\nConverts this <code>TimeZone</code> into a <code>TimeZoneInfo</code> without an â€¦\nCreates a <code>UtcOffset</code> of zero.\nThe time at which to interpret the time zone.\nA parser for parsing an IANA time zone ID to a <code>TimeZone</code> â€¦\nA borrowed wrapper around the time zone ID parser, â€¦\nA parser that supplements <code>IanaParser</code> with about 10kB of â€¦\nA borrowed wrapper around the time zone ID parser, â€¦\nReturn value of <code>IanaParserBorrowed::iter</code>.\nReturn value of <code>IanaParserExtendedBorrowed::parse</code>, â€¦\nThe iterator returned by â€¦\nThe iterator returned by <code>IanaParserExtendedBorrowed::iter()</code>\nReturned by <code>IanaParserBorrowed::iter()</code>\nReturns a borrowed version of the parser that can be â€¦\nReturns a borrowed version of the parser that can be â€¦\nThe canonical IANA ID\nThe canonical IANA ID\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns an iterator over all known time zones.\nReturns an iterator over all time zones and their â€¦\nReturns an iterator equivalent to calling <code>Self::parse</code> on â€¦\nCreates a new <code>IanaParser</code> using compiled data.\nCreates a new <code>IanaParserBorrowed</code> using compiled data.\nCreates a new <code>IanaParserExtended</code> using compiled data.\nCreates a new <code>IanaParserExtendedBorrowed</code> using compiled â€¦\nThe normalized IANA ID\nGets the <code>TimeZone</code> from a case-insensitive IANA time zone â€¦\nGets the <code>TimeZone</code>, the canonical IANA ID, and the â€¦\nSame as <code>Self::parse()</code> but works with potentially â€¦\nSame as <code>Self::parse()</code> but works with potentially â€¦\nCheaply converts a [<code>IanaParserBorrowed&lt;&#39;static&gt;</code>] into a â€¦\nCheaply converts a [<code>IanaParserExtendedBorrowed&lt;&#39;static&gt;</code>] â€¦\nThe parsed <code>TimeZone</code>\nThe parsed <code>TimeZone</code>\nA version of <code>Self::new</code> that uses custom data provided by a â€¦\nA version of <code>Self::new</code> that uses custom data provided by a â€¦\nA version of [<code>Self :: new</code>] that uses custom data provided â€¦\nA version of [<code>Self :: new</code>] that uses custom data provided â€¦\nCreates a new <code>IanaParserExtended</code> using compiled data and a â€¦\nA version of <code>Self::new</code> that uses custom data provided by a â€¦\nA version of [<code>Self :: try_new_with_parser</code>] that uses â€¦\nA time zone containing a time zone ID, optional offset, â€¦\nA time zone containing a time zone ID and optional offset.\nA time zone containing a time zone ID, optional offset, â€¦\nTrait encoding a particular data model for time zones.\nThe zone variant, if required for this time zone model.\nThe local time, if required for this time zone model.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA mapper between Windows time zone identifier and a BCP-47 â€¦\nA borrowed wrapper around the windows time zone mapper â€¦\nReturns the borrowed version of the mapper that can be â€¦\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new static <code>WindowsParserBorrowed</code>.\nCreates a new static <code>WindowsParserBorrowed</code>.\nReturns the BCP-47 ID for a provided Windows time zone and â€¦\nSee <code>Self::parse</code>.\nCheaply converts a [<code>WindowsParserBorrowed&lt;&#39;static&gt;</code>] into a â€¦\nA version of <code>Self::new</code> that uses custom data provided by a â€¦\nA version of [<code>Self :: new</code>] that uses custom data provided â€¦")