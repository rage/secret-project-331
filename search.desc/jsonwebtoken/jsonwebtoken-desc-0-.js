searchState.loadedDescShard("jsonwebtoken", 0, "Create and parses JWT (JSON Web Tokens)\nThe algorithms supported for signing/verifying JWTs\nAll the different kind of keys we can use to decode a JWT …\nECDSA using SHA-256\nECDSA using SHA-384\nA key to encode a JWT with. Can be a secret, a PEM-encoded …\nHMAC using SHA-256\nHMAC using SHA-384\nHMAC using SHA-512\nA basic JWT header, the alg defaults to HS256 and typ is …\nRSASSA-PSS using SHA-256\nRSASSA-PSS using SHA-384\nRSASSA-PSS using SHA-512\nRSASSA-PKCS1-v1_5 using SHA-256\nRSASSA-PKCS1-v1_5 using SHA-384\nRSASSA-PKCS1-v1_5 using SHA-512\nThe return type of a successful call to decode.\nContains the various validations that are applied after …\nThe algorithm used\nIf it contains a value, the validation will check that the …\nIf it contains a value, the validation will check that the …\nThe decoded JWT claims\nLower level functions, if you want to do something other …\nContent type\nDecode a JWT without any signature …\nDecode and validate a JWT without any signature …\nDecode a JWT without any signature …\nDecode and validate a JWT\nDecode a JWT without any signature …\nReturns a JWT header using the default Algorithm, HS256\nEncode the header and claims given and sign the payload …\nAll the errors that can be encountered while …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIf you’re using HMAC with a base64 encoded, use this.\nIf you have a base64 HMAC secret, use that.\nIf you know what you’re doing and have a RSA EC encoded …\nIf you know what you’re doing and have the DER-encoded …\nIf you have a ECDSA public key in PEM format, use this.\nIf you are loading a ECDSA key from a .pem file This …\nIf you have (n, e) RSA public key components, use this.\nIf you know what you’re doing and have a RSA DER encoded …\nIf you know what you’re doing and have the DER-encoded …\nIf you are loading a public RSA key in a PEM format, use …\nIf you are loading a RSA key from a .pem file. This errors …\nIf you’re using HMAC, use this.\nIf you’re using a HMAC secret that is not base64, use …\nThe decoded JWT header\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert self to <code>DecodingKey&lt;&#39;static&gt;</code>.\nIf it contains a value, the validation will check that the …\nJSON Key URL\nKey ID\nAdd some leeway (in seconds) to the <code>exp</code>, <code>iat</code> and <code>nbf</code> …\nReturns a JWT header with the algorithm given\nCreate a default validation setup allowing the given alg\n<code>aud</code> is a collection of one or more acceptable audience …\nIf it contains a value, the validation will check that the …\nThe type of JWS: it can only be “JWT” here\nWhether to validate the <code>exp</code> field.\nWhether to validate the <code>nbf</code> field.\nX.509 certificate thumbprint\nX.509 URL\nTake the payload of a JWT, sign it using the algorithm …\nCompares the signature given with a re-computed signature …\nAn error happened when decoding some base64 text\nSomething unspecified went wrong with crypto\nContains the error value\nAn error that can occur when encoding/decoding JWTs\nThe specific type of an error.\nWhen a token’s <code>exp</code> claim indicates that it has expired\nWhen a token’s nbf claim represents a time in the future\nWhen the algorithm in the header doesn’t match the one …\nWhen the algorithm from string doesn’t match the one …\nWhen a token’s <code>aud</code> claim does not match one of the …\nWhen the secret given is not a valid ECDSA key\nWhen a token’s <code>iss</code> claim does not match the expected …\nWhen a key is provided with an invalid format\nWhen the secret given is not a valid RSA key\nWhen the signature doesn’t match\nWhen a token’s <code>aud</code> claim does not match one of the …\nWhen a token doesn’t have a valid JWT shape\nAn error happened while serializing/deserializing JSON\nContains the success value\nA type alias for <code>Result&lt;T, jsonwebtoken::Error&gt;</code>.\nSome of the text was invalid UTF-8\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUnwrap this error into its underlying type.\nReturn the specific type of this error.")