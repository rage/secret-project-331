searchState.loadedDescShard("lettre", 0, "Lettre is an email library that allows creating and …\nError produced by the Transport\nEmail message which can be formatted\nResponse produced by the Transport\nBlocking Transport method for emails\nEmail addresses\nError type for email messages\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nProvides a strongly typed way to build emails\nSends the email\nShuts down the transport. Future calls to <code>Self::send</code> and …\nTransports for sending emails\nRepresents an email address with a user and a domain name.\nErrors in email addresses parsing\nSimple email envelope representation\nInvalid email domain\nInvalid input found\nInvalid email user\nMissing domain or user\nUnbalanced angle bracket\nGets the domain portion of the <code>Address</code>.\nReturns the argument unchanged.\nGets the sender of the envelope.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new envelope, which may fail if <code>to</code> is empty.\nCreates a new email address from a user and domain.\nGets the destination addresses of the envelope.\nGets the user portion of the <code>Address</code>.\nCannot parse filename for attachment\nInvalid email: missing at\nInvalid email: missing domain\nInvalid email: missing local part\nError type for email content\nIO error\nMissing from in envelope\nMissing to in envelope\nNon-ASCII chars\nCan only be one from in envelope\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAlternative kind to join several variants of same email …\n<code>SinglePart</code> builder for attachments\nBinary data\nA <code>Message</code> or <code>SinglePart</code> body that has already been encoded.\nEncrypted kind for encrypted messages\nA trait for something that takes an encoded <code>Body</code>.\nRepresents an email address with an optional name for the …\nRepresents a sequence of <code>Mailbox</code> instances.\nEither a <code>Vec&lt;u8&gt;</code> or a <code>String</code>.\nEmail message which can be formatted\nA builder for messages\nMixed kind to combine unrelated content parts\nMultipart variant with parts\nMultipart builder\nThe kind of multipart\nRelated kind to mix content and related resources.\nSigned kind for signed messages\nSingle part\nCreates builder for single part\nUTF-8 string\nCreates alternative multipart builder\nAlias for HTML and plain text versions of an email\nSet or add mailbox to <code>Bcc</code> header\nBuild the attachment into a <code>SinglePart</code> which can then be …\nBuild singlepart using body\nCreate <code>Message</code> using a <code>Vec&lt;u8&gt;</code>, <code>String</code>, or <code>Body</code> body\nSet custom boundary\nGet the boundary of multipart contents\nCreates multipart without parts\nCreates a builder for singlepart\nCreates multipart builder\nCreate a new message builder without headers\nSet or add mailbox to <code>Cc</code> header\nSet the Content-Type header of the singlepart\nBuilds a new <code>Body</code> using a pre-encoded buffer.\nAdd <code>Date</code> header to message\nSet <code>Date</code> header using current date/time\nThe email address itself.\nReturns the <code>Content-Transfer-Encoding</code> of this <code>Body</code>.\nCreates encrypted multipart builder\nForce specific envelope (by default it is derived from …\nGet <code>Message</code> envelope\nGet message content formatted for sending\nGet message content formatted for SMTP\nGet message content formatted for SMTP\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSet or add mailbox to <code>From</code> header\nReturns the argument unchanged.\nHeaders widely used in email messages\nSet the header to singlepart\nSet a header\nSet custom header to message\nGet the headers from singlepart\nGet the headers from the multipart\nGet the headers from the Message\nGet a mutable reference to the headers\nGet a mutable reference to the headers\nDirectly create a <code>SinglePart</code> from a UTF-8 HTML content\nSet or add message id to <code>In-Reply-To</code> header\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEncode as valid body\nExtracts the first <code>Mailbox</code> if it exists.\nConsumes <code>Body</code> and returns the inner <code>Vec&lt;u8&gt;</code>\nReturns <code>true</code> if this <code>Body</code> has a length of zero, <code>false</code> …\nCreates an iterator over the <code>Mailbox</code> instances that are …\nKeep the <code>Bcc</code> header\nSet <code>Content-Type</code> header using <code>MultiPartKind</code>\nReturns the length of this <code>Body</code> in bytes.\nAdd mailbox to header\nSet Message-ID header\nCreates mixed multipart builder\nCreates multipart using multipart\nAdd multi part to multipart\nCreate message using mime body (<code>MultiPart</code>)\nThe name associated with the address.\nCreate a new attachment\nEncode the supplied <code>buf</code>, making it ready to be sent as a …\nCreates a new <code>Mailbox</code> using an email address and the name …\nCreates a new list of <code>Mailbox</code> instances.\nCreates a default singlepart builder\nCreates default multipart builder\nCreates a new default message builder\nCreate a new inline attachment\nEncode the supplied <code>buf</code>, using the provided <code>encoding</code>.\nDirectly create a <code>SinglePart</code> from a plain UTF-8 content\nAdds a new <code>Mailbox</code> to the list, in a <code>Vec::push</code> style …\nGet the encoded body\nSet or add message id to <code>References</code> header\nCreates related multipart builder\nSet or add mailbox to <code>ReplyTo</code> header\nSet <code>Sender</code> header. Should be used when providing several …\nCreates signed multipart builder\nCreates multipart using singlepart\nAdd single part to multipart\nCreate message using mime body (<code>SinglePart</code>)\nSet <code>Subject</code> header to message\nSet or add mailbox to <code>To</code> header\nSet User-Agent header\nAdds a new <code>Mailbox</code> to the list, in a builder style pattern.\nbase64 encoding\n<code>Bcc</code> header\nBinary data\n<code>Cc</code> header\n<code>Comments</code> of the message, defined in RFC5322\n<code>Content-Disposition</code> of an attachment\n<code>Content-Id</code> header, defined in RFC2045\n<code>Content-Location</code> header, defined in RFC2110\n<code>Content-Transfer-Encoding</code> of the body\n<code>Content-Type</code> of the body\nAn error occurred while trying to <code>ContentType::parse</code>.\nMessage <code>Date</code> header\nRequires <code>8BITMIME</code>\n<code>From</code> header\nRepresents an email header\nA valid header name\nA safe for use header value\nA set of email headers\n<code>In-Reply-To</code> header. Contains one or more unique message …\nA possible error when converting a <code>HeaderName</code> from another …\n<code>Keywords</code> header. Should contain a comma-separated list of …\nMIME version 1.0\nHeader which can contains multiple mailboxes\n<code>Message-Id</code> header. Contains a unique message identifier, …\nMessage format version, defined in RFC2045\nQuoted-Printable encoding\n<code>References</code> header. Contains one or more unique message …\n<code>Reply-To</code> header\n<code>Sender</code> header\nASCII\n<code>Subject</code> of the message, defined in RFC5322\nA <code>ContentType</code> of type <code>text/html; charset=utf-8</code>\nA <code>ContentType</code> of type <code>text/plain; charset=utf-8</code>\n<code>To</code> header\n<code>User-Agent</code> header. Contains information about the client, …\nAn attachment which is separate from the body of the …\nClears <code>Headers</code>, removing all headers from it\nConstruct a new <code>HeaderValue</code> using a pre-encoded header …\nFormats <code>Headers</code>, ready to put them into an email\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a copy of a <code>Header</code> present in <code>Headers</code>\nReturns a reference to the raw value of header <code>name</code>\nAn attachment which should be displayed inline into the …\nAn attachment which should be displayed inline into the …\nInserts a raw header into <code>Headers</code>, overriding <code>value</code> if it …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the <code>major</code> value of this <code>MimeVersion</code> header.\nGet the <code>minor</code> value of this <code>MimeVersion</code> header.\nBuild a <code>Date</code> from <code>SystemTime</code>\nBuild a new <code>MimeVersion</code> header\nCreate an empty <code>Headers</code>\nConstruct a new <code>HeaderValue</code> and encode it\nCreates a new header name\nCreates a new header name, panics on invalid name\nGet the current date\nParse <code>s</code> into <code>ContentType</code>\nRemove <code>Header</code> from <code>Headers</code>, returning it\nRemove a raw header from <code>Headers</code>, returning it\nSets <code>Header</code> into <code>Headers</code>, overriding <code>Header</code> if it was …\nCreate an empty <code>Headers</code> with a pre-allocated capacity\nError produced by the Transport\nResponse produced by the Transport\nBlocking Transport method for emails\nSends the email\nShuts down the transport. Future calls to <code>Self::send</code> and …\nThe SMTP transport sends emails using the SMTP protocol.\nThe stub transport logs message envelopes as well as …\nThe Errors that may occur when sending an email over SMTP\nConfiguration for a connection pool\nDefault smtp port\nDefault submission over TLS port\nDefault submission port\nSynchronously send emails using the SMTP protocol\nContains client configuration. Instances of this struct …\nProvides limited SASL authentication mechanisms\nSet the authentication mechanism to use\nBuild the transport\nCreates a new SMTP client\nSMTP client\nSMTP commands\nSet the authentication credentials to use\nESMTP features\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a <code>SmtpTransportBuilder</code> from a connection URL\nSet the name used during EHLO\nConnection idle timeout\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the error is from client\nReturns true if the error is a permanent SMTP error\nReturns true if the error is from response\nReturns true if the error is caused by a timeout\nReturns true if the error is from TLS\nReturns true if the error is a transient SMTP error\nReturns true if the error is because the transport was …\nMaximum number of pooled connections\nMinimum number of idle connections\nCreate a new pool configuration with default values\nUse a custom configuration for the connection pool\nSet the port to use\nSimple and secure transport, using TLS connections to …\nSMTP response, containing a mandatory return code and an …\nSends an email\nSimple and secure transport, using STARTTLS to obtain …\nReturns the status code, if the error was generated from a …\nTests the SMTP connection\nSet the timeout duration\nSet the TLS settings to use\nCreates a new local SMTP client to port 25\nContains user credentials\nAccepted authentication mechanisms\nLOGIN authentication mechanism Obsolete but needed for …\nRepresents authentication mechanisms\nPLAIN authentication mechanism, defined in RFC 4616\nNon-standard XOAUTH2 mechanism, defined in xoauth2-protocol\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a <code>Credentials</code> struct from username and password\nReturns the string to send to the server, using the …\nDoes the mechanism support initial response?\nA certificate that can be used with …\nSource for the base set of root certificates to trust.\nUse the default for the TLS backend.\nAn identity that can be used with …\nInsecure (plaintext) connection only.\nDon’t use any system certificates.\nBegin with a plaintext connection and attempt to use …\nBegin with a plaintext connection and require <code>STARTTLS</code> for …\nStructure that implements the SMTP client\nSpecifies how to establish a TLS connection\nParameters to use for secure clients\nBuilder for <code>TlsParameters</code>\nTLS protocol versions.\nTLS 1.0\nTLS 1.1\nTLS 1.2\nTLS 1.3\nEstablish a connection wrapped in TLS from the start.\nAdd a custom root certificate\nSends an AUTH command with the given mechanism, and …\nCreates a new <code>TlsParameters</code> using native-tls, boring-tls …\nCreates a new <code>TlsParameters</code> using native-tls with the …\nCreates a new <code>TlsParameters</code> builder\nSet the source for the base set of root certificates to …\nSends an SMTP command\nConnects to the configured server\nControls whether invalid certificates are accepted\nControls whether certificates with an invalid hostname are …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a <code>Certificate</code> from a DER encoded certificate\nCreate a <code>Certificate</code> from a PEM encoded certificate\nAdd a client certificate\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTells if the underlying stream is currently encrypted\nSends the message content\nCreates a new <code>TlsParameters</code> using native-tls or rustls …\nCreates a new builder for <code>TlsParameters</code>\nCreates a new <code>TlsParameters</code> using native-tls\nThe X509 certificate of the server (DER encoded)\nGets the SMTP response\nGet information about the server\nControls which minimum TLS version is allowed\nSets the underlying stream\nSet timeout\nChecks if the server is connected using the NOOP SMTP …\nAUTH command\nDATA command\nEHLO command\nEXPN command\nHELP command\nMAIL command\nNOOP command\nQUIT command\nRCPT command\nRSET command\nSTARTTLS command\nVRFY command\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a EHLO command\nCreates a MAIL command\nCreates an RCPT command\nCreates an HELP command\nCreates a VRFY command\nCreates an EXPN command\nCreates an AUTH command (from a challenge if provided)\nCreates an AUTH command from a response that needs to be a …\nAUTH mechanism\n<code>BODY</code> parameter\nClient identifier, the parameter to <code>EHLO</code>\nA fully-qualified domain name\n8BITMIME keyword\n<code>8BITMIME</code>\nSupported ESMTP keywords\nAn IPv4 address\nAn IPv6 address\nValues for the <code>BODY</code> parameter to <code>MAIL FROM</code>\nA <code>MAIL FROM</code> extension parameter\nCustom parameter\nCustom parameter\nA <code>RCPT TO</code> extension parameter\nContains information about an SMTP server\n<code>7BIT</code>\n<code>SIZE</code> parameter\nSMTPUTF8 keyword\n<code>SMTPUTF8</code> parameter\nSTARTTLS keyword\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nParses a EHLO response to create a <code>ServerInfo</code>\nGets a compatible mechanism from a list\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe name given in the server banner\nChecks if the server supports an ESMTP feature\nChecks if the server supports an ESMTP feature\nParameter keyword\nParameter value\nParameter keyword\nParameter value\nSecond digit\nRepresents a 3 digit SMTP response code\nx2z\nThe detail digit of a response code (third digit)\nx1z\nx5z\n5yz\n2yx\n3yz\nContains an SMTP reply, with separated code and message\nThe first digit indicates severity\nx0z\n4yz\nx3z\nx4z\nSecond digit of the response code\nResponse code\nThird digit\nReturns only the line of the message if possible\nReturns only the first word of the message if possible\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nTests code equality\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTells if the response is positive\nTells if the response is positive\nServer response string (array of lines)\nCreates a new <code>Code</code> structure\nCreates a new <code>Response</code>\nFirst digit of the response code\nAn error returned by the stub transport\nThis transport logs messages and always returns the given …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn all logged messages sent using <code>Transport::send_raw</code>\nCreates a new transport that always returns the given …\nCreates a new transport that always returns an error\nCreates a new transport that always returns a success …")