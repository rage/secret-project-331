searchState.loadedDescShard("normpath", 0, "This crate provides methods to normalize paths in the …\nA borrowed path that has a prefix on Windows.\nAn owned path that has a prefix on Windows.\nAdditional methods added to <code>Path</code>.\nReturns a reference to the wrapped path as a platform …\nReturns a reference to the wrapped path.\nEquivalent to <code>Path::canonicalize</code>.\nEquivalent to <code>Path::components</code>.\nEquivalent to <code>Path::ends_with</code>.\nThe error types defined by this crate.\nEquivalent to <code>Path::exists</code>.\nExpands <code>self</code> from its short form, if the convention exists …\nEquivalent to <code>PathExt::expand</code>.\nEquivalent to <code>Path::extension</code>.\nEquivalent to <code>Path::file_name</code>.\nEquivalent to <code>Path::file_stem</code>.\nReturns the argument unchanged.\nEquivalent to <code>Path::has_root</code>.\nCalls <code>U::from(self)</code>.\nReturns the wrapped path as a platform string.\nReturns the wrapped path.\nEquivalent to <code>Path::is_absolute</code>.\nEquivalent to <code>Path::is_dir</code>.\nEquivalent to <code>Path::is_file</code>.\nEquivalent to <code>Path::is_relative</code>.\nEquivalent to <code>Path::is_symlink</code>.\nAn improved version of <code>Path::join</code> that handles more edge …\nEquivalent to <code>Path::metadata</code>.\nCreates a new base path.\nEquivalent to <code>BasePath::new</code> but returns an owned path.\nNormalizes <code>self</code> relative to the current directory.\nEquivalent to <code>PathExt::normalize</code>.\nEquivalent to <code>normalize</code> but does not access the file …\nEquivalent to <code>PathExt::normalize_virtually</code>.\nReturns this path without its last component.\nEquivalent to <code>Path::parent</code>.\nEquivalent to <code>BasePath::parent</code> but modifies <code>self</code> in place.\nEquivalent to <code>PathBuf::pop</code>.\nEquivalent to <code>BasePath::join</code> but modifies <code>self</code> in place.\nEquivalent to <code>Path::read_dir</code>.\nEquivalent to <code>Path::read_link</code>.\nShortens <code>self</code> from its expanded form, if the convention …\nEquivalent to <code>PathExt::shorten</code>.\nEquivalent to <code>Path::starts_with</code>.\nEquivalent to <code>Path::symlink_metadata</code>.\nEquivalent to <code>Path::try_exists</code>.\nCreates a new base path.\nEquivalent to <code>BasePath::try_new</code> but returns an owned path.\nThe error returned when <code>BasePathBuf::try_new</code> is given a …\nThe error returned when <code>BasePath::try_new</code> is given a path …\nThe error returned when <code>BasePath::parent</code> cannot remove the …\nReturns a reference to the path that caused this error.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the path that caused this error.")