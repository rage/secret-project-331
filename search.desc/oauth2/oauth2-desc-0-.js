searchState.loadedDescShard("oauth2", 0, "An extensible, strongly-typed implementation of OAuth2 (…\nThe authorization request was denied.\nAccess token returned by the token endpoint and used to …\nA representation of an <code>AccessToken</code> suitable for use with …\nAn asynchronous (future-based) HTTP client.\nIndicates whether requests to the authorization server …\nURL of the authorization server’s authorization endpoint.\nAuthorization code returned from the authorization …\nThe authorization request is still pending as the end user …\nA request to the authorization endpoint\nA Basic response type\nThe authorization server responded with some other error …\nThe client_id and client_secret will be included using the …\nStores the configuration for an OAuth2 client.\nA request to exchange client credentials for an access …\nClient identifier issued to the client during the …\nClient password issued to the client during the …\nA request to exchange an authorization code for an access …\nThere was a problem configuring the request.\nValue used for CSRF protection via the <code>state</code> parameter.\nThe request for a device access token from the …\nThe request for a set of verification codes from the …\nStandard OAuth2 device authorization response.\nURL of the client’s device authorization endpoint.\nDevice code returned by the device authorization endpoint …\nError response specialization for device code OAuth2 …\nBasic access token error types.\nEmpty (default) extra token fields.\nEmpty (default) extra token fields.\nURL of the end-user verification URI on the authorization …\nTypestate indicating that an endpoint may have been set …\nTypestate indicating that an endpoint has not been set and …\nTypestate indicating that an endpoint has been set and is …\nTypestate base trait indicating whether an endpoint has …\nError type returned by HTTP client.\nError type returned by HTTP client.\nServer Error Response\nError types enum.\nThe “device_code” has expired, and the device …\nTrait for adding extra fields to the …\nTrait for adding extra fields to the <code>TokenResponse</code>.\nFuture type returned by HTTP client.\nNon-reqwest HTTP error.\nError type returned by built-in HTTP clients when requests …\nAn HTTP request.\nAn HTTP response.\nThe endpoint URL to be contacted MUST be HTTPS.\nA request to introspect an access token.\nURL of the client’s RFC 7662 OAuth 2.0 Token …\nI/O error.\nThe endpoint URL is not set.\nSome other type of error occurred (e.g., an unexpected …\nOther error.\nFailed to parse server response. Parse errors may occur …\nA request to exchange resource owner credentials for an …\nCode Challenge used for PKCE protection via the …\nCode Challenge Method used for PKCE protection via the …\nCode Verifier used for PKCE protection via the …\nURL of the client’s redirection endpoint.\nRefresh token used to obtain a new access token (if …\nA representation of an <code>RefreshToken</code> suitable for use with …\nA request to exchange a refresh token for an access token.\nAn error occurred while sending the request or receiving …\nThe client_id and client_secret (if set) will be included …\nError encountered while requesting access token.\nError returned by reqwest crate.\nResource owner’s password used directly as an …\nResource owner’s username used directly as an …\nAuthorization endpoint response (grant) type defined in …\nA revocable token.\nOAuth 2.0 Token Revocation error response types.\nA request to revoke a token via an <code>RFC 7009</code> compatible …\nURL of the authorization server’s RFC 7009 token …\nAccess token scope, as defined by the authorization server.\nError response returned by authorization server. Contains …\nA variant of “authorization_pending”, the …\nStandard implementation of DeviceAuthorizationResponse …\nError response returned by server after requesting an …\nA token representation usable with authorization servers …\nStandard OAuth2 token introspection response.\nStandard OAuth2 token response.\nA synchronous (blocking) HTTP client.\nCommon methods shared by all OAuth2 token introspection …\nCommon methods shared by all OAuth2 token implementations.\nType of OAuth2 access token.\nType of OAuth2 access token included in this response.\nType of OAuth2 access token included in this response.\nURL of the authorization server’s token endpoint.\nThe authorization server does not support the revocation …\nUser code returned by the device authorization endpoint …\nVerification URI returned by the device authorization …\nREQUIRED. The access token issued by the authorization …\nREQUIRED. The access token issued by the authorization …\nREQUIRED.  Boolean indicator of whether or not the …\nAppends an extra param to the authorization URL.\nAppends an extra param to the token request.\nAppends an extra param to the token request.\nAppends an extra param to the token introspection request.\nAppends an extra param to the token revocation request.\nAppends an extra param to the token request.\nAppends an extra param to the token request.\nAppends an extra param to the token request.\nAppends an extra param to the token request.\nAppends a new scope to the authorization URL.\nAppends a new scope to the token request.\nAppends a new scope to the token request.\nAppends a new scope to the token request.\nAppends a new scope to the token request.\nAppends a collection of scopes to the token request.\nAppends a collection of scopes to the token request.\nAppends a collection of scopes to the token request.\nAppends a collection of scopes to the token request.\nAppends a collection of scopes to the token request.\nReturns the PKCE code challenge as a string.\nOPTIONAL.  Service-specific string identifier or list of …\nReturn the type of client authentication used for …\nReturn the authorization endpoint.\nReturn the authorization endpoint.\nGenerate an authorization URL for a new authorization …\nGenerate an authorization URL for a new authorization …\nBasic OAuth2 implementation with no extensions (RFC 6749).\nPerform a single HTTP request.\nPerform a single HTTP request.\nOPTIONAL.  Client identifier for the OAuth 2.0 client that …\nReturn the Client ID.\nReturn the RFC 8628 device authorization endpoint used for …\nReturn the RFC 8628 device authorization endpoint used for …\nThe device verification code.\nREQUIRED. A single ASCII error code deserialized to the …\nOPTIONAL. Human-readable ASCII text providing additional …\nOPTIONAL. URI identifying a human-readable web page with …\nRequest an access token using the Client Credentials Flow.\nRequest an access token using the Client Credentials Flow.\nExchange a code returned during the Authorization Code Flow\nExchange a code returned during the Authorization Code Flow\nExchange an RFC 8628 Device Authorization Response …\nExchange an RFC 8628 Device Authorization Response …\nBegin the RFC 8628 Device Authorization Flow.\nBegin the RFC 8628 Device Authorization Flow and retrieve …\nRequest an access token using the Resource Owner Password …\nRequest an access token using the Resource Owner Password …\nExchange a refresh token for an access token.\nExchange a refresh token for an access token.\nOPTIONAL.  Integer timestamp, measured in the number of …\nRECOMMENDED. The lifetime in seconds of the access token. …\nThe lifetime in seconds of the “device_code” and “…\nRECOMMENDED. The lifetime in seconds of the access token. …\nAny extra fields returned on the response.\nExtra fields defined by the client application.\nExtra fields defined by the client application.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerate a SHA-256 PKCE code challenge from the supplied …\nCreate a new <code>AuthUrl</code> from a <code>Url</code> to wrap a URL.\nCreate a new <code>TokenUrl</code> from a <code>Url</code> to wrap a URL.\nCreate a new <code>RedirectUrl</code> from a <code>Url</code> to wrap a URL.\nCreate a new <code>IntrospectionUrl</code> from a <code>Url</code> to wrap a URL.\nCreate a new <code>RevocationUrl</code> from a <code>Url</code> to wrap a URL.\nCreate a new <code>DeviceAuthorizationUrl</code> from a <code>Url</code> to wrap a …\nCreate a new <code>EndUserVerificationUrl</code> from a <code>Url</code> to wrap a …\nHelper methods used by OAuth2 implementations/extensions.\nPublic re-exports of types used for HTTP client interfaces.\nOPTIONAL.  Integer timestamp, measured in the number of …\nThe minimum amount of time in seconds that the client …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the secret contained within this <code>PkceCodeVerifier</code>.\nGet the secret contained within this <code>ClientSecret</code>.\nGet the secret contained within this <code>CsrfToken</code>.\nGet the secret contained within this <code>AuthorizationCode</code>.\nGet the secret contained within this <code>RefreshToken</code>.\nGet the secret contained within this <code>AccessToken</code>.\nGet the secret contained within this <code>ResourceOwnerPassword</code>.\nGet the secret contained within this <code>DeviceCode</code>.\nGet the secret contained within this …\nGet the secret contained within this <code>UserCode</code>.\nRetrieve metadata for an access token using the <code>RFC 7662</code> …\nRetrieve metadata for an access token using the <code>RFC 7662</code> …\nReturn the RFC 7662 introspection endpoint.\nReturn the RFC 7662 introspection endpoint.\nOPTIONAL.  String representing the issuer of this token, as\nOPTIONAL.  String identifier for the token, as defined in …\nReturns the PKCE code challenge method as a string.\nOPTIONAL.  Integer timestamp, measured in the number of …\nInitializes an OAuth2 client with the specified client ID.\nInstantiate a new <code>ErrorResponse</code>.\nInstantiate a new OAuth2 token introspection response.\nInstantiate a new OAuth2 token response.\nCreate a new <code>ClientId</code> to wrap the given <code>String</code>.\nCreate a new <code>AuthUrl</code> from a <code>String</code> to wrap a URL.\nCreate a new <code>TokenUrl</code> from a <code>String</code> to wrap a URL.\nCreate a new <code>RedirectUrl</code> from a <code>String</code> to wrap a URL.\nCreate a new <code>IntrospectionUrl</code> from a <code>String</code> to wrap a URL.\nCreate a new <code>RevocationUrl</code> from a <code>String</code> to wrap a URL.\nCreate a new <code>DeviceAuthorizationUrl</code> from a <code>String</code> to wrap …\nCreate a new <code>EndUserVerificationUrl</code> from a <code>String</code> to wrap …\nCreate a new <code>ResponseType</code> to wrap the given <code>String</code>.\nCreate a new <code>ResourceOwnerUsername</code> to wrap the given <code>String</code>…\nCreate a new <code>Scope</code> to wrap the given <code>String</code>.\nCreate a new <code>PkceCodeChallengeMethod</code> to wrap the given …\nCreate a new <code>PkceCodeVerifier</code> to wrap the given <code>String</code>.\nCreate a new <code>ClientSecret</code> to wrap the given <code>String</code>.\nCreate a new <code>CsrfToken</code> to wrap the given <code>String</code>.\nCreate a new <code>AuthorizationCode</code> to wrap the given <code>String</code>.\nCreate a new <code>RefreshToken</code> to wrap the given <code>String</code>.\nCreate a new <code>AccessToken</code> to wrap the given <code>String</code>.\nCreate a new <code>ResourceOwnerPassword</code> to wrap the given <code>String</code>…\nCreate a new <code>DeviceCode</code> to wrap the given <code>String</code>.\nCreate a new <code>VerificationUriComplete</code> to wrap the given …\nCreate a new <code>UserCode</code> to wrap the given <code>String</code>.\nGenerate a new random, base64-encoded 128-bit CSRF token.\nGenerate a new random, base64-encoded CSRF token of the …\nGenerate a new random, base64-encoded SHA-256 PKCE code.\nGenerate a new random, base64-encoded SHA-256 PKCE …\nReturn the redirect URL used by the authorization endpoint.\nOPTIONAL. The refresh token, which can be used to obtain …\nOPTIONAL. The refresh token, which can be used to obtain …\nSynchronously sends the request to the authorization …\nSynchronously polls the authorization server for a …\nSynchronously sends the request to the authorization …\nSynchronously sends the request to the authorization …\nSynchronously sends the request to the authorization …\nSynchronously sends the request to the authorization …\nSynchronously sends the request to the authorization …\nSynchronously sends the request to the authorization …\nAsynchronously sends the request to the authorization …\nAsynchronously sends the request to the authorization …\nAsynchronously sends the request to the authorization …\nAsynchronously sends the request to the authorization …\nAsynchronously sends the request to the authorization …\nAsynchronously sends the request to the authorization …\nAsynchronously sends the request to the authorization …\nAsynchronously sends the request to the authorization …\nReturn the RFC 7009 revocation endpoint.\nReturn the RFC 7009 revocation endpoint.\nRevoke an access or refresh token using the RFC 7009 …\nRevoke an access or refresh token using the RFC 7009 …\nOPTIONAL.  A JSON string containing a space-separated list …\nOPTIONAL, if identical to the scope requested by the …\nOPTIONAL, if identical to the scope requested by the …\nThe actual token value to be revoked.\nGet the secret contained within this <code>PkceCodeVerifier</code>.\nGet the secret contained within this <code>ClientSecret</code>.\nGet the secret contained within this <code>CsrfToken</code>.\nGet the secret contained within this <code>AuthorizationCode</code>.\nGet the secret contained within this <code>RefreshToken</code>.\nGet the secret contained within this <code>AccessToken</code>.\nGet the secret contained within this <code>ResourceOwnerPassword</code>.\nGet the secret contained within this <code>DeviceCode</code>.\nGet the secret contained within this …\nGet the secret contained within this <code>UserCode</code>.\nSet the <code>access_token</code> field.\nSets the <code>set_active</code> field.\nSets the <code>set_aud</code> field.\nSet the type of client authentication used for …\nSet the authorization endpoint.\nConditionally set the authorization endpoint.\nSets the <code>set_client_id</code> field.\nSet the client secret.\nSet the RFC 8628 device authorization endpoint used for …\nConditionally set the RFC 8628 device authorization …\nSets the <code>set_exp</code> field.\nSet the <code>expires_in</code> field.\nSets the <code>set_extra_fields</code> field.\nSet the extra fields defined by the client application.\nSets the <code>set_iat</code> field.\nSet the RFC 7662 introspection endpoint.\nConditionally set the RFC 7662 introspection endpoint.\nSets the <code>set_iss</code> field.\nSets the <code>set_jti</code> field.\nSets the upper limit of the sleep interval to use for …\nSets the <code>set_nbf</code> field.\nEnables the use of Proof Key for Code Exchange (PKCE).\nCompletes the Proof Key for Code Exchange (PKCE) protocol …\nSet the redirect URL used by the authorization endpoint.\nOverrides the <code>redirect_url</code> to the one specified.\nOverrides the <code>redirect_url</code> to the one specified.\nSet the <code>refresh_token</code> field.\nEnables custom flows other than the <code>code</code> and <code>token</code> …\nSet the RFC 7009 revocation endpoint.\nConditionally set the RFC 7009 revocation endpoint.\nSets the <code>set_scopes</code> field.\nSet the <code>scopes</code> field.\nSets the <code>set_sub</code> field.\nSpecifies a function for returning the current time.\nSets the <code>set_token_type</code> field.\nSet the <code>token_type</code> field.\nSets the optional token_type_hint parameter.\nSet the token endpoint.\nConditionally set the token endpoint.\nSets the <code>set_username</code> field.\nOPTIONAL.  Subject of the token, as defined in JWT RFC7519.\nOPTIONAL.  Type of the token as defined in Section 5.1 of …\nREQUIRED. The type of the token issued as described in …\nREQUIRED. The type of the token issued as described in …\nReturn the token endpoint.\nReturn the token endpoint.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\nIndicates the type of the token being revoked, as defined …\nIndicates the type of the token to be revoked, as defined …\nReturns the full authorization URL and CSRF state for this …\nReturn this <code>AuthUrl</code> as a parsed <code>Url</code>.\nReturn this <code>TokenUrl</code> as a parsed <code>Url</code>.\nReturn this <code>RedirectUrl</code> as a parsed <code>Url</code>.\nReturn this <code>IntrospectionUrl</code> as a parsed <code>Url</code>.\nReturn this <code>RevocationUrl</code> as a parsed <code>Url</code>.\nReturn this <code>DeviceAuthorizationUrl</code> as a parsed <code>Url</code>.\nReturn this <code>EndUserVerificationUrl</code> as a parsed <code>Url</code>.\nEnables the Implicit Grant flow.\nThe end-user verification code.\nOPTIONAL.  Human-readable identifier for the resource …\nThe end-user verification URI on the authorization The URI …\nA verification URI that includes the “user_code” (or …\nBasic OAuth2 client specialization, suitable for most …\nError response specialization for basic OAuth2 …\nBasic access token error types.\nToken error specialization for basic OAuth2 implementation.\nRevocation error response specialization for basic OAuth2 …\nBasic OAuth2 token introspection response.\nBasic OAuth2 token response.\nBasic OAuth2 authorization token types.\nBearer token (OAuth 2.0 Bearer Tokens - RFC 6750).\nAn extension not defined by RFC 6749.\nAn extension not defined by RFC 6749.\nClient authentication failed (e.g., unknown client, no …\nThe provided authorization grant (e.g., authorization …\nThe request is missing a required parameter, includes an …\nThe requested scope is invalid, unknown, malformed, or …\nMAC (OAuth 2.0 Message Authentication Code (MAC) Tokens).\nSome other type of error occurred (e.g., an unexpected …\nFailed to parse server response. Parse errors may occur …\nAn error occurred while sending the request or receiving …\nError response returned by authorization server. Contains …\nThe authenticated client is not authorized to use this …\nThe authorization grant type is not supported by the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>ToString::to_string</code>, but without panic on OOM.\nDeserializes a string or array of strings into an array of …\nSerde space-delimited string deserializer for a <code>Vec&lt;String&gt;</code>…\nSerde case-insensitive deserializer for an untagged <code>enum</code>.\nSerde space-delimited string serializer for an …\nSerde string serializer for an enum.")