searchState.loadedDescShard("oauth2", 0, "An extensible, strongly-typed implementation of OAuth2 (…\nAccess token returned by the token endpoint and used to …\nIndicates whether requests to the authorization server …\nURL of the authorization server’s authorization endpoint.\nAuthorization code returned from the authorization …\nA request to the authorization endpoint\nThe client_id and client_secret will be included using the …\nStores the configuration for an OAuth2 client.\nA request to exchange client credentials for an access …\nClient identifier issued to the client during the …\nClient password issued to the client during the …\nA request to exchange an authorization code for an access …\nThere was a problem configuring the request.\nValue used for CSRF protection via the <code>state</code> parameter.\nThe request for an device access token from the …\nThe request for a set of verification codes from the …\nURL of the client’s device authorization endpoint.\nDevice code returned by the device authorization endpoint …\nEmpty (default) extra token fields.\nURL of the end-user verification URI on the authorization …\nServer Error Response\nError types enum.\nTrait for adding extra fields to the <code>TokenResponse</code>.\nAn HTTP request.\nAn HTTP response.\nThe endpoint URL to be contacted MUST be HTTPS.\nA request to introspect an access token.\nURL of the client’s RFC 7662 OAuth 2.0 Token …\nThe endpoint URL tp be contacted is missing.\nSome other type of error occurred (e.g., an unexpected …\nFailed to parse server response. Parse errors may occur …\nA request to exchange resource owner credentials for an …\nCode Challenge used for PKCE protection via the …\nCode Challenge Method used for PKCE protection via the …\nCode Verifier used for PKCE protection via the …\nURL of the client’s redirection endpoint.\nRefresh token used to obtain a new access token (if …\nA request to exchange a refresh token for an access token.\nAn error occurred while sending the request or receiving …\nThe client_id and client_secret (if set) will be included …\nError encountered while requesting access token.\nResource owner’s password used directly as an …\nResource owner’s username used directly as an …\nAuthorization endpoint response (grant) type defined in …\nA request to revoke a token via an <code>RFC 7009</code> compatible …\nURL of the authorization server’s RFC 7009 token …\nAccess token scope, as defined by the authorization server.\nError response returned by authorization server. Contains …\nError response returned by server after requesting an …\nStandard OAuth2 token introspection response.\nStandard OAuth2 token response.\nCommon methods shared by all OAuth2 token introspection …\nCommon methods shared by all OAuth2 token implementations.\nTrait for OAuth2 access tokens.\nURL of the authorization server’s token endpoint.\nUser code returned by the device authorization endpoint …\nVerification URI returned by the device authorization …\nREQUIRED. The access token issued by the authorization …\nREQUIRED. The access token issued by the authorization …\nREQUIRED.  Boolean indicator of whether or not the …\nAppends an extra param to the authorization URL.\nAppends an extra param to the token request.\nAppends an extra param to the token request.\nAppends an extra param to the token request.\nAppends an extra param to the token request.\nAppends an extra param to the token introspection request.\nAppends an extra param to the token revocation request.\nAppends an extra param to the token request.\nAppends an extra param to the token request.\nAppends a new scope to the authorization URL.\nAppends a new scope to the token request.\nAppends a new scope to the token request.\nAppends a new scope to the token request.\nAppends a new scope to the token request.\nAppends a collection of scopes to the token request.\nAppends a collection of scopes to the token request.\nAppends a collection of scopes to the token request.\nAppends a collection of scopes to the token request.\nAppends a collection of scopes to the token request.\nReturns the PKCE code challenge as a string.\nOPTIONAL.  Service-specific string identifier or list of …\nReturns the type of client authentication used for …\nReturns the authorization endpoint.\nGenerates an authorization URL for a new authorization …\nBasic OAuth2 implementation with no extensions (RFC 6749).\nHTTP request body (typically for POST requests only).\nHTTP response body returned by the server.\nOPTIONAL.  Client identifier for the OAuth 2.0 client that …\nReturns the Client ID.\nReturns the the device authorization URL used by the …\nDevice Code Flow OAuth2 implementation (RFC 8628).\nREQUIRED. A single ASCII error code deserialized to the …\nOPTIONAL. Human-readable ASCII text providing additional …\nOPTIONAL. URI identifying a human-readable web page with …\nRequests an access token for the <em>client credentials</em> grant …\nExchanges a code produced by a successful authorization …\nPerform a device access token request as per …\nPerform a device authorization request as per …\nRequests an access token for the <em>password</em> grant type.\nExchanges a refresh token for an access token\nOPTIONAL.  Integer timestamp, measured in the number of …\nRECOMMENDED. The lifetime in seconds of the access token. …\nRECOMMENDED. The lifetime in seconds of the access token. …\nExtra fields defined by the client application.\nExtra fields defined by the client application.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerate a SHA-256 PKCE code challenge from the supplied …\nCreate a new <code>AuthUrl</code> from a <code>Url</code> to wrap a URL.\nCreate a new <code>TokenUrl</code> from a <code>Url</code> to wrap a URL.\nCreate a new <code>RedirectUrl</code> from a <code>Url</code> to wrap a URL.\nCreate a new <code>IntrospectionUrl</code> from a <code>Url</code> to wrap a URL.\nCreate a new <code>RevocationUrl</code> from a <code>Url</code> to wrap a URL.\nCreate a new <code>DeviceAuthorizationUrl</code> from a <code>Url</code> to wrap a …\nCreate a new <code>EndUserVerificationUrl</code> from a <code>Url</code> to wrap a …\nHTTP request headers to send.\nHTTP response headers returned by the server.\nHelper methods used by OAuth2 implementations/extensions.\nPublic re-exports of types used for HTTP client interfaces.\nOPTIONAL.  Integer timestamp, measured in the number of …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nQuery the authorization server <code>RFC 7662 compatible</code> …\nReturns the introspection URL for contacting the (RFC 7662)\nOPTIONAL.  String representing the issuer of this token, as\nOPTIONAL.  String identifier for the token, as defined in …\nReturns the PKCE code challenge method as a string.\nHTTP request method for this request.\nOPTIONAL.  Integer timestamp, measured in the number of …\nCreate a new <code>ClientId</code> to wrap the given <code>String</code>.\nCreate a new <code>AuthUrl</code> from a <code>String</code> to wrap a URL.\nCreate a new <code>TokenUrl</code> from a <code>String</code> to wrap a URL.\nCreate a new <code>RedirectUrl</code> from a <code>String</code> to wrap a URL.\nCreate a new <code>IntrospectionUrl</code> from a <code>String</code> to wrap a URL.\nCreate a new <code>RevocationUrl</code> from a <code>String</code> to wrap a URL.\nCreate a new <code>DeviceAuthorizationUrl</code> from a <code>String</code> to wrap …\nCreate a new <code>EndUserVerificationUrl</code> from a <code>String</code> to wrap …\nCreate a new <code>ResponseType</code> to wrap the given <code>String</code>.\nCreate a new <code>ResourceOwnerUsername</code> to wrap the given <code>String</code>…\nCreate a new <code>Scope</code> to wrap the given <code>String</code>.\nCreate a new <code>PkceCodeChallengeMethod</code> to wrap the given …\nCreate a new <code>PkceCodeVerifier</code> to wrap the given <code>String</code>.\nCreate a new <code>ClientSecret</code> to wrap the given <code>String</code>.\nCreate a new <code>CsrfToken</code> to wrap the given <code>String</code>.\nCreate a new <code>AuthorizationCode</code> to wrap the given <code>String</code>.\nCreate a new <code>RefreshToken</code> to wrap the given <code>String</code>.\nCreate a new <code>AccessToken</code> to wrap the given <code>String</code>.\nCreate a new <code>ResourceOwnerPassword</code> to wrap the given <code>String</code>…\nCreate a new <code>DeviceCode</code> to wrap the given <code>String</code>.\nCreate a new <code>VerificationUriComplete</code> to wrap the given …\nCreate a new <code>UserCode</code> to wrap the given <code>String</code>.\nInitializes an OAuth2 client with the fields common to …\nInstantiate a new OAuth2 token response.\nInstantiate a new OAuth2 token introspection response.\nInstantiate a new <code>ErrorResponse</code>.\nGenerate a new random, base64-encoded 128-bit CSRF token.\nGenerate a new random, base64-encoded CSRF token of the …\nGenerate a new random, base64-encoded SHA-256 PKCE code.\nGenerate a new random, base64-encoded SHA-256 PKCE …\nReturns the redirect URL used by the authorization …\nOPTIONAL. The refresh token, which can be used to obtain …\nOPTIONAL. The refresh token, which can be used to obtain …\nSynchronously sends the request to the authorization …\nSynchronously sends the request to the authorization …\nSynchronously sends the request to the authorization …\nSynchronously sends the request to the authorization …\nSynchronously sends the request to the authorization …\nSynchronously sends the request to the authorization …\nSynchronously sends the request to the authorization …\nSynchronously polls the authorization server for a …\nAsynchronously sends the request to the authorization …\nAsynchronously sends the request to the authorization …\nAsynchronously sends the request to the authorization …\nAsynchronously sends the request to the authorization …\nAsynchronously sends the request to the authorization …\nAsynchronously sends the request to the authorization …\nAsynchronously sends the request to the authorization …\nAsynchronously sends the request to the authorization …\nHTTP client backed by the reqwest crate. Requires “…\nOAuth 2.0 Token Revocation implementation (RFC 7009).\nReturns the revocation URL for contacting the revocation …\nAttempts to revoke the given previously received token …\nOPTIONAL, if identical to the scope requested by the …\nOPTIONAL.  A JSON string containing a space-separated list …\nOPTIONAL, if identical to the scope requested by the …\nGet the secret contained within this <code>PkceCodeVerifier</code>.\nGet the secret contained within this <code>ClientSecret</code>.\nGet the secret contained within this <code>CsrfToken</code>.\nGet the secret contained within this <code>AuthorizationCode</code>.\nGet the secret contained within this <code>RefreshToken</code>.\nGet the secret contained within this <code>AccessToken</code>.\nGet the secret contained within this <code>ResourceOwnerPassword</code>.\nGet the secret contained within this <code>DeviceCode</code>.\nGet the secret contained within this …\nGet the secret contained within this <code>UserCode</code>.\nSet the <code>access_token</code> field.\nSets the <code>set_active</code> field.\nSets the <code>set_aud</code> field.\nConfigures the type of client authentication used for …\nSets the <code>set_client_id</code> field.\nSets the the device authorization URL used by the device …\nSets the <code>set_exp</code> field.\nSet the <code>expires_in</code> field.\nSet the extra fields defined by the client application.\nSets the <code>set_extra_fields</code> field.\nSets the <code>set_iat</code> field.\nSets the introspection URL for contacting the (RFC 7662) …\nSets the <code>set_iss</code> field.\nSets the <code>set_jti</code> field.\nSets the upper limit of the sleep interval to use for …\nSets the <code>set_nbf</code> field.\nEnables the use of Proof Key for Code Exchange (PKCE).\nCompletes the Proof Key for Code Exchange (PKCE) protocol …\nSets the redirect URL used by the authorization endpoint.\nOverrides the <code>redirect_url</code> to the one specified.\nOverrides the <code>redirect_url</code> to the one specified.\nSet the <code>refresh_token</code> field.\nEnables custom flows other than the <code>code</code> and <code>token</code> …\nSets the revocation URL for contacting the revocation …\nSet the <code>scopes</code> field.\nSets the <code>set_scopes</code> field.\nSets the <code>set_sub</code> field.\nSpecifies a function for returning the current time.\nSet the <code>token_type</code> field.\nSets the <code>set_token_type</code> field.\nSets the optional token_type_hint parameter.\nSets the <code>set_username</code> field.\nHTTP status code returned by the server.\nOPTIONAL.  Subject of the token, as defined in JWT RFC7519.\nREQUIRED. The type of the token issued as described in …\nOPTIONAL.  Type of the token as defined in Section 5.1 of …\nREQUIRED. The type of the token issued as described in …\nReturns the token endpoint.\nReturn this <code>AuthUrl</code> as a parsed <code>Url</code>.\nReturn this <code>TokenUrl</code> as a parsed <code>Url</code>.\nReturn this <code>RedirectUrl</code> as a parsed <code>Url</code>.\nReturn this <code>IntrospectionUrl</code> as a parsed <code>Url</code>.\nReturn this <code>RevocationUrl</code> as a parsed <code>Url</code>.\nReturn this <code>DeviceAuthorizationUrl</code> as a parsed <code>Url</code>.\nReturn this <code>EndUserVerificationUrl</code> as a parsed <code>Url</code>.\nReturns the full authorization URL and CSRF state for this …\nURL to which the HTTP request is being made.\nEnables the Implicit Grant flow.\nOPTIONAL.  Human-readable identifier for the resource …\nBasic OAuth2 client specialization, suitable for most …\nError response specialization for basic OAuth2 …\nBasic access token error types.\nToken error specialization for basic OAuth2 implementation.\nRevocation error response specialization for basic OAuth2 …\nBasic OAuth2 token introspection response.\nBasic OAuth2 token response.\nBasic OAuth2 authorization token types.\nBearer token (OAuth 2.0 Bearer Tokens - RFC 6750).\nAn extension not defined by RFC 6749.\nAn extension not defined by RFC 6749.\nClient authentication failed (e.g., unknown client, no …\nThe provided authorization grant (e.g., authorization …\nThe request is missing a required parameter, includes an …\nThe requested scope is invalid, unknown, malformed, or …\nMAC (OAuth 2.0 Message Authentication Code (MAC) Tokens).\nSome other type of error occurred (e.g., an unexpected …\nFailed to parse server response. Parse errors may occur …\nAn error occurred while sending the request or receiving …\nError response returned by authorization server. Contains …\nThe authenticated client is not authorized to use this …\nThe authorization grant type is not supported by the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe authorization request was denied.\nThe authorization request is still pending as the end user …\nA Basic response type\nStandard OAuth2 device authorization response.\nError response specialization for device code OAuth2 …\nBasic access token error types.\nEmpty (default) extra token fields.\nThe “device_code” has expired, and the device …\nTrait for adding extra fields to the …\nA variant of “authorization_pending”, the …\nStandard implementation of DeviceAuthorizationResponse …\nThe device verification code.\nThe lifetime in seconds of the “device_code” and “…\nAny extra fields returned on the response.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe minimum amount of time in seconds that the client …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe end-user verification code.\nThe end-user verification URI on the authorization The URI …\nA verification URI that includes the “user_code” (or …\nDeserializes a string or array of strings into an array of …\nSerde space-delimited string deserializer for a <code>Vec&lt;String&gt;</code>…\nSerde case-insensitive deserializer for an untagged <code>enum</code>.\nSerde space-delimited string serializer for an …\nSerde string serializer for an enum. &lt; Source: …\nError type returned by failed reqwest async HTTP requests.\nError type returned by failed reqwest HTTP requests.\nNon-reqwest HTTP error.\nNon-reqwest HTTP error.\nNon-reqwest HTTP error.\nError type returned by failed reqwest blocking HTTP …\nI/O error.\nI/O error.\nI/O error.\nOther error.\nOther error.\nOther error.\nError returned by reqwest crate.\nError returned by reqwest crate.\nError returned by reqwest crate.\nAsynchronous HTTP client.\nReturns the argument unchanged.\nSynchronous HTTP client.\nCalls <code>U::from(self)</code>.\nA representation of an <code>AccessToken</code> suitable for use with …\nThe authorization server responded with some other error …\nA representation of an <code>RefreshToken</code> suitable for use with …\nA revocable token.\nOAuth 2.0 Token Revocation error response types.\nA token representation usable with authorization servers …\nThe authorization server does not support the revocation …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe actual token value to be revoked.\nIndicates the type of the token being revoked, as defined …\nIndicates the type of the token to be revoked, as defined …")