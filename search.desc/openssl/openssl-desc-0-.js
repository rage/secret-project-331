searchState.loadedDescShard("openssl", 0, "Bindings to OpenSSL\nLow level AES IGE and key wrapping functionality\nDefines the format of certificates\nBase64 encoding support.\nBigNum implementation\nSymmetric ciphers.\nThe symmetric encryption context.\nSMIME implementation using CMS\nInterface for processing OpenSSL configuration files.\nShared secret derivation.\nDiffie-Hellman key agreement.\nDigital Signatures\nElliptic Curve\nLow level Elliptic Curve Digital Signature Algorithm …\nMessage encryption.\nEnvelope encryption.\nErrors returned by OpenSSL library.\nMessage digest (hash) computation support.\nMessage digest algorithms.\nThe message digest context.\nUtilities to safely compare cryptographic values.\nA collection of numerical identifiers for OpenSSL objects.\nPKCS #12 archives.\nPublic/private key processing.\nThe asymmetric encryption context.\nUtilities for secure random number generation.\nRivest–Shamir–Adleman cryptosystem\nThe SHA family of hashes.\nMessage signatures.\nSSL/TLS support.\nHigh level interface to certain symmetric ciphers.\nBuild and version information.\nThe standard defining the format of public key …\nThe key used to encrypt or decrypt cipher blocks.\nProvides Error handling for parsing keys.\nPerforms AES IGE encryption or decryption\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPrepares a key for decryption.\nPrepares a key for encryption.\nUnwrap a key, according to RFC 3394\nWrap a key, according to RFC 3394\nSequence of bytes\nA reference to an <code>Asn1BitString</code>.\nAn ASN.1 enumerated.\nA reference to an <code>Asn1Enumerated</code>.\nNon-UTC representation of time\nReference to a <code>Asn1GeneralizedTime</code>\nNumeric representation\nA reference to an <code>Asn1Integer</code>.\nObject Identifier\nA reference to an <code>Asn1Object</code>.\nASN.1 OCTET STRING type\nA reference to an <code>Asn1OctetString</code>.\nPrimary ASN.1 type used by OpenSSL\nA reference to an <code>Asn1String</code>.\nTime storage and comparison\nReference to an <code>Asn1Time</code>\nThe type of an ASN.1 value.\nDifference between two ASN1 times.\nReturns the raw OpenSSL value represented by this type.\nReturn the string as an array of bytes.\nReturns the Asn1BitString as a slice.\nReturns the octet string as an array of bytes.\nReturn the OID as an DER encoded array of bytes. This is …\nConverts the ASN.1 underlying format to UTF8\nCompare two times\nDifference in days\nCreates a new time on specified interval in days from now\nFind difference between two times\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a bignum to an <code>Asn1Integer</code>.\nConstructs an <code>Asn1Type</code> from a raw OpenSSL value.\nCreates a new time corresponding to the specified ASN1 …\nConstructs an ASN.1 Object Identifier from a string …\nCreates a new time corresponding to the specified X509 …\nCreates a new time from the specified <code>time_t</code> value\nGet the value, if it fits in the required bounds.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDetermines if the string is empty.\nDetermines if the string is empty.\nDetermines if the string is empty.\nReturns the number of bytes in the string.\nReturns the number of bytes in the string.\nReturns the number of bytes in the octet string.\nCreates an Asn1OctetString from bytes\nReturns the NID associated with this OID.\nDifference in seconds.\nSets the ASN.1 value to the value of a signed 32-bit …\nConverts the integer to a <code>BigNum</code>.\nCreates a new Asn1Integer with the same value.\nDecodes a base64-encoded string to bytes.\nEncodes a slice of bytes to a base64 string.\nDynamically sized large number implementation\nTemporary storage for BigNums on the secure heap\nReference to <code>BigNumContext</code>\nReference to a <code>BigNum</code>\nThe most significant bit of the number may be 0.\nOptions for the most significant bits of a randomly …\nThe most significant bit of the number must be 1.\nThe most significant two bits of the number must be 1.\nAdds a <code>u32</code> to <code>self</code>.\nPlaces <code>a + b</code> in <code>self</code>.  <code>core::ops::Add</code> is also implemented …\nPlaces the result of <code>a / b</code> in <code>self</code>. The remainder is …\nPlaces the result of <code>a * b</code> in <code>self</code>. <code>core::ops::Mul</code> is also …\nPlaces the result of <code>a % b</code> in <code>self</code>.\nPlaces <code>a - b</code> in <code>self</code>. <code>core::ops::Sub</code> is also implemented …\nErases the memory used by this <code>BigNum</code>, resetting its value …\nClears bit <code>n</code>, setting it to 0. Equivalent to …\nCopies data from a slice overwriting what was in the …\nPlaces the result of <code>a / b</code> in <code>self</code> and <code>a % b</code> in <code>rem</code>.\nDivides <code>self</code> by a <code>u32</code>, returning the remainder.\nPlaces the result of <code>a^p</code> in <code>self</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a <code>BigNum</code> from a decimal string.\nCreates a <code>BigNum</code> from a hexadecimal string.\nCreates a new <code>BigNum</code> from an unsigned, big-endian encoded …\nCreates a new <code>BigNum</code> with the given value.\nPlaces the greatest common denominator of <code>a</code> and <code>b</code> in <code>self</code>.\nGenerates a prime number, placing it in <code>self</code>.\nReturns a constant used in IKE as defined in <code>RFC 2409</code>.  …\nReturns a constant used in IKE as defined in <code>RFC 2409</code>.  …\nReturns a constant used in IKE as defined in <code>RFC 3526</code>.  …\nReturns a constant used in IKE as defined in <code>RFC 3526</code>.  …\nReturns a constant used in IKE as defined in <code>RFC 3526</code>.  …\nReturns a constant used in IKE as defined in <code>RFC 3526</code>.  …\nReturns a constant used in IKE as defined in <code>RFC 3526</code>.  …\nReturns a constant used in IKE as defined in <code>RFC 3526</code>.  …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the <code>n</code>th bit of <code>self</code> is set to 1, <code>false</code> …\nReturns true if <code>self</code> is in const time mode.\nReturns <code>true</code> is <code>self</code> is even.\nReturns <code>true</code> if <code>self</code> is negative.\nReturns <code>true</code> is <code>self</code> is odd.\nChecks whether <code>self</code> is prime.\nChecks whether <code>self</code> is prime with optional trial division.\nReturns true if <code>self</code> was created with <code>BigNum::new_secure</code>.\nPlaces <code>a &lt;&lt; n</code> in <code>self</code>.  Equivalent to <code>a * 2 ^ n</code>.\nPlaces <code>a &lt;&lt; 1</code> in <code>self</code>.  Equivalent to <code>self * 2</code>.\nTruncates <code>self</code> to the lowest <code>n</code> bits.\nPlaces the result of <code>(a + b) mod m</code> in <code>self</code>.\nPlaces the result of <code>a^p mod m</code> in <code>self</code>.\nPlaces the inverse of <code>a</code> modulo <code>n</code> in <code>self</code>.\nPlaces the result of <code>(a * b) mod m</code> in <code>self</code>.\nPlaces the result of <code>a² mod m</code> in <code>self</code>.\nPlaces into <code>self</code> the modular square root of <code>a</code> such that …\nPlaces the result of <code>(a - b) mod m</code> in <code>self</code>.\nReturns the result of <code>self</code> modulo <code>w</code>.\nMultiplies a <code>u32</code> by <code>self</code>.\nReturns a new <code>BigNumContext</code>.\nCreates a new <code>BigNum</code> with the value 0.\nReturns a new secure <code>BigNumContext</code>.\nReturns a new secure <code>BigNum</code>.\nPlaces the result of <code>a mod m</code> in <code>self</code>.  As opposed to …\nReturns the number of significant bits in <code>self</code>.\nReturns the size of <code>self</code> in bytes. Implemented natively.\nThe cryptographically weak counterpart to <code>rand</code>.  Not …\nThe cryptographically weak counterpart to <code>rand_in_range</code>.\nGenerates a cryptographically strong pseudo-random <code>BigNum</code>, …\nPlaces a cryptographically-secure pseudo-random nonnegative\nPlaces <code>a &gt;&gt; n</code> in <code>self</code>. Equivalent to <code>a / 2 ^ n</code>.\nPlaces <code>a &gt;&gt; 1</code> in <code>self</code>. Equivalent to <code>self / 2</code>.\nSets bit <code>n</code>. Equivalent to <code>self |= (1 &lt;&lt; n)</code>.\nForce constant time computation on this value.\nSets the sign of <code>self</code>.  Pass true to set <code>self</code> to a …\nPlaces the result of <code>a²</code> in <code>self</code>.\nSubtracts a <code>u32</code> from <code>self</code>.\nReturns an <code>Asn1Integer</code> containing the value of <code>self</code>.\nReturns a decimal string representation of <code>self</code>.\nReturns a hexadecimal string representation of <code>self</code>.\nCreates a new BigNum with the same value.\nReturns a big-endian byte vector representation of the …\nReturns a big-endian byte vector representation of the …\nCompare the absolute values of <code>self</code> and <code>oth</code>.\nA symmetric cipher.\nA reference to a <code>Cipher</code>.\nRequires OpenSSL 1.1.0 or newer.\nRequires OpenSSL 1.0.2 or newer.\nRequires OpenSSL 1.1.0 or newer.\nRequires OpenSSL 1.1.0 or newer.\nRequires OpenSSL 1.0.2 or newer.\nRequires OpenSSL 1.1.0 or newer.\nRequires OpenSSL 1.1.0 or newer.\nRequires OpenSSL 1.0.2 or newer.\nRequires OpenSSL 1.1.0 or newer.\nReturns the block size of the cipher.\nFetches a cipher object corresponding to the specified …\nReturns the argument unchanged.\nReturns the argument unchanged.\nLooks up the cipher for a certain nid.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the length of the IV used with this cipher.\nReturns the length of keys used with this cipher.\nReturns the cipher’s Nid.\nA context object used to perform symmetric encryption …\nFlags for <code>EVP_CIPHER_CTX</code>.\nA reference to a <code>CipherCtx</code>.\nThe flag used to opt into AES key wrap ciphers.\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nReturns the block size of the context’s cipher.\nFinalizes the encryption or decryption process.\nFinalizes the encryption or decryption process.\nLike <code>Self::cipher_final</code> except that it appends output to a …\nWrites data into the context.\nLike <code>Self::cipher_update</code> except that it writes output into …\nWrites data into the context.\nLike <code>Self::cipher_update</code> except that it appends output to …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThis corresponds to <code>EVP_CIPHER_CTX_copy</code>.\nInitializes the context for decryption.\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nInitializes the context for encryption.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nReturns the length of the IV expected by this context.\nReturns the key length of the context’s cipher.\nCreates a new context.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nReturns the <code>num</code> parameter of the cipher.\nInitializes the context to perform envelope decryption.\nGenerates a random key based on the configured cipher.\nThe intersection of a source flags value with the …\nInitializes the context to perform envelope encryption.\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nSets the total length of plaintext data.\nSet ctx flags.\nSets the length of the IV expected by this context.\nSets the length of the key expected by the context.\nEnables or disables padding.\nSets the authentication tag for verification during …\nSets the length of the generated authentication tag.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nRetrieves the calculated authentication tag from the …\nReturns the length of the authentication tag expected by …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nHigh level CMS wrapper\nReference to <code>CMSContentInfo</code>\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nGiven the sender’s private key, <code>pkey</code> and the recipient’…\nGiven the sender’s private key, <code>pkey</code>, decrypt the data …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nGiven a certificate stack <code>certs</code>, data <code>data</code>, cipher <code>cipher</code> …\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nDeserializes a DER-encoded ContentInfo structure.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nDeserializes a PEM-encoded ContentInfo structure.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nGiven a signing cert <code>signcert</code>, private key <code>pkey</code>, a …\nParses a smime formatted <code>vec</code> of bytes into a <code>CmsContentInfo</code>…\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nSerializes this CmsContentInfo using DER.\nSerializes this CmsContentInfo using DER.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nVerify this CmsContentInfo’s signature, This will search …\nConvert to raw pointer.\nRetrieve handle to the default OpenSSL configuration file …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstruct from raw pointer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a configuration parser.\nA type used to derive a shared secret between two keys.\nDerives a shared secret between the two keys, writing it …\nA convenience function which derives a shared secret and …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the size of the shared secret.\nCreates a new <code>Deriver</code> using the provided private key.\nSets the peer key used for secret derivation.\nSets the peer key used for secret derivation along with …\nValidates DH parameters for correctness\nComputes a shared secret from the own private key and the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a DH instance based upon the given primes and …\nGenerates a public and a private key based on the DH …\nGenerates DH params based on the given <code>prime_len</code> and a …\nReturns the generator from the DH instance.\nRequires OpenSSL 1.0.2 or newer.\nRequires OpenSSL 1.0.2 or newer.\nRequires OpenSSL 1.0.2 or newer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDeserializes a DER-encoded PKCS#3 DHparameters structure.\nDeserializes a PEM-encoded PKCS#3 DHpararameters structure.\nSerializes the parameters into a DER-encoded PKCS#3 …\nSerializes the parameters into a PEM-encoded PKCS#3 …\nReturns the prime <code>p</code> from the DH instance.\nReturns the prime <code>q</code> from the DH instance.\nReturns the private key from the DH instance.\nReturns the public key from the DH instance.\nSets the public and private keys on the DH object.\nSets the private key on the DH object and recomputes the …\nSets the public key on the DH object.\nObject representing DSA keys.\nReference to <code>Dsa</code>.\nObject representing DSA signature.\nReference to a <code>DsaSig</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDecodes a DER-encoded DSA signature.\nCreates a DSA params based upon the given parameters.\nCreate a DSA key pair with the given parameters\nReturns a new <code>DsaSig</code> by setting the <code>r</code> and <code>s</code> values …\nCreate a new DSA key with only public components.\nReturns the DSA base parameter of <code>self</code>.\nGenerate a DSA key pair.\nGenerates a private key based on the DSA params.\nGenerates DSA params based on the given number of bits.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the DSA prime parameter of <code>self</code>.\nReturns a reference to the private key component of <code>self</code>.\nSerializes the private_key to a DER-encoded <code>DSAPrivateKey</code> …\nSerializes the private key to a PEM-encoded DSAPrivateKey …\nSerializes the private key to a PEM-encoded encrypted …\nReturns a reference to the public key component of <code>self</code>.\nDecodes a DER-encoded SubjectPublicKeyInfo structure …\nDecodes a PEM-encoded SubjectPublicKeyInfo structure …\nSerializes the public key into a DER-encoded …\nSerializes the public key into a PEM-encoded …\nReturns the DSA sub-prime parameter of <code>self</code>.\nReturns internal component <code>r</code> of an <code>DsaSig</code>.\nReturns internal component <code>s</code> of an <code>DsaSig</code>.\nReturns the maximum size of the signature output by <code>self</code> …\nSerializes the DSA signature into a DER-encoded …\nNamed Curve or Explicit\nCompressed conversion from point value.\nCurve defined using polynomial parameters\nDescribes the curve\nReference to <code>EcGroup</code>\nPublic and optional private key on the given curve.\nA reference to an <code>EcKey</code>.\nRepresents a point on the curve\nA reference a borrowed <code>EcPoint</code>.\nPerforms both compressed and uncompressed conversions.\nStandard Curves\nCompressed or Uncompressed conversion\nUncompressed conversion from point value.\nComputes <code>a + b</code>, storing the result in <code>self</code>.\nPlaces affine coordinates of a curve over a prime field in …\nPlaces affine coordinates of a curve over a binary field …\nPlaces affine coordinates of a curve over a prime field in …\nGets the flag determining if the group corresponds to a …\nChecks the key for validity.\nPlaces the cofactor of the group in the provided <code>BigNum</code>.\nPlaces the components of a curve over a binary field in …\nPlaces the components of a curve over a prime field in the …\nReturns the name of the curve, if a name is associated.\nReturns the degree of the curve.\nDetermines if this point is equal to another.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates point from a binary representation\nReturns the group for given parameters\nReturns the group of a standard named curve.\nConstructs an <code>EcKey</code> corresponding to a known curve.\nConstructs an <code>EcKey</code> corresponding to a curve.\nCreates point from a hexadecimal string representation\nConstructs an public/private key pair given a curve, a …\nConstructs an <code>EcKey</code> from the specified group with the …\nConstructs a public key from its affine coordinates.\nGenerates a new public/private key pair on the specified …\nReturns the generator for the given curve as an <code>EcPoint</code>.\nReturns the key’s group.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInverts <code>self</code>.\nChecks if point is infinity\nChecks if point is on a given curve\nComputes <code>q * m</code>, storing the result in <code>self</code>.\nComputes <code>generator * n + q * m</code>, storing the result in <code>self</code>.\nComputes <code>generator * n</code>, storing the result in <code>self</code>.\nCreates a new point on the specified curve.\nPlaces the order of the curve in the provided <code>BigNum</code>.\nReturns the number of bits in the group order.\nReturns the private key value.\nDecodes a DER-encoded elliptic curve private key structure.\nDeserializes a private key from a PEM-encoded ECPrivateKey …\nDeserializes a private key from a PEM-encoded encrypted …\nDeserializes a private key from a PEM-encoded encrypted …\nSerializes the private key into a DER-encoded ECPrivateKey …\nSerializes the private key to a PEM-encoded ECPrivateKey …\nSerializes the private key to a PEM-encoded encrypted …\nReturns the public key.\nDecodes a DER-encoded SubjectPublicKeyInfo structure …\nDecodes a PEM-encoded SubjectPublicKeyInfo structure …\nSerializes the public key into a DER-encoded …\nSerializes the public key into a PEM-encoded …\nSets affine coordinates of a curve over a prime field …\nSets the flag determining if the group corresponds to a …\nSets the generator point for the given curve\nSerializes the point to a binary representation.\nSerializes the point to a hexadecimal string …\nCreates a new point on the specified curve with the same …\nA low level interface to ECDSA.\nA reference to an <code>EcdsaSig</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDecodes a DER-encoded ECDSA signature.\nReturns a new <code>EcdsaSig</code> by setting the <code>r</code> and <code>s</code> values …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns internal component: <code>r</code> of an <code>EcdsaSig</code>. (See X9.62 …\nReturns internal components: <code>s</code> of an <code>EcdsaSig</code>. (See X9.62 …\nComputes a digital signature of the hash value <code>data</code> using …\nSerializes the ECDSA signature into a DER-encoded …\nVerifies if the signature is a valid ECDSA signature using …\nA type which decrypts data.\nA type which encrypts data.\nPerforms public key decryption.\nGets the size of the buffer needed to decrypt the input …\nPerforms public key encryption.\nGets the size of the buffer needed to encrypt the input …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>Encrypter</code>.\nCreates a new <code>Decrypter</code>.\nReturns the RSA padding mode in use.\nReturns the RSA padding mode in use.\nSets the RSA MGF1 algorithm.\nSets the RSA MGF1 algorithm.\nSets the RSA OAEP label.\nSets the RSA OAEP label.\nSets the RSA OAEP algorithm.\nSets the RSA OAEP algorithm.\nSets the RSA padding mode.\nSets the RSA padding mode.\nRepresents an EVP_Open context.\nRepresents an EVP_Seal context.\nReturns the encrypted keys.\nFinishes the encryption process, writing any remaining …\nFinishes the decryption process, writing any remaining …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the initialization vector, if the cipher uses one.\nCreates a new <code>Seal</code>.\nCreates a new <code>Open</code>.\nFeeds data from <code>input</code> through the cipher, writing …\nFeeds data from <code>input</code> through the cipher, writing …\nAn error reported from OpenSSL.\nCollection of <code>Error</code>s from OpenSSL.\nReturns the raw OpenSSL error code for this error.\nReturns additional data describing the error.\nReturns the errors in the stack.\nReturns the name of the source file which encountered the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the name of the function reporting the error.\nReturns the contents of the OpenSSL error stack.\nReturns the first error on the OpenSSL error stack.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the name of the library reporting the error, if …\nReturns the raw OpenSSL error constant for the library …\nReturns the line in the source file which encountered the …\nPushes the errors back onto the OpenSSL error stack.\nPushes the error back onto the OpenSSL error stack.\nReturns the reason for the error.\nReturns the raw OpenSSL error constant for the reason for …\nA slot in a type’s “extra data” structure.\nReturns the argument unchanged.\nCreates an <code>Index</code> from a raw integer index.\nCalls <code>U::from(self)</code>.\nThe resulting bytes of a digest.\nProvides message digest (hash) computation.\nA message digest algorithm.\nThe block size of the digest in bytes.\nReturns the hash of the data written and resets the …\nWrites the hash of the data into the supplied buf and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the <code>MessageDigest</code> corresponding to an algorithm …\nReturns the <code>MessageDigest</code> corresponding to an <code>Nid</code>.\nCreates a <code>MessageDigest</code> from a raw OpenSSL pointer.\nComputes the hash of the <code>data</code> with the non-XOF hasher <code>t</code>.\nComputes the hash of the <code>data</code> with the XOF hasher <code>t</code> and …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>Hasher</code> with the specified hash type.\nThe size of the digest in bytes.\nThe name of the digest.\nFeeds data into the hasher.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis corresponds to <code>OSSL_LIB_CTX_new</code>.\nA message digest algorithm.\nA reference to an <code>Md</code>.\nReturns the block size of the digest in bytes.\nFetches an <code>Md</code> object corresponding to the specified …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the <code>Md</code> corresponding to an <code>Nid</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the size of the digest in bytes.\nReturns the <code>Nid</code> of the digest.\nA reference to an <code>MdCtx</code>.\nCopies the computed digest into the buffer, returning the …\nCopies the computed digest into the buffer.\nInitializes the context to compute the digest of data.\nComputes the signature of the data in <code>from</code>.\nSigns the computed digest.\nLike <code>Self::digest_sign_final</code> but appends the signature to …\nInitializes the context to compute the signature of data.\nLike <code>Self::digest_sign</code> but appends the signature to a <code>Vec</code>.\nUpdates the context with more data.\nUpdates the context with more data.\nVerifies the signature of the data in <code>data</code>.\nVerifies the provided signature.\nInitializes the context to verify the signature of data.\nUpdates the context with more data.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new context.\nResets the underlying EVP_MD_CTX instance\nReturns the size of the message digest, i.e. the size of …\nReturns <code>true</code> iff <code>a</code> and <code>b</code> contain the same bytes.\nA numerical identifier for an OpenSSL object.\nThe digest and public-key algorithms associated with a …\nReturn the integer representation of a <code>Nid</code>.\nCreates a new <code>Nid</code> for the <code>oid</code> with short name <code>sn</code> and long …\nThe signature’s digest.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a <code>Nid</code> from an integer representation.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the string representation of a <code>Nid</code> (long).\nThe signature’s public-key.\nReturns the string representation of a <code>Nid</code> (short).\nReturns the <code>Nid</code>s of the digest and public key algorithms …\nThis corresponds to <code>OCSP_request_add0_id</code>.\nGet a flags value with all known bits set.\nReturns the basic response.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nChecks validity of the <code>this_update</code> and <code>next_update</code> fields.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nCreates an OCSP response from the status and optional body.\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nLooks up the status for the specified certificate ID.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConstructs a certificate ID for certificate <code>subject</code>.\nDeserializes a DER-encoded OCSP response.\nDeserializes a DER-encoded OCSP request.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThis corresponds to <code>OCSP_REQUEST_new</code>.\nThe time at which this revocation check expires.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nIf <code>status</code> is <code>CERT_STATUS_REVOKED</code>, the reason for the …\nThe intersection of a source flags value with the …\nIf <code>status</code> is <code>CERT_STATUS_REVOKED</code>, the time at which the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nReturns the status of the response.\nThe overall status of the response.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe time that this revocation check was performed.\nSerializes the response to its standard DER encoding.\nSerializes the request to its standard DER encoding.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nVerifies the validity of the response.\nDeprecated.\nBuilds the PKCS#12 object.\nCreates a new builder for a protected pkcs12 certificate.\nAn additional set of certificates to include in the …\nThe certificate.\nThe encryption algorithm that should be used for the cert\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDeserializes a DER-encoded PKCS#12 archive.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe encryption algorithm that should be used for the key\nKey iteration count, default is 2048 as of this writing\nMAC iteration count, default is the same as key_iter.\nMAC message digest type\nThe <code>friendlyName</code> used for the certificate and private key.\nDeprecated.\nExtracts the contents of the <code>Pkcs12</code>.\nThe private key.\nSerializes the <code>Pkcs12</code> to its standard DER encoding.\nDerives a key and an IV from various parameters.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDerives a key from a password and salt using the …\nDerives a key from a password and salt using the scrypt …\nA PKCS#7 structure.\nReference to <code>Pkcs7</code>\nA PKCS#7 signed data structure.\nReference to <code>Pkcs7Signed</code>\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nGet the stack of certificates from the PKCS7_SIGNED object\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nDecrypts data using the provided private key.\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nCreates and returns a PKCS#7 <code>envelopedData</code> structure.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nDeserializes a DER-encoded PKCS#7 signature\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nDeserializes a PEM-encoded PKCS#7 signature\nParses a message in S/MIME format.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCreates and returns a PKCS#7 <code>signedData</code> structure.\nGet the signed data of a PKCS#7 structure of type …\nRetrieve the signer’s certificates from the PKCS#7 …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nSerializes the data into a DER-encoded PKCS#7 structure.\nSerializes the data into a PEM-encoded PKCS#7 structure.\nConverts PKCS#7 structure to S/MIME format\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nReturn the type of a PKCS#7 structure as an Asn1Object\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nVerifies the PKCS#7 <code>signedData</code> structure contained by <code>&amp;self</code>…\nA trait indicating that a key has parameters.\nA trait indicating that a key has private components.\nA trait indicating that a key has public components.\nAn identifier of a kind of key.\nA public or private key.\nReference to <code>PKey</code>.\nA tag type indicating that a key only has parameters.\nA tag type indicating that a key has private components.\nA tag type indicating that a key only has public …\nReturns the integer representation of the <code>Id</code>.\nReturns the size of the key.\nCreates a new <code>PKey</code> containing a CMAC key.\nReturns a copy of the internal DH key.\nReturns a copy of the internal DSA key.\nGenerates a new EC key using the provided curve.\nReturns a copy of the internal elliptic curve key.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>PKey</code> containing a Diffie-Hellman key.\nCreates a new <code>PKey</code> containing a Diffie-Hellman key with …\nCreates a new <code>PKey</code> containing a DSA key.\nCreates a new <code>PKey</code> containing an elliptic curve key.\nCreates a <code>Id</code> from an integer representation.\nCreates a new <code>PKey</code> containing an RSA key.\nGenerates a new private Ed25519 key.\nGenerates a new private Ed448 key.\nGenerates a new private X25519 key.\nGenerates a new private X448 key.\nCreates a new <code>PKey</code> containing an HMAC key.\nReturns the <code>Id</code> that represents the type of this key.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDecodes a DER-encoded private key.\nDeserializes a private key from a PEM-encoded key type …\nDeserializes a private key from a PEM-encoded encrypted …\nDeserializes a private key from a PEM-encoded encrypted …\nDeserializes a DER-formatted PKCS#8 unencrypted private …\nDeserializes a DER-formatted PKCS#8 private key, using a …\nDeserializes a DER-formatted PKCS#8 private key, using the …\nCreates a private key from its raw byte representation\nSerializes the private key to a DER-encoded key type …\nSerializes the private key to a PEM-encoded PKCS#8 …\nSerializes the private key to a PEM-encoded PKCS#8 …\nSerializes a private key into an unencrypted DER-formatted …\nSerializes a private key into a DER-formatted PKCS#8, …\nCompares the public component of this key with another.\nDecodes a DER-encoded SubjectPublicKeyInfo structure.\nDecodes a PEM-encoded SubjectPublicKeyInfo structure.\nDecodes a PEM-encoded SubjectPublicKeyInfo structure.\nDecodes a PEM-encoded SubjectPublicKeyInfo structure.\nCreates a public key from its raw byte representation\nSerializes the public key into a DER-encoded …\nSerializes the public key into a PEM-encoded …\nRaw byte representation of a private key.\nRaw byte representation of a public key.\nReturns a copy of the internal RSA key.\nReturns the number of security bits.\nReturns the maximum size of a signature in bytes.\nIn this mode calling <code>derive</code> will just perform the expand …\nIn this mode calling <code>derive</code> will just perform the extract …\nThis is the default mode. Calling <code>derive</code> on a <code>PkeyCtxRef</code> …\nHKDF modes of operation.\nA context object which can perform asymmetric cryptography …\nA reference to a <code>PkeyCtx</code>.\nAppends info bytes for HKDF generation.\nDecrypts data using the private key.\nPrepares the context for decryption using the private key.\nLike <code>Self::decrypt</code> but appends plaintext to a <code>Vec</code>.\nDerives a shared secret between two keys.\nPrepares the context for shared secret derivation.\nSets the peer key used for secret derivation.\nLike <code>Self::derive</code> but appends the secret to a <code>Vec</code>.\nEncrypts data using the public key.\nPrepares the context for encryption using the public key.\nLike <code>Self::encrypt</code> but appends ciphertext to a <code>Vec</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGenerates a new public/private keypair.\nPrepares the context for key generation.\nCreates a new pkey context using the provided key.\nCreates a new pkey context for the specified algorithm ID.\nReturns the RSA padding mode in use.\nSets the input material for HKDF generation as the “key…\nSets the digest used for HKDF derivation.\nSets the HKDF mode of operation.\nSets the salt value for HKDF generation.\nSets the cipher used during key generation.\nSets the key MAC key used during key generation.\nSets the RSA MGF1 algorithm.\nSets the RSA OAEP label.\nSets the RSA OAEP algorithm.\nSets the RSA padding mode.\nSets the RSA PSS salt length.\nSets which algorithm was used to compute the digest used …\nSigns the contents of <code>data</code>.\nPrepares the context for signing using the private key.\nLike <code>Self::sign</code> but appends the signature to a <code>Vec</code>.\nVerifies the signature of data using the public key.\nPrepares the context for signature verification using the …\nRecovers the original data signed by the private key. You …\nPrepares the context for signature recovery using the …\nA reference to a <code>Provider</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLoads a new provider into the specified library context, …\nSpecifies the default search path that is to be used for …\nLoads a new provider into the specified library context, …\nControls random device file descriptor behavior.\nFill buffer with cryptographically strong pseudo-random …\nFill buffer with cryptographically strong pseudo-random …\nType of encryption padding to use.\nAn RSA key.\nReference to <code>RSA</code>\nReturns the integer representation of <code>Padding</code>.\nReturns the Rsa key.\nValidates RSA parameters for correctness\nReturns a reference to the private exponent of the key.\nReturns a reference to the first exponent used for CRT …\nReturns a reference to the second exponent used for CRT …\nReturns a reference to the public exponent of the key.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new RSA key with private components (public …\nCreates a new RSA key with only public components.\nCreates a <code>Padding</code> from an integer representation.\nGenerates a public/private key pair with the specified …\nGenerates a public/private key pair with the specified …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a reference to the coefficient used for CRT …\nReturns a reference to the modulus of the key.\nCreates a new <code>RsaPrivateKeyBuilder</code>.\nReturns a reference to the first factor of the exponent of …\nDecrypts data using the private key, returning the number …\nEncrypts data using the private key, returning the number …\nDecodes a DER-encoded PKCS#1 RSAPrivateKey structure.\nDeserializes a private key from a PEM-encoded PKCS#1 …\nDeserializes a private key from a PEM-encoded encrypted …\nDeserializes a private key from a PEM-encoded encrypted …\nSerializes the private key to a DER-encoded PKCS#1 …\nSerializes the private key to a PEM-encoded PKCS#1 …\nSerializes the private key to a PEM-encoded encrypted …\nDecrypts data using the public key, returning the number …\nEncrypts data using the public key, returning the number …\nDecodes a DER-encoded SubjectPublicKeyInfo structure …\nDecodes a DER-encoded PKCS#1 RSAPublicKey structure.\nDecodes a PEM-encoded SubjectPublicKeyInfo structure …\nDecodes a PEM-encoded PKCS#1 RSAPublicKey structure.\nSerializes the public key into a DER-encoded …\nSerializes the public key into a DER-encoded PKCS#1 …\nSerializes the public key into a PEM-encoded …\nSerializes the public key into a PEM-encoded PKCS#1 …\nReturns a reference to the second factor of the exponent …\nSets the Chinese Remainder Theorem params of the Rsa key.\nSets the factors of the Rsa key.\nReturns the size of the modulus in bytes.\nAn object which calculates a SHA1 hash of some data.\nAn object which calculates a SHA224 hash of some data.\nAn object which calculates a SHA256 hash of some data.\nAn object which calculates a SHA384 hash of some data.\nAn object which calculates a SHA512 hash of some data.\nReturns the hash of the data.\nReturns the hash of the data.\nReturns the hash of the data.\nReturns the hash of the data.\nReturns the hash of the data.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new hasher.\nCreates a new hasher.\nCreates a new hasher.\nCreates a new hasher.\nCreates a new hasher.\nComputes the SHA1 hash of some data.\nComputes the SHA224 hash of some data.\nComputes the SHA256 hash of some data.\nComputes the SHA384 hash of some data.\nComputes the SHA512 hash of some data.\nFeeds some data into the hasher.\nFeeds some data into the hasher.\nFeeds some data into the hasher.\nFeeds some data into the hasher.\nFeeds some data into the hasher.\nThe salt length is set to the digest length. Corresponds …\nThe salt length is set to the maximum permissible value. …\nSalt lengths that must be used with <code>set_rsa_pss_saltlen</code>.\nA type which computes cryptographic signatures of data.\nA type which can be used to verify the integrity and …\nSets the salt length to the given value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nComputes an upper bound on the signature length.\nCreates a new <code>Signer</code>.\nCreates a new <code>Verifier</code>.\nCreates a new <code>Signer</code> without a digest.\nCreates a new <code>Verifier</code> without a digest.\nReturns the RSA padding mode in use.\nReturns the RSA padding mode in use.\nSets the RSA MGF1 algorithm.\nSets the RSA MGF1 algorithm.\nSets the RSA padding mode.\nSets the RSA padding mode.\nSets the RSA PSS salt length.\nSets the RSA PSS salt length.\nWrites the signature into the provided buffer, returning …\nSigns the data in <code>data_buf</code> and writes the signature into …\nReturns the signature.\nReturns the signature.\nFeeds more data into the <code>Signer</code>.\nFeeds more data into the <code>Verifier</code>.\nDetermines if the data fed into the <code>Verifier</code> matches the …\nDetermines if the data given in <code>buf</code> matches the provided …\nAn identifier of an SRTP protection profile.\nReference to <code>SrtpProtectionProfile</code>.\nReturns the integer representation of <code>SrtpProfileId</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a <code>SrtpProfileId</code> from an integer representation.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDisables a check that the data buffer has not moved …\nAbort the handshake with a fatal alert.\nTerminate the handshake with a fatal alert.\nSend a warning alert to the client and continue the …\nA “reasonable default” set of options which enables …\nAllow legacy insecure renegotiation with servers or …\nThe ASN1 format.\nEnables automatic retries after TLS session events such as …\nAn error returned from an ALPN selection callback.\nEnable session caching on both the client and server side.\nUse the server’s preferences rather than the client’s …\nEnable session caching on the client side.\nEnables Cookie Exchange as described in RFC 4347 Section …\nInformation about the state of a cipher.\nA stack of selected ciphers, and a stack of selected …\nThe result of a client hello callback.\nA type which allows for configuration of a client-side TLS …\nDisables a countermeasure against an SSLv3/TLSv1.0 …\nDTLSv1.0\nDTLSv1.2\nThis extension is only allowed in DTLS\nEnable TLSv1.3 Compatibility mode.\nEnables “short writes”.\nAn SSL error.\nAn error code returned from SSL functions.\nWhich messages and under which conditions an extension …\nOn the server side, abort the handshake if the client did …\nThe handshake failed.\nA host name.\nAn error or intermediate state after a TLS handshake …\nIgnore this extension during parsing if we are resuming\nAn SSL stream midway through the handshake process.\nDo not select a protocol, but continue the handshake.\nDisables verification of the peer’s certificate.\nDisables automatic chain building when verifying a peer’…\nDisable automatic removal of expired sessions from the …\nDisables the use of TLS compression.\nDisables the use of DTLSv1.0\nDisables the use of DTLSv1.2.\nDisable use of the internal session cache for storage and …\nDisable use of the internal session cache for session …\nDisable use of the internal session cache for session …\nDo not query the MTU.\nDisallow all renegotiation in TLSv1.2 and earlier.\nAlways start a new session when performing a renegotiation …\nDisables the use of SSLv2.\nDisables the use of SSLv3.\nDisables the use of all (D)TLS protocol versions.\nDisables the use of session tickets for session resumption.\nDisables the use of TLSv1.0.\nDisables the use of TLSv1.1.\nDisables the use of TLSv1.2.\nDisables the use of TLSv1.3.\nAn identifier of a session name type.\nAn OSCP status.\nNo session caching for the client or server takes place.\nVerifies that the peer’s certificate is trusted.\nThe PEM format.\nPrioritize ChaCha ciphers when preferred by clients.\nA close notify message has been received from the peer.\nRelease memory buffers when the session does not need them.\nReturn from the handshake with an …\nA close notify response message has been received from the …\nSends the fake <code>TLS_FALLBACK_SCSV</code> cipher suite in the …\nA close notify message has been sent to the peer.\nEnable session caching on the server side.\nCreates a new key for each session when using DHE.\nCreates a new key for each session when using ECDHE.\nAn error occurred in the SSL library.\nSSLv3\nMost extensions are not defined for SSLv3 but …\nContinue the handshake.\nA non-recoverable IO error occurred.\nA close notify message has been sent to the peer.\nSetup failed.\nThe result of a shutdown request.\nThe shutdown state of a session.\nAn error returned from the SNI callback.\nThe state of an SSL/TLS session.\nA type which wraps server-side streams in a TLS session.\nA builder for <code>SslAcceptor</code>s.\nAn SSL/TLS alert.\nInformation about a cipher.\nReference to an <code>SslCipher</code>.\nA type which wraps client-side streams in a TLS session.\nA builder for <code>SslConnector</code>s.\nA context object for TLS streams.\nA builder for <code>SslContext</code>s.\nReference to <code>SslContext</code>\nAn identifier of the format of a certificate or key file.\nA type specifying the kind of protocol an <code>SslContext</code> will …\nOptions controlling the behavior of an <code>SslContext</code>.\nOptions controlling the behavior of an <code>SslContext</code>.\nReference to an <code>Ssl</code>.\nAn encoded SSL session.\nOptions controlling the behavior of session caching.\nReference to <code>SslSession</code>.\nA TLS session over a stream.\nA partially constructed <code>SslStream</code>, useful for unusual …\nOptions controlling the behavior of certificate …\nAn SSL/TLS protocol version.\nAn identifier of a certificate status type.\nTLSv1.0\nTLSv1.1\nTLSv1.2\nExtension is only defined for TLS1.2 and below\nReally means TLS1.2 or below\nTLSv1.3\nExtension is only defined for TLS1.3 and above\nSome extensions may be allowed in DTLS but we don’t …\nThis extension is only allowed in TLS\nDisables version rollback attach detection.\nAlert 112 - <code>unrecognized_name</code>.\nThe client hello callback indicated that it needed to be …\nAn attempt to read data from the underlying socket …\nAn attempt to write data to the underlying socket returned …\nThe handshake encountered a <code>WouldBlock</code> error midway …\nThe SSL session has been closed.\nInitiates a server-side TLS handshake.\nSee <code>Ssl::accept</code>\nInitiates a server-side TLS session on a stream.\nInitiates a server-side TLS handshake.\nThis corresponds to <code>SSL_add0_chain_cert</code>.\nAdd the provided CA certificate to the list sent by the …\nSets ca certificate that client trusted\nAdds a custom extension for a TLS/DTLS client or server …\nAppends a certificate to the certificate chain.\nAdds a session to the context’s cache.\nThe number of bits processed by the chosen algorithm.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nReturns a pointer to the raw OpenSSL value.\nReturns a pointer to the underlying OpenSSL value.\nReturns the raw OpenSSL value represented by this type.\nReturns the raw OpenSSL value represented by this type.\nReturns the raw OpenSSL value represented by this type.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nReturns the number of bits used for the cipher.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nConsumes the builder, returning an <code>SslConnector</code>.\nConsumes the builder, returning a <code>SslAcceptor</code>.\nConsumes the builder, returning a new <code>SslContext</code>.\nCreates a new builder for TLS connections.\nCreates a new builder object for an <code>SslContext</code>.\nDecodes a slice of wire-format cipher suite specification …\nReturns a shared reference to the context’s certificate …\nReturns a shared reference to the certificate store used …\nReturns a mutable reference to the context’s certificate …\nReturns the certificate associated with this <code>SslContext</code>, …\nLike [<code>SslContext::certificate</code>].\nChecks for consistency between the private key and …\nReturns the OpenSSL name of a cipher corresponding to an …\nReturns the NID corresponding to the cipher.\nClears the options used by the context, returning the old …\nReturns the ciphers field of the client’s hello message.\nReturns the compression methods field of the client’s …\nDetermines if the client’s hello message is in the SSLv2 …\nReturns the legacy version field of the client’s hello …\nReturns the random field of the client’s hello message.\nReturns the session ID field of the client’s hello …\nCopies the <code>client_random</code> value sent by the client in the …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nReturns a structure allowing for configuration of a single …\nInitiates a client-side TLS session on a stream.\nInitiates a client-side TLS handshake.\nSee <code>Ssl::connect</code>\nInitiates a client-side TLS session on a stream.\nInitiates a client-side TLS handshake.\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nReturns a shared reference to the inner raw <code>SslContext</code>.\nReturns a shared reference to the inner raw <code>SslContext</code>.\nReturns the current cipher if the session is active.\nReturns a textual description of the cipher.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nInitiates the handshake.\nSupport all versions of the DTLS protocol.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nReturns the underlying error which interrupted this …\nReturns a reference to the extra data at the specified …\nReturns a reference to the extra data at the specified …\nReturns a mutable reference to the extra data at the …\nDerives keying material for application use in accordance …\nDerives keying material for application use in accordance …\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nDetermines if current session used Extended Master Secret\nReturns a shared reference to the stack of certificates …\nCopies the contents of the last Finished message sent to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nDeserializes a DER-encoded session structure.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nCreates an <code>SslContextBuilder</code> from a pointer to a raw …\nConstructs an <code>SslMethod</code> from a pointer to the underlying …\nConstructs an <code>SslFiletype</code> from a raw OpenSSL value.\nConstructs a <code>StatusType</code> from a raw OpenSSL value.\nConstructs a <code>StatusType</code> from a raw OpenSSL value.\nConstructs an <code>SslStream</code> from a pointer to the underlying …\nReturns a mutable reference to the underlying stream.\nReturns a mutable reference to the underlying stream.\nReturns a mutable reference to the inner stream.\nReturns a shared reference to the underlying stream.\nReturns a shared reference to the underlying stream.\nReturns a shared reference to the inner stream.\nReturns the session’s shutdown state.\nInitiates the handshake.\nRestarts the handshake process.\nReturns the handshake digest of the cipher.\nReturns the SSL session ID.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes the <code>SslConnector</code>, returning the inner raw …\nConsumes the <code>SslAcceptor</code>, returning the inner raw …\nConsumes <code>self</code>, returning its error.\nReturns an <code>Ssl</code> configured to connect to the provided …\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nDetermines if the initial handshake has been completed.\nDetermines if this <code>Ssl</code> is configured for server-side or …\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nCopies the master key into the provided buffer.\nReturns the length of the master key.\nGets the maximum amount of early data that will be …\nGets the maximum amount of early data that can be sent on …\nGets the maximum amount of early data that can be sent on …\nGets the maximum supported protocol version.\nGets the minimum supported protocol version.\nCreates a new builder configured to connect to non-legacy …\nCreates a new builder configured to connect to non-legacy …\nCreates a new builder configured to connect to modern …\nCreates a new builder configured to connect to modern …\nReturns the name of the cipher.\nCreates a new <code>SslContextBuilder</code>.\nCreates a new <code>SslStream</code>.\nBegin creating an <code>SslStream</code> atop <code>stream</code>\nCreates a new <code>Ssl</code>.\nReturns a new extra data index.\nReturns a new extra data index.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nGets the number of TLS 1.3 session tickets that will be …\nGets the number of TLS 1.3 session tickets that will be …\nReturns the server’s OCSP response, if present.\nReturns the options used by the context.\nReturns a mutable reference to the X509 verification …\nReturns the certificate chain of the peer, if present.\nReturns the peer’s certificate, if present.\nCopies the contents of the last Finished message received …\nGet the temporary key provided by the peer that is used …\nReturns the number of bytes remaining in the currently …\nReturns the private key associated with this <code>SslContext</code>, …\nLike <code>SslContext::private_key</code>.\nReturns the session’s TLS protocol version.\nReturns the PSK identity used during connection setup.\nReturns the PSK identity hint used during connection setup.\nRead application data transmitted by a client before …\nRead application data transmitted by a client before …\nLike <code>read</code>, but takes a possibly-uninitialized slice.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nRemoves a session from the context’s cache and marks it …\nThe number of secret bits used for the cipher.\nGet the context’s security level, which controls the …\nGet the connection’s security level, which controls the …\nA standard implementation of protocol selection for …\nReturns the protocol selected via Application Layer …\nGets the SRTP profile selected by handshake.\nCopies the <code>server_random</code> value sent by the server in the …\nReturns the servername sent by the client via Server Name …\nReturns the servername sent by the client via Server Name …\nReturns a shared reference to the SSL session.\nReturns the context’s session cache size limit.\nDetermines if the session provided to <code>set_session</code> was …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nConfigure as an incoming stream to a server.\nConfigure as an incoming stream to a server.\nSets the protocols to sent to the server for Application …\nLike <code>SslContextBuilder::set_alpn_protos</code>.\nSets the callback used by a server to select a protocol …\nLoads trusted root certificates from a file.\nReplaces the context’s certificate store.\nSets the leaf certificate.\nSets the certificate\nLoads a certificate chain from a file.\nLoads a certificate chain from a file.\nLoads a leaf certificate from a file.\nSets the list of supported ciphers for protocols before …\nSets the list of supported ciphers for protocols before …\nSets the list of supported ciphers for the TLSv1.3 …\nSets the list of supported ciphers for the TLSv1.3 …\nSets the list of CA names sent to the client.\nThis corresponds to <code>SSL_set_client_CA_list</code>.\nSets a callback which will be invoked just after the client…\nConfigure as an outgoing stream from a client.\nConfigure as an outgoing stream from a client.\nSets the callback for generating a DTLSv1 cookie\nSets the callback for verifying a DTLSv1 cookie\nUse the default locations of trusted certificates for …\nSet the DTLS MTU size.\nSets the extra data at the specified index.\nSets the extra data at the specified index.\nSets the callback which is called when a client proposed …\nSets the context’s supported elliptic curve groups.\nSets the host name to be sent to the server for Server …\nSets the TLS key logging callback.\nSets the maximum amount of early data that will be …\nSets the maximum amount of early data that will be …\nSets the maximum supported protocol version.\nSets the maximum supported protocol version.\nSets a new default TLS/SSL method for SSL objects\nSets the minimum supported protocol version.\nSets the minimum supported protocol version.\nSets the mode used by the context, returning the previous …\nSets the MTU used for DTLS connections.\nSets the callback which is called when new sessions are …\nSets the number of TLS 1.3 session tickets that will be …\nSets the number of TLS 1.3 session tickets that will be …\nSets the OCSP response to be returned to the client.\nSets the options used by the context, returning the old …\nSets the private key.\nSets the private key.\nLoads the private key from a file.\nLoads the private key from a file.\nSets the callback for providing an identity and pre-shared …\nSets the callback for providing an identity and pre-shared …\nControls read ahead behavior.\nSets the callback which is called when sessions are …\nSet the context’s security level to a value between 0 …\nSet the context’s security level to a value between 0 …\nConfigures the server name indication (SNI) callback for …\nSets the session to be used.\nSets the session caching mode use for connections made …\nSets the context’s session cache size limit, returning …\nSet the context identifier for sessions.\nSets the session’s shutdown state.\nSets the context’s supported signature algorithms.\nChanges the context corresponding to the current …\nSets the callback for generating an application cookie for …\nSets the callback for verifying an application cookie for …\nSets the callback dealing with OCSP stapling.\nSets the status response a client wishes the server to …\nEnables the DTLS extension “use_srtp” as defined in …\nEnables the DTLS extension “use_srtp” as defined in …\nSets the parameters to be used during ephemeral …\nLike <code>SslContextBuilder::set_tmp_dh</code>.\nSets the callback which will generate parameters to be …\nLike <code>SslContextBuilder::set_tmp_dh_callback</code>.\nSets the parameters to be used during ephemeral elliptic …\nLike <code>SslContextBuilder::set_tmp_ecdh</code>.\nConfigures the use of Server Name Indication (SNI) when …\nConfigures the certificate verification method for new …\nLike <code>SslContextBuilder::set_verify</code>.\nConfigures the certificate verification method for new …\nLike <code>SslContextBuilder::set_verify_callback</code>.\nSets a custom certificate store for verifying peer …\nSet the certificate store used for certificate verification\nSets the certificate verification depth.\nConfigures the use of hostname verification when …\nShuts down the session.\nGets all SRTP profiles that are enabled for handshake via …\nReturns a shared reference to the <code>Ssl</code> object associated …\nReturns a shared reference to the <code>Ssl</code> object associated …\nReturns a shared reference to the <code>Ssl</code> of the stream.\nReturns the context corresponding to the current …\nReads data from the stream, without removing it from the …\nLike <code>read</code>, but returns an <code>ssl::Error</code> rather than an …\nLike <code>read_ssl</code>, but takes a possibly-uninitialized slice.\nLike <code>write</code>, but returns an <code>ssl::Error</code> rather than an …\nReturns the RFC-standard name of the cipher, if one exists.\nReturns a short string describing the state of the session.\nReturns a longer string describing the state of the …\nPerform a stateless server-side handshake.\nPerform a stateless server-side handshake\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nReturns the time at which the session was established, in …\nReturns the sessions timeout, in seconds.\nSupport all versions of the TLS protocol.\nSupport all versions of the TLS protocol, explicitly as a …\nSupport all versions of the TLS protocol, explicitly as a …\nReturns the temporary key from the local end of the …\nSerializes the session into a DER-encoded structure.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nA builder-style version of <code>set_use_server_name_indication</code>.\nReturns the verified certificate chain of the peer, …\nA builder-style version of <code>set_verify_hostname</code>.\nReturns the verify mode that was set on this context from …\nReturns the verify mode that was set using <code>set_verify</code>.\nReturns a reference to the X509 verification configuration.\nReturns a mutable reference to the X509 verification …\nReturns the certificate verification result.\nReturns the SSL/TLS protocol version that first defined …\nReturns the protocol version of the session.\nReturns a string describing the protocol version of the …\nSend data to the server without blocking on handshake …\nSend data to the server without blocking on handshake …\nAn iterator over the stack’s contents.\nA mutable iterator over the stack’s contents.\nAn owned stack of <code>T</code>.\nThe C stack type for this element.\nTrait implemented by types which can be placed in a stack.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a reference to the element at the given index in …\nReturns a mutable reference to the element at the given …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDetermines if the stack is empty.\nReturns the number of items in the stack.\nRemoves the last element from the stack and returns it.\nPushes a value onto the top of the stack.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRepresents a particular cipher algorithm.\nRepresents a symmetric cipher context.\nFeeds Additional Authenticated Data (AAD) through the …\nRequires OpenSSL 1.1.0 or newer.\nRequires OpenSSL 1.1.0 or newer.\nRequires OpenSSL 1.1.0 or newer.\nReturns the block size of the cipher.\nRequires OpenSSL 1.1.0 or newer.\nRequires OpenSSL 1.1.0 or newer.\nDecrypts data in one go, and returns the decrypted data.\nLike <code>decrypt</code>, but for AEAD ciphers such as AES GCM.\nEncrypts data in one go, and returns the encrypted data.\nLike <code>encrypt</code>, but for AEAD ciphers such as AES GCM.\nFinishes the encryption/decryption process, writing any …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nLooks up the cipher for a certain nid.\nCreates a <code>Cipher</code> from a raw pointer to its OpenSSL type.\nRetrieves the authentication tag used to authenticate …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the length of the IV used with this cipher, or <code>None</code>…\nReturns the length of keys used with this cipher.\nCreates a new <code>Crypter</code>.  The initialisation vector, <code>iv</code>, is …\nReturns the cipher’s Nid.\nEnables or disables padding.\nFeeds total plaintext length to the cipher.\nSets the tag used to authenticate ciphertext in AEAD …\nSets the length of the authentication tag to generate in …\nFeeds data from <code>input</code> through the cipher, writing …\nFeeds data from <code>input</code> through the cipher, writing …\nThe date of the build process in the form “built on: ……\nThe compiler flags set for the compilation process in the …\nThe “OPENSSLDIR” setting of the library build in the …\nOPENSSL_VERSION_NUMBER is a numeric release version …\nThe “Configure” target of the library build in the …\nThe text variant of the version number and the release …\nApplication verification failure.\n<code>AccessDescription</code> of certificate authority information.\nReference to <code>AccessDescription</code>.\nThe CRL extension identifying how to access information …\nThe CRL entry extension identifying the issuer of a …\nThe reason that a certificate was revoked.\nThe status of a certificate in a revoction list\nA <code>X509</code> distribution point.\nA <code>X509</code> distribution point.\nReference to <code>DistPointName</code>.\nReference to <code>DistPoint</code>.\nA type of X509 extension.\nAn <code>X509</code> certificate alternative names.\nReference to <code>GeneralName</code>.\nThe certificate is not present in the list\nSuccessful peer certificate verification.\nThe CRL entry extension identifying the reason for …\nThe certificate is in the list, but has the “…\nThe certificate is in the list and is revoked\nAn <code>X509</code> public key certificate.\nAn <code>X509</code> certificate signature algorithm.\nReference to <code>X509Algorithm</code>.\nA builder used to construct an <code>X509</code>.\nAn <code>X509</code> certificate revocation list.\nReference to <code>X509Crl</code>.\nPermit additional fields to be added to an <code>X509</code> v3 …\nReference to <code>X509Extension</code>.\nThe names of an <code>X509</code> certificate.\nA builder used to construct an <code>X509Name</code>.\nA type to destructure and examine an <code>X509Name</code>.\nA name entry associated with a <code>X509Name</code>.\nReference to <code>X509NameEntry</code>.\nReference to <code>X509Name</code>.\nAn <code>X509</code> or an X509 certificate revocation list.\nReference to <code>X509Object</code>\nA reference to an [<code>X509_PURPOSE</code>].\nReference to <code>X509</code>.\nAn <code>X509</code> certificate request.\nA builder used to construct an <code>X509Req</code>.\nReference to <code>X509Req</code>.\nAn <code>X509</code> certificate revocation status.\nReference to <code>X509Revoked</code>.\nAn <code>X509</code> certificate store context.\nA reference to an <code>X509StoreContext</code>.\nThe result of peer certificate verification.\nA context object required to construct certain <code>X509</code> …\nAdds an alias for an extension\nPermits any number of extension fields to be added to the …\nReturns this certificate’s “alias”. This field is …\nAdd a name entry\nAdd a field entry by NID.\nAdd a field entry by NID with a specific type.\nAdd a field entry by str.\nAdd a field entry by str with a specific type.\nAdds an X509 extension value to the certificate.\nAdds an X509 extension value to the certificate.\nReturns the raw OpenSSL value represented by this type.\nReturn the integer representation of an <code>X509VerifyResult</code>.\nReturns the raw OpenSSL value represented by this type.\nReturns this certificate’s <code>authority information access</code> …\nReturns this certificate’s authority issuer name …\nReturns this certificate’s authority key id, if it …\nReturns this certificate’s authority serial number, if …\nConsumes the builder, returning the certificate.\nReturn an <code>X509Name</code>.\nReturns the <code>X509Req</code>.\nReturns a new builder.\nReturns a new builder.\nA builder for <code>X509Req</code>.\nReturns a reference to a complete valid <code>X509</code> certificate …\nReturns this certificate’s CRL distribution points, if …\nReturns a reference to the certificate which caused the …\nReturns the field value of an <code>X509NameEntry</code>.\nReturns a digest of the DER representation of the …\nReturns the contents of this <code>GeneralName</code> if it is a …\nReturns the name of this distribution point if it exists\nReturns the contents of this <code>GeneralName</code> if it is a <code>dNSName</code>…\nReturns the contents of this <code>GeneralName</code> if it is an …\nReturns an iterator over all <code>X509NameEntry</code> values\nReturns the name entries by the nid.\nReturns the error code of the context.\nReturns a non-negative integer representing the depth in …\nReturn a human readable error string from the verification …\nReturns application data pertaining to an <code>X509</code> store …\nAdd extensions to an <code>X509</code> certificate or certificate …\nGet the criticality and value of an extension.\nGet the criticality and value of an extension.\nReturns the extensions of the certificate request.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDeserializes a DER-encoded X509 structure.\nDeserializes a DER-encoded X509 name structure.\nDeserializes a DER-encoded PKCS#10 certificate request …\nDeserializes a DER-encoded certificate revocation status\nDeserializes a DER-encoded Certificate Revocation List\nGet an <code>X509PurposeRef</code> for a given index value. The index …\nDeserializes a PEM-encoded X509 structure.\nDeserializes a PEM-encoded PKCS#10 certificate request …\nDeserializes a PEM-encoded Certificate Revocation List\nConstructs an <code>CrlReason</code> from a raw OpenSSL value.\nCreates an <code>X509VerifyResult</code> from a raw error number.\nConstructs an <code>X509PurposeId</code> from a raw OpenSSL value.\nReturns the contents of this DistPointName if it is a …\nGet the revocation status of a certificate\nGet the revocation status of a certificate by its serial …\nGet the internal table index of an X509_PURPOSE for a …\nGet the stack of revocation entries\nInitializes this context with the given certificate, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the contents of this <code>GeneralName</code> if it is an …\nChecks that this certificate issued <code>subject</code>.\nReturns this certificate’s issuer alternative name …\nReturns this certificate’s issuer name.\nGet the issuer name from the revocation list.\nReturns the hash of the certificates issuer\nReturns the CRL’s <code>lastUpdate</code> time.\nLoads subject names from a file containing PEM-formatted …\nReturns the access method OID.\nCreates a new builder.\nCreates a new builder.\nReturns a builder for a certificate request.\nCreates a new <code>X509StoreContext</code> instance.\nConstructs an X509 extension value. See <code>man x509v3_config</code> …\nConstructs a new X509 extension value from its OID, …\nConstructs an X509 extension value. See <code>man x509v3_config</code> …\nReturns the CRL’s <code>nextUpdate</code> time.\nReturns the certificate’s Not After validity period.\nReturns the certificate’s Not Before validity period.\nReturns the <code>Asn1Object</code> value of an <code>X509NameEntry</code>. This is …\nReturns the ASN.1 OID of this algorithm.\nReturns the list of OCSP responder URLs specified in the …\nRetrieves the path length extension from a certificate, if …\nThis corresponds to <code>X509_get_pubkey</code>.\nReturns the public key of the certificate request.\nGet the purpose value from an X509Purpose structure. This …\nGet the date that the certificate was revoked\nReturns this certificate’s serial number.\nGet the serial number of the revoked certificate\nSet the error code of the context.\nSets the issuer name of the certificate.\nSets the notAfter constraint on the certificate.\nSets the notBefore constraint on the certificate.\nSets the public key associated with the certificate.\nSet the public key.\nSets the serial number of the certificate.\nSets the subject name of the certificate.\nSet the issuer name.\nSets the version of the certificate.\nSet the numerical value of the version field.\nSigns the certificate with a private key.\nSign the request using a private key.\nReturns the certificate’s signature\nReturns the certificate’s signature algorithm.\nReturns the index which can be used to obtain a reference …\nDeserializes a list of PEM-formatted certificates.\nDescribe a context in which to verify an <code>X509</code> certificate.\nReturns this certificate’s subject alternative name …\nReturns this certificate’s subject key id, if it exists.\nReturns this certificate’s subject name.\nReturns the subject name of the certificate request.\nReturns the hash of the certificates subject\nSerializes the certificate into a DER-encoded X509 …\nSerializes the Extension to its standard DER encoding.\nSerializes the certificate into a DER-encoded X509 name …\nSerializes the certificate request to a DER-encoded …\nSerializes the certificate request to a DER-encoded …\nSerializes the certificate request to a DER-encoded …\nCopies the name to a new <code>X509Name</code>.\nCopies the entry to a new <code>X509Revoked</code>.\nSerializes the certificate into a PEM-encoded X509 …\nSerializes the certificate request to a PEM-encoded …\nSerializes the certificate request to a PEM-encoded …\nConverts the certificate to human readable text.\nConverts the request to human readable text.\nCompare two names, like <code>Ord</code> but it may fail.\nReturns the contents of this <code>GeneralName</code> if it is an …\nCheck if the certificate is signed using the given public …\nCheck if the certificate request is signed using the given …\nCheck if the CRL is signed using the given public key.\nVerifies the stored certificate.\nReturns certificate version. If this certificate has no …\nReturns the numerical value of the version field of the …\nReturns a context object which is needed to create certain …\nReturn an <code>X509v3Context</code>. This context object can be used …\nAn extension that provides a means of identifying the …\nAn extension which indicates whether a certificate is a CA …\nAn extension consisting of a list of usages indicating …\nAn extension consisting of a list of names of the …\nAn extension that allows additional identities to be bound …\nAn extension that provides a means of identifying …\nReturn the <code>BasicConstraints</code> extension as an <code>X509Extension</code>.\nReturn the <code>KeyUsage</code> extension as an <code>X509Extension</code>.\nReturn the <code>ExtendedKeyUsage</code> extension as an <code>X509Extension</code>.\nReturn a <code>SubjectKeyIdentifier</code> extension as an <code>X509Extension</code>…\nReturn a <code>AuthorityKeyIdentifier</code> extension as an …\nReturn a <code>SubjectAlternativeName</code> extension as an …\nSets the <code>ca</code> flag to <code>true</code>.\nSets the <code>clientAuth</code> flag to <code>true</code>.\nSets the <code>codeSigning</code> flag to <code>true</code>.\nSets the <code>critical</code> flag to <code>true</code>. The extension will be …\nSets the <code>critical</code> flag to <code>true</code>. The extension will be …\nSets the <code>critical</code> flag to <code>true</code>. The extension will be …\nSets the <code>critical</code> flag to <code>true</code>. The extension will be …\nSets the <code>critical</code> flag to <code>true</code>. The extension will be …\nSets the <code>critical</code> flag to <code>true</code>. The extension will be …\nSets the <code>cRLSign</code> flag to <code>true</code>.\nSets the <code>dataEncipherment</code> flag to <code>true</code>.\nSets the <code>decipherOnly</code> flag to <code>true</code>.\nSets the <code>digitalSignature</code> flag to <code>true</code>.\nSets the <code>dirName</code> flag.\nSets the <code>dns</code> flag.\nSets the <code>email</code> flag.\nSets the <code>emailProtection</code> flag to <code>true</code>.\nSets the <code>encipherOnly</code> flag to <code>true</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSets the <code>ip</code> flag.\nSets the <code>issuer</code> flag.\nSets the <code>keyAgreement</code> flag to <code>true</code>.\nSets the <code>keyCertSign</code> flag to <code>true</code>.\nSets the <code>keyEncipherment</code> flag to <code>true</code>.\nSets the <code>keyid</code> flag.\nSets the <code>msCodeCom</code> flag to <code>true</code>.\nSets the <code>msCodeInd</code> flag to <code>true</code>.\nSets the <code>msCTLSign</code> flag to <code>true</code>.\nSets the <code>msEFS</code> flag to <code>true</code>.\nSets the <code>msSGC</code> flag to <code>true</code>.\nConstruct a new <code>BasicConstraints</code> extension.\nConstruct a new <code>KeyUsage</code> extension.\nConstruct a new <code>ExtendedKeyUsage</code> extension.\nConstruct a new <code>SubjectKeyIdentifier</code> extension.\nConstruct a new <code>AuthorityKeyIdentifier</code> extension.\nConstruct a new <code>SubjectAlternativeName</code> extension.\nSets the <code>nonRepudiation</code> flag to <code>true</code>.\nSets the <code>nsSGC</code> flag to <code>true</code>.\nSets a flag not already defined.\nSets the <code>otherName</code> flag.\nSets the <code>otherName</code> flag.\nSets the <code>pathlen</code> to an optional non-negative value. The …\nSets the <code>rid</code> flag.\nSets the <code>serverAuth</code> flag to <code>true</code>.\nSets the <code>timeStamping</code> flag to <code>true</code>.\nSets the <code>uri</code> flag.\nMarker type corresponding to the <code>X509_LOOKUP_file</code> lookup …\nMarker type corresponding to the <code>X509_LOOKUP_hash_dir</code> …\nInformation used by an <code>X509Store</code> to look up certificates …\nMethod used to look up certificates and CRLs.\nA reference to an <code>X509LookupMethod</code>.\nA reference to an <code>X509Lookup</code>.\nA certificate store to hold trusted <code>X509</code> certificates.\nA builder type used to construct an <code>X509Store</code>.\nA reference to an <code>X509StoreBuilder</code>.\nReference to an <code>X509Store</code>.\nAdds a certificate to the certificate store.\nSpecifies a directory from which certificates and CRLs …\nAdds a lookup method to the store.\nReturns a stack of all the certificates in this store.\nConstructs the <code>X509Store</code>.\nLookup method loads all the certificates or CRLs present …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nLookup method that loads certificates and CRLs on demand …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSpecifies a file from which certificates will be loaded\nSpecifies a file from which certificate revocation lists …\nReturns a builder for a certificate store.\nGet a reference to the cache of certificates in this store.\nLoad certificates from their default locations.\nSets certificate chain validation related flags.\nSets certificate chain validation related parameters.\nSets the certificate purpose. The purpose value can be …\nRequires OpenSSL 1.1.0 or newer.\nFlags used to check an <code>X509</code> certificate.\nFlags used to verify an <code>X509</code> certificate chain.\nAdjust parameters associated with certificate verification.\nReference to <code>X509VerifyParam</code>.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGets the current authentication security level\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nClear verification flags.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGets verification flags.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nCreate an X509VerifyParam\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nSets the authentication security level to auth_level\nSet the verification depth\nSet the expected email address.\nSet verification flags.\nSet the expected DNS hostname.\nSet the host flags.\nSet the expected IPv4 or IPv6 address.\nSets the verification purpose\nSet the verification time, where time is of type time_t, …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.")