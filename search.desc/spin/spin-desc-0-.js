searchState.loadedDescShard("spin", 0, "This crate provides spin-based versions of the primitives …\nA primitive that provides lazy one-time initialization. …\nSynchronization primitives for one-time evaluation.\nStrategies that determine the behaviour of locks when …\nInitialization constant of <code>Once</code>.\nA primitive that provides lazy one-time initialization.\nRetrieve a pointer to the inner data.\nPerforms an initialization routine once and only once. The …\nReturns the argument unchanged.\nReturns a reference to the inner value if the <code>Once</code> has …\nReturns a mutable reference to the inner value if the <code>Once</code> …\nReturns a mutable reference to the inner value\nReturns a reference to the inner value on the unchecked …\nCreates a new initialized <code>Once</code>.\nCalls <code>U::from(self)</code>.\nReturns a the inner value if the <code>Once</code> has been initialized.\nChecks whether the value has been initialized.\nCreates a new <code>Once</code>.\nLike <code>Once::get</code>, but will spin if the <code>Once</code> is in the …\nThis method is similar to <code>call_once</code>, but allows the given …\nReturns a the inner value if the <code>Once</code> has been initialized.\nSpins until the <code>Once</code> contains a value.\nA strategy that rapidly spins, without telling the CPU to …\nA trait implemented by spinning relax strategies.\nA strategy that rapidly spins while informing the CPU that …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPerform the relaxing operation during a period of …")