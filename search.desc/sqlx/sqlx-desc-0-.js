searchState.loadedDescShard("sqlx", 0, "The async SQL toolkit for Rust, built with ❤️ by the …\nAcquire connections or transactions from a database in a …\nOpaque database driver. Capable of being used in place of …\n<strong>SEE DOCUMENTATION BEFORE USE</strong>. Runtime-generic database …\nError occurred within the <code>Any</code> driver mapping to/from the …\nAn alias for <code>Executor&lt;&#39;_, Database = Any&gt;</code>.\n<strong>SEE DOCUMENTATION BEFORE USE</strong>. Type alias for <code>Pool&lt;Any&gt;</code>.\nThe concrete type used as a buffer for arguments while …\nA tuple of arguments to be sent to the database.\nThe concrete <code>Arguments</code> implementation for this database.\nThe concrete <code>Column</code> implementation for this database.\nError occurred while decoding a value from a specific …\nA type that can be used to index into a <code>Row</code> or <code>Statement</code>.\nColumn index was out of bounds.\nNo column found for the given name.\nError occurred while parsing a connection string.\nRepresents a single database connection.\nThe concrete <code>Connection</code> implementation for this database.\nA database driver.\nError returned from the database.\nA type that can be decoded from the database.\nError occurred while decoding a value.\nThe enum <code>Either</code> with variants <code>Left</code> and <code>Right</code> is a general …\nEncode a single value to be sent to the database.\nError occured while encoding a value.\nContains the error value\nRepresents all the ways a method can fail within SQLx.\nA type that may be executed against a database connection.\nA type that contains or can provide a database connection …\nA record that can be built from a row returned by the …\nError communicating with the database backend.\nA value of type <code>L</code>.\nThe display name for this database driver.\nContains the success value\nA connection to a PostgreSQL database.\nAn alias for <code>Executor&lt;&#39;_, Database = Postgres&gt;</code>.\nAn alias for <code>Pool</code>, specialized for Postgres.\nAn asynchronous pool of SQLx database connections.\n<code>Pool::close</code> was called while we were waiting in …\nA <code>Pool::acquire</code> timed out due to connections not becoming …\nPostgreSQL database driver.\nUnexpected or invalid data encountered while communicating …\nA builder type for constructing queries at runtime.\nThe concrete <code>QueryResult</code> implementation for this database.\nOne or more raw SQL statements, separated by semicolons (<code>;</code>…\nA specialized <code>Result</code> type for SQLx.\nA value of type <code>R</code>.\nRepresents a single row from the database.\nThe concrete <code>Row</code> implementation for this database.\nNo rows returned by a query that expected to return at …\nAn explicitly prepared statement.\nThe concrete <code>Statement</code> implementation for this database.\nError occurred while attempting to establish a TLS …\nAn in-progress database transaction or savepoint.\nThe concrete <code>TransactionManager</code> implementation for this …\nIndicates that a SQL type is supported for a database.\nProvides information about a SQL type for the database …\nThe concrete <code>TypeInfo</code> implementation for this database.\nType in query doesn’t exist. Likely due to typo or …\nThe schemes for database URLs that should match this …\nAn owned value from the database.\nThe concrete type used to hold an owned copy of the …\nA reference to a single value from the database.\nThe concrete type used to hold a reference to the …\nA background worker has crashed.\nRetrieves a connection from the pool.\nAdd the value to the end of the arguments.\n<strong>SEE DOCUMENTATION BEFORE USE</strong>. Runtime-generic database …\nConvert <code>&amp;mut Either&lt;L, R&gt;</code> to <code>Either&lt;&amp;mut L, &amp;mut R&gt;</code>.\nConvert <code>Pin&lt;&amp;mut Either&lt;L, R&gt;&gt;</code> to …\nConvert <code>Pin&lt;&amp;Either&lt;L, R&gt;&gt;</code> to <code>Either&lt;Pin&lt;&amp;L&gt;, Pin&lt;&amp;R&gt;&gt;</code>, …\nGet this value as a reference.\nConvert <code>&amp;Either&lt;L, R&gt;</code> to <code>Either&lt;&amp;L, &amp;R&gt;</code>.\nReturns the name of the database backend in use (e.g. …\nBegin a new transaction or establish a savepoint within …\nRetrieves a connection and immediately begins a new …\nProduce an executable query from this builder.\nProduce an executable query from this builder.\nProduce an executable query from this builder.\nThe number of statements currently cached in the …\nRemoves all statements from the cache, closing them on the …\nMaps an <code>Either&lt;&amp;mut L, &amp;mut R&gt;</code> to an <code>Either&lt;L, R&gt;</code> by …\nMaps an <code>Either&lt;&amp;L, &amp;R&gt;</code> to an <code>Either&lt;L, R&gt;</code> by cloning the …\nExplicitly close this database connection.\nShut down the connection pool, immediately waking all …\nGet a future that resolves when <code>Pool::close()</code> is called.\nGets the column information at <code>index</code>.\nGets the column information at <code>index</code>.\nGet the columns expected to be returned by executing this …\nGets all columns in this statement.\nCommits this transaction or savepoint.\nDetermines if this Rust type is compatible with the given …\nEstablish a new database connection with the options …\nCreate a new connection pool with a default pool …\nEstablish a new database connection.\nCreate a new connection pool with a default pool …\nCreate a new connection pool with a default pool …\nGets a clone of the connection options for this pool\nCreate a new connection pool with a default pool …\nEstablish a new database connection with the provided …\nMaps an <code>Either&lt;&amp;mut L, &amp;mut R&gt;</code> to an <code>Either&lt;L, R&gt;</code> by …\nMaps an <code>Either&lt;&amp;L, &amp;R&gt;</code> to an <code>Either&lt;L, R&gt;</code> by copying the …\nIssue a <code>COPY FROM STDIN</code> statement and transition the …\nIssue a <code>COPY TO STDOUT</code> statement and transition the …\nTraits to represent a database driver.\nProvides <code>Decode</code> for decoding values from the database.\nDecode a new value of this type using a raw value from the …\nDecode this single value into the requested type.\nDecode this single value into the requested type.\nEntirely disables statement logging (both slow and …\nApply one of two functions depending on contents, unifying …\nConvert the contained value into <code>T</code>\nLike <code>either</code>, but provide some context to whichever of the …\nProvides <code>Encode</code> for encoding values for the database.\nWrites the value of <code>self</code> into <code>buf</code> in the expected format …\nWrites the value of <code>self</code> into <code>buf</code> without moving <code>self</code>.\nTypes for working with errors produced by SQLx.\nExecute the query and return the total number of rows …\nExecute the SQL string and return the total number of rows …\nExecute multiple queries and return the rows affected from …\nExecute the SQL string. Returns a stream which gives the …\nReturns the left value\nReturns the right value\nFactors out a homogenous type from an <code>Either</code> of <code>Result</code>.\nFactor out a homogeneous type from an either of pairs.\nConverts an <code>Either</code> of <code>Iterator</code>s to be an <code>Iterator</code> of <code>Either</code>…\nBorrows an <code>Either</code> of <code>Iterator</code>s to be an <code>Iterator</code> of <code>Either</code>s\nMutably borrows an <code>Either</code> of <code>Iterator</code>s to be an <code>Iterator</code> …\nFactors out <code>None</code> from an <code>Either</code> of <code>Option</code>.\nFactors out a homogenous type from an <code>Either</code> of <code>Result</code>.\nFactor out a homogeneous type from an either of pairs.\nExecute the query and return the generated results as a …\nExecute the SQL string and return the generated results as …\nExecute the query and return all the generated results, …\nExecute the SQL string and return all the resulting rows …\nExecute multiple queries and return the generated results …\nExecute the SQL string and return the generated results as …\nExecute the query and returns exactly one row.\nExecute the SQL string, returning the first row or …\nExecute the query and returns at most one row.\nExecute the SQL string, returning the first row or <code>None</code> …\nConvert <code>Either&lt;L, R&gt;</code> to <code>Either&lt;R, L&gt;</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nParse the <code>ConnectOptions</code> from a URL.\nIndex into the database row and decode a single value.\nIndex into the database row and decode a single value.\nReturns a valid positional index into the row or …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nExtract the value of an either over two equivalent types.\nConvert the inner value to an iterator.\nDeconstruct this <code>QueryBuilder</code>, returning the built SQL. …\nReturns <code>true</code> if <code>.close()</code> has been called on the pool, <code>false</code>…\nReturns <code>true</code> if this row has no columns.\nReturn true if the value is the <code>Left</code> variant.\nReturns <code>true</code> if the SQL value is <code>NULL</code>.\nReturns <code>true</code> if the SQL value is <code>NULL</code>.\nReturn true if the value is the <code>Right</code> variant.\nBorrow the inner value as an iterator.\nMutably borrow the inner value as an iterator.\nConvert the left side of <code>Either&lt;L, R&gt;</code> to an <code>Option&lt;L&gt;</code>.\nApply the function <code>f</code> on the value in the <code>Left</code> variant if …\nReturn left value or given value\nReturn left or a default\nReturns left value or computes it from a closure\nThe number of arguments that were already added.\nReturns the number of columns in this row.\nLog executed statements with a duration above the …\nLog executed statements with the specified <code>level</code>\nMap <code>f</code> over the contained value and return the result in the\nApply the functions <code>f</code> and <code>g</code> to the <code>Left</code> and <code>Right</code> variants …\nSimilar to <code>map_either</code>, with an added context <code>ctx</code> …\nApply the function <code>f</code> on the value in the <code>Left</code> variant if …\nApply the function <code>f</code> on the value in the <code>Right</code> variant if …\nEmbeds migrations into the binary by expanding to a static …\nGets the column name or alias.\nReturns the database system name of the type. Length …\nStart building a query with an initial SQL fragment, which …\nReturns the number of connections active and idle (not in …\nGet the options for this pool\nGets the column ordinal.\nGet the expected parameters for this statement.\nReturns <code>true</code> if the statement should be cached.\nChecks if a connection to the database is still valid.\nProvides the connection pool for asynchronous SQLx …\nConvenience re-export of common traits.\nPrepare the SQL query to inspect the type information of …\nPrepare the SQL query, with parameter type information, to …\nAppend a SQL fragment to the query.\nPush a bind argument placeholder (<code>?</code> or <code>$N</code> for Postgres) …\nCreates <code>((a, b), (..)</code> statements, from <code>tuples</code>.\nPush a <code>VALUES</code> clause where each item in <code>tuples</code> represents …\nTypes and traits for the <code>query</code> family of functions and …\nExecute a single SQL query as a prepared statement …\nStatically checked SQL query with <code>println!()</code> style syntax.\nExecute a single SQL query as a prepared statement …\nA variant of <code>query!</code> which takes a path to an explicitly …\nA variant of <code>query_as!</code> which does not check the input or …\nExecute a single SQL query, with the given arguments as a …\nRuntime query-builder API.\nA variant of <code>query!</code> where the SQL query is stored in a …\nCombines the syntaxes of <code>query_as!</code> and <code>query_file!</code>.\nA variant of <code>query_file_as!</code> which does not check the input …\nA variant of <code>query_scalar!</code> which takes a file path like …\nA variant of <code>query_file_scalar!</code> which does not typecheck …\nA variant of <code>query_file!</code> which does not check the input or …\nExecute a single SQL query as a prepared statement …\nA variant of <code>query!</code> which expects a single column from the …\nA variant of <code>query_scalar!</code> which does not typecheck bind …\nExecute a SQL query as a prepared statement (transparently …\nA variant of <code>query!</code> which does not check the input or …\nExecute a SQL query as a prepared statement (transparently …\nExecute one or more statements as raw SQL, separated by …\nReserves the capacity for at least <code>additional</code> more values …\nReset this <code>QueryBuilder</code> back to its initial state.\nConvert the right side of <code>Either&lt;L, R&gt;</code> to an <code>Option&lt;R&gt;</code>.\nApply the function <code>f</code> on the value in the <code>Right</code> variant if …\nReturn right value or given value\nReturn right or a default\nReturns right value or computes it from a closure\nAborts this transaction or savepoint.\nStart a list separated by <code>separator</code>.\nthe version number of the server in <code>libpq</code> format\nUpdates the connection options this pool will use when …\nRestore any buffers in the connection to their default …\nReturns the number of connections currently active. This …\nGet the original SQL text used to create this statement.\nGets the SQL that will be executed.\nGet the current build SQL; <strong>note</strong>: may not be syntactically …\nGets the previously cached statement, if available.\nReturns the arguments to be bound against the query string.\nMark an <code>async fn</code> as a test with SQLx support.\nCreates an owned statement from this statement reference. …\nCreates an owned value from this value reference.\nGet a connection URL that may be used to connect to the …\nExecute the function inside a transaction.\nAttempts to retrieve a connection from the pool if there …\nAttempts to retrieve a connection and immediately begins a …\nGets the column information at <code>index</code> or a …\nGets the column information at <code>index</code> or a …\nDecode this single value into the requested type.\nDecode this single value into the requested type.\nIndex into the database row and decode a single value.\nIndex into the database row and decode a single value.\nIndex into the database row and decode a single value.\nReturn <code>true</code> if <code>self</code> and <code>other</code> represent mutually …\nReturns the canonical SQL type for this Rust type.\nGets the type information for the column.\nGet the type information for this value.\nGet the type information for this value.\nConversions between Rust and SQL types.\nReturns the left value\nReturns the right value\nConstruct a <code>QueryBuilder</code> with existing SQL and arguments.\nOpaque database driver. Capable of being used in place of …\nOpaque options for connecting to a database. These may …\nAn alias for <code>Executor&lt;&#39;_, Database = Any&gt;</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInstall all currently compiled-in drivers for <code>AnyConnection</code>…\nInstall the list of drivers for <code>AnyConnection</code> to use.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe concrete type used as a buffer for arguments while …\nThe concrete <code>Arguments</code> implementation for this database.\nThe concrete <code>Column</code> implementation for this database.\nThe concrete <code>Connection</code> implementation for this database.\nA database driver.\nA <code>Database</code> that maintains a client-side cache of prepared …\nThe display name for this database driver.\nThe concrete <code>QueryResult</code> implementation for this database.\nThe concrete <code>Row</code> implementation for this database.\nThe concrete <code>Statement</code> implementation for this database.\nThe concrete <code>TransactionManager</code> implementation for this …\nThe concrete <code>TypeInfo</code> implementation for this database.\nThe schemes for database URLs that should match this …\nThe concrete type used to hold an owned copy of the …\nThe concrete type used to hold a reference to the …\nA type that can be decoded from the database.\nDecode a new value of this type using a raw value from the …\nEncode a single value to be sent to the database.\nThe return type of Encode::encode.\nThe value is not null.\nThe value is null; no data was written.\nWrites the value of <code>self</code> into <code>buf</code> in the expected format …\nWrites the value of <code>self</code> into <code>buf</code> without moving <code>self</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nError occurred within the <code>Any</code> driver mapping to/from the …\nCheck constraint violation.\nError occurred while decoding a value from a specific …\nColumn index was out of bounds.\nNo column found for the given name.\nError occurred while parsing a connection string.\nError returned from the database.\nAn error that was returned from the database.\nError occurred while decoding a value.\nError occured while encoding a value.\nContains the error value\nRepresents all the ways a method can fail within SQLx.\nThe error kind.\nForeign key constraint violation.\nError communicating with the database backend.\nNot-null constraint violation.\nContains the success value\nAn unmapped error.\n<code>Pool::close</code> was called while we were waiting in …\nA <code>Pool::acquire</code> timed out due to connections not becoming …\nUnexpected or invalid data encountered while communicating …\nA specialized <code>Result</code> type for SQLx.\nNo rows returned by a query that expected to return at …\nError occurred while attempting to establish a TLS …\nType in query doesn’t exist. Likely due to typo or …\nAn unexpected <code>NULL</code> was encountered during decoding.\nUnique/primary key constraint violation.\nA background worker has crashed.\nThe (SQLSTATE) code for the error.\nReturns the name of the constraint that triggered the …\nDowncast this generic database error to a specific …\nDowncast a reference to this generic database error to a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether the error kind is a violation of a check.\nReturns whether the error kind is a violation of a foreign …\nReturns whether the error kind is a violation of a …\nReturns the kind of the error, if supported.\nThe primary, human-readable error message.\nReturns the name of the table that was affected by the …\nDowncast this generic database error to a specific …\nDowncast a reference to this generic database error to a …\nIn the default implementation, a MigrationSource is a …\nMigration Type represents the type of migration\nA resolved set of migrations, ready to be run.\nReversibleDown migrations represents the  delete or …\nReversibleUp migrations represents the  add or update part …\nSimple migration are single file migrations with no up / …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet an iterator over all known migrations.\nCreates a new instance with the given source.\nRun any pending migrations against the database; and, …\nSpecify whether applied migrations that are missing from …\nSpecify whether or not to lock the database during …\nRun down migrations against the database until a specific …\nCheck if a migration version exists.\nA future that resolves when the pool is closed.\nAn asynchronous pool of SQLx database connections.\nA connection managed by a <code>Pool</code>.\nMetadata for the connection being processed by a …\nConfiguration options for <code>Pool</code>.\nLog excessive time taken to acquire a connection at a …\nSet a threshold for reporting excessive time taken to …\nEnable logging of time taken to acquire a connection from …\nSet the maximum amount of time to spend waiting for a …\nPerform an asynchronous action after connecting to the …\nPerform an asynchronous action on a connection before it …\nThe duration since the connection was first opened.\nPerform an asynchronous action on a previously idle …\nClose this connection, allowing the pool to open a …\nClose this connection on-drop, instead of returning it to …\nCreate a new pool from this <code>PoolOptions</code> and immediately …\nCreate a new pool from this <code>PoolOptions</code>, but don’t open …\nCreate a new pool from this <code>PoolOptions</code>, but don’t open …\nCreate a new pool from this <code>PoolOptions</code> and immediately …\nDetach this connection from the pool, allowing it to open …\nExecute the given future until it returns or the pool is …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the threshold for reporting excessive time taken to …\nGet the maximum amount of time to spend waiting for a …\nGet the maximum idle duration for individual connections.\nGet the maximum number of connections that this pool …\nGet the maximum lifetime of individual connections.\nGet the minimum number of connections to maintain at all …\nGet whether <code>test_before_acquire</code> is currently set.\nThe duration that the connection spent in the idle queue.\nSet a maximum idle duration for individual connections.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDetach this connection from the pool, treating it as …\nSet the maximum number of connections that this pool …\nSet the maximum lifetime of individual connections.\nSet the minimum number of connections to maintain at all …\nReturns a default “sane” configuration, suitable for …\nIf true, the health of a connection will be verified by a …\nFirst try a non-SSL connection; if that fails, try an SSL …\nThe keyspace designated by a single 64-bit integer.\nOnly try a non-SSL connection.\nThe keyspace designated by two 32-bit integers.\nA position into the internally-generated query.\nA position (in characters) into the original query.\nA mutex-like type utilizing Postgres advisory locks.\nA wrapper for <code>PgConnection</code> (or a similar type) that …\nA key type natively used by Postgres advisory locks.\nImplementation of <code>Arguments</code> for PostgreSQL.\nOptions and flags which can be used to configure a …\nA connection to a PostgreSQL database.\nA connection in streaming <code>COPY FROM STDIN</code> mode.\nAn error returned from the PostgreSQL database.\nAn alias for <code>Executor&lt;&#39;_, Database = Postgres&gt;</code>.\nProvides information necessary to encode and decode …\nA stream of asynchronous notifications from Postgres.\nAn asynchronous notification from Postgres.\nAn alias for <code>Pool</code>, specialized for Postgres.\nImplements methods for directly executing …\nAn alias for <code>PoolOptions</code>, specialized for Postgres.\nImplementation of <code>Row</code> for PostgreSQL.\nOptions for controlling the level of protection provided …\nImplementation of <code>TransactionManager</code> for PostgreSQL.\nType information for a PostgreSQL type.\nImplementation of <code>Value</code> for PostgreSQL.\nImplementation of <code>ValueRef</code> for PostgreSQL.\nPostgreSQL database driver.\nFirst try an SSL connection; if that fails, try a non-SSL …\nOnly try an SSL connection. If a root CA file is present, …\nOnly try an SSL connection, and verify that the server …\nOnly try an SSL connection; verify that the server …\nSignal that the <code>COPY</code> process should be aborted and any …\nAcquires an exclusive lock using <code>pg_advisory_lock()</code>, …\nSets the application name. Defaults to None\nCreate a <code>PgTypeInfo</code> of an array from the name of its …\nConverts <code>Self::Bigint(bigint)</code> to <code>Some(bigint)</code> and all else …\nThe channel that the notify has been raised on. This can …\nThe SQLSTATE code for this error.\nIf the error is with a specific table column, the name of …\nCheck if a column is expecting data in text format (<code>true</code>) …\nIf the error is with a specific constraint, the name of …\nIssue a <code>COPY FROM STDIN</code> statement and begin streaming data …\nIssue a <code>COPY TO STDOUT</code> statement and begin streaming data …\nIf the error is with a specific data type, the name of the …\nSets the database name. Defaults to be the same as the …\nAn optional secondary error message carrying more detail …\nSets or removes the <code>extra_float_digits</code> connection option.\nThe file name of the source-code location where this error …\nSignal that the <code>COPY</code> process is complete.\nExecute <code>pg_advisory_unlock()</code> for this lock’s key on the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the application name.\nGet the current database name.\nGet the current host.\nGet the options.\nGet the server’s port.\nGet the socket path.\nGet the SSL mode.\nGet the server’s port.\nAn optional suggestion what to do about the problem. This …\nSets the name of the host to connect to.\nSet whether or not to ignore <code>Pool::close_event()</code>. Defaults …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsume this listener, returning a <code>Stream</code> of notifications.\nReturns <code>true</code> if Postgres is expecting data in text or CSV …\nReturns the current key.\nReturns the <em>kind</em> (simple, array, enum, etc.) for this type.\nCancel the release of the advisory lock, keeping it held …\nThe line number of the source-code location where this …\nStarts listening for notifications on a channel. The …\nStarts listening for notifications on all channels.\nThe primary human-readable error message. This should be …\nConstruct a <code>PgAdvisoryLock</code> using the given string as a key.\nCreates a new, default set of options ready for …\nReturns the number of columns expected in the input.\nReturns the OID for this type, if available.\nSet additional startup options for the connection as a …\nSets the password to use if the server demands password …\nThe payload of the notification. An empty payload is …\nSets the port to connect to at the server host.\nIndicates an error cursor position as an index into the …\nThe process ID of the notifying backend process.\nCopy data directly from <code>source</code> to the database without …\nReceives the next notification available from any of the …\nImmediately release the held advisory lock instead of when …\nThe name of the source-code routine reporting this error.\nIf this error is with a specific database object, the name …\nSend a chunk of <code>COPY</code> data.\nSets a custom path to a directory containing a unix domain …\nSets the name of a file containing SSL client certificate.\nSets the SSL client certificate as a PEM-encoded byte …\nSets the name of a file containing SSL client key.\nSets the SSL client key as a PEM-encoded byte slice.\nSets whether or with what priority a secure SSL TCP/IP …\nSets the name of a file containing SSL certificate …\nSets PEM encoded trusted SSL Certificate Authorities (CA).\nSets the capacity of the connection’s statement cache in …\nIf this error is with a specific table, the name of the …\nAcquires an exclusive lock using <code>pg_try_advisory_lock()</code>, …\nReceives the next notification available from any of the …\nReturns <code>true</code> if <code>self</code> can be compared exactly to <code>other</code>.\nConversions between Rust and <strong>Postgres</strong> types.\nStops listening for notifications on a channel. The …\nStops listening for notifications on all channels.\nSets the username to connect as.\nAn indication of the context in which the error occurred. …\nConstruct a <code>PgAdvisoryLock</code> with a manually supplied key.\nCreate a <code>PgTypeInfo</code> from a type name.\nCreate a <code>PgTypeInfo</code> from an OID.\nThe position in characters.\nThe text of a failed internally-generated command. This …\nMatch any label with this prefix, for example foo* matches …\n@ - Match case-insensitively, for example a@ matches A\nLTree labels can only contain [A-Za-z0-9_]\nLTree version not supported\nAn N-dimensional cube with points representing lower-left …\nmatch any of specified labels with optional flags\nmatch none of specified labels with optional flags\nThe PostgreSQL <code>OID</code> type stores an object identifier, used …\nA one-dimensional interval with starting and ending points.\nCase-insensitive text (<code>citext</code>) support for Postgres.\nProvides information necessary to encode and decode …\nKey-value support (<code>hstore</code>) for Postgres.\nContainer for a Label Tree Query (<code>lquery</code>) in Postgres.\nModifiers that can be set to non-star labels\nContainer for a Label Tree (<code>ltree</code>) in Postgres.\nRepresents ltree specific errors\nThe PostgreSQL <code>MONEY</code> type stores a currency amount with a …\nRepresents a moment of time, in a specified timezone.\nA one-dimensional point.\n% - Match initial underscore-separated words\nmatch any label (*) with optional at least / at most …\nAn N-dimensional point (“represented internally as a …\nAdds two monetary values.\nAn assigning add for two monetary values.\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\ncreates ltree from a <code>Vec&lt;PgLTreeLabel&gt;</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\ncreates lquery from an iterator with checking labels\nThe bitwise or (<code>|</code>) of the bits in each flags value.\ncreates ltree from an iterator with checking labels\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\ncreates default/empty lquery\ncreates default/empty ltree\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\npop a query level\npop a label from ltree\npush a query level\npush a label to ltree\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nSubtracts two monetary values.\nThe intersection of a source flags value with the …\nAn assigning subtract for two monetary values.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nConvert a <code>chrono::Duration</code> to a <code>PgInterval</code>.\nConvert a <code>std::time::Duration</code> to a <code>PgInterval</code>\nCreate an <code>LQUERY</code> from an iterator of label strings.\nCreate an <code>LTREE</code> from an iterator of label strings.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nAcquire connections or transactions from a database in a …\nRepresents a single database connection.\nA type that can be decoded from the database.\nEncode a single value to be sent to the database.\nA type that contains or can provide a database connection …\nA record that can be built from a row returned by the …\nRepresents a single row from the database.\nAn explicitly prepared statement.\nIndicates that a SQL type is supported for a database.\nBegin a new transaction or establish a savepoint within …\nThe number of statements currently cached in the …\nRemoves all statements from the cache, closing them on the …\nExplicitly close this database connection.\nGets the column information at <code>index</code>.\nGets the column information at <code>index</code>.\nGet the columns expected to be returned by executing this …\nGets all columns in this statement.\nDetermines if this Rust type is compatible with the given …\nEstablish a new database connection with the options …\nEstablish a new database connection.\nEstablish a new database connection with the provided …\nDecode a new value of this type using a raw value from the …\nEntirely disables statement logging (both slow and …\nWrites the value of <code>self</code> into <code>buf</code> in the expected format …\nWrites the value of <code>self</code> into <code>buf</code> without moving <code>self</code>.\nExecute the query and return the total number of rows …\nExecute multiple queries and return the rows affected from …\nExecute the query and return the generated results as a …\nExecute the query and return all the generated results, …\nExecute multiple queries and return the generated results …\nExecute the query and returns exactly one row.\nExecute the query and returns at most one row.\nParse the <code>ConnectOptions</code> from a URL.\nIndex into the database row and decode a single value.\nIndex into the database row and decode a single value.\nReturns <code>true</code> if this row has no columns.\nReturns the number of columns in this row.\nLog executed statements with a duration above the …\nLog executed statements with the specified <code>level</code>\nGet the expected parameters for this statement.\nChecks if a connection to the database is still valid.\nPrepare the SQL query to inspect the type information of …\nPrepare the SQL query, with parameter type information, to …\nRestore any buffers in the connection to their default …\nGet the original SQL text used to create this statement.\nCreates an owned statement from this statement reference. …\nGet a connection URL that may be used to connect to the …\nExecute the function inside a transaction.\nGets the column information at <code>index</code> or a …\nGets the column information at <code>index</code> or a …\nIndex into the database row and decode a single value.\nIndex into the database row and decode a single value.\nIndex into the database row and decode a single value.\nReturns the canonical SQL type for this Rust type.\nA single SQL query that will map its results to an owned …\nA single SQL query as a prepared statement. Returned by …\nA single SQL query as a prepared statement, mapping …\nA single SQL query as a prepared statement which extracts …\nBind a value for use with this SQL query.\nBind a value for use with this SQL query.\nBind a value for use with this SQL query.\nExecute the query and return the total number of rows …\nExecute multiple queries and return the rows affected from …\nExecute the query and return the generated results as a …\nExecute the query and return the generated results as a …\nExecute the query and return the generated results as a …\nExecute the query and return the generated results as a …\nExecute the query and return all the resulting rows …\nExecute the query and return all the resulting rows …\nExecute the query and return all the resulting rows …\nExecute the query and return all the resulting rows …\nExecute multiple queries and return the generated results …\nExecute multiple queries and return the generated results …\nExecute multiple queries and return the generated results …\nExecute multiple queries and return the generated results …\nExecute the query, returning the first row or …\nExecute the query, returning the first row or …\nExecute the query, returning the first row or …\nExecute the query, returning the first row or …\nExecute the query, returning the first row or <code>None</code> …\nExecute the query, returning the first row or <code>None</code> …\nExecute the query, returning the first row or <code>None</code> …\nExecute the query, returning the first row or <code>None</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMap each row in the result to another type.\nMap each row in the result to another type.\nIf <code>true</code>, the statement will get prepared once and cached …\nIf <code>true</code>, the statement will get prepared once and cached …\nIf <code>true</code>, the statement will get prepared once and cached …\nLike <code>Query::try_bind</code> but immediately returns an error if …\nMap each row in the result to another type.\nMap each row in the result to another type.\nA builder type for constructing queries at runtime.\nA wrapper around <code>QueryBuilder</code> for creating comma(or other …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nPush the separator if applicable, and then the given SQL …\nPush the separator if applicable, then append a bind …\nPush a bind argument placeholder (<code>?</code> or <code>$N</code> for Postgres) …\nPush a SQL fragment without a separator.\nRepresents a JSON array.\nRepresents a JSON boolean.\nJson for json and jsonb fields\nReference to a range of bytes encompassing a single valid …\nRepresents any valid JSON value.\nUUID namespace for Domain Name System (DNS).\nUUID namespace for ISO Object Identifiers (OIDs).\nUUID namespace for Uniform Resource Locators (URLs).\nUUID namespace for X.500 Distinguished Names (DNs).\nRepresents a JSON null value.\nRepresents a JSON number, whether integer or floating …\nRepresents a JSON object.\nRepresents a JSON string.\nMap a SQL text value to/from a Rust type using <code>Display</code> and …\nIndicates that a SQL type is supported for a database.\nA Universally Unique Identifier (UUID).\nIf the <code>Value</code> is an Array, returns the associated vector. …\nIf the <code>Value</code> is an Array, returns the associated mutable …\nIf the <code>Value</code> is a Boolean, returns the associated bool. …\nGet a borrowed <code>Braced</code> formatter.\nReturns a slice of 16 octets containing the value.\nIf the <code>Value</code> is a number, represent it as f64 if possible. …\nReturns the four field values of the UUID.\nGet a borrowed <code>Hyphenated</code> formatter.\nIf the <code>Value</code> is an integer, represent it as i64 if …\nIf the <code>Value</code> is a Null, returns (). Returns None otherwise.\nIf the <code>Value</code> is a Number, returns the associated <code>Number</code>. …\nIf the <code>Value</code> is an Object, returns the associated Map. …\nIf the <code>Value</code> is an Object, returns the associated mutable …\nGet a borrowed <code>Simple</code> formatter.\nIf the <code>Value</code> is a String, returns the associated str. …\nReturns a 128bit value containing the value.\nIf the <code>Value</code> is an integer, represent it as u64 if …\nReturns two 64bit values containing the value.\nGet a borrowed <code>Urn</code> formatter.\nGet a <code>Braced</code> formatter.\nDetermines if this Rust type is compatible with the given …\nA buffer that can be used for <code>encode_...</code> calls, that is …\nDisplay a JSON value as a string.\nReturns the argument unchanged.\nConvert a slice to <code>Value::Array</code>.\nConvert 64-bit floating point number to <code>Value::Number</code>, or …\nConvert 32-bit floating point number to <code>Value::Number</code>, or …\nConvert boolean to <code>Value::Bool</code>.\nReturns the argument unchanged.\nConvert string slice to <code>Value::String</code>.\nConvert <code>String</code> to <code>Value::String</code>.\nConvert <code>Number</code> to <code>Value::Number</code>.\nConvert map (with string keys) to <code>Value::Object</code>.\nConvert a <code>Vec</code> to <code>Value::Array</code>.\nConvert <code>()</code> to <code>Value::Null</code>.\nConvert copy-on-write string to <code>Value::String</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a UUID using the supplied bytes.\nCreates a UUID using the supplied bytes in little endian …\nCreates a reference to a UUID from a reference to the …\nCreates a UUID from four field values.\nCreates a UUID from four field values in little-endian …\nCreate a <code>Value::Object</code> by collecting an iterator of …\nCreate a <code>Value::Array</code> by collecting an iterator of array …\nCreates a UUID using the supplied bytes.\nCreates a UUID using the supplied bytes in little endian …\nConvert an owned <code>String</code> of JSON data to an owned <code>RawValue</code>.\nCreates a UUID from a 128bit value.\nCreates a UUID from a 128bit value in little-endian order.\nCreates a UUID from two 64bit values.\nAccess the JSON text underlying a raw value.\nIndex into a JSON array or map. A string index can be used …\nMutably index into a JSON array or map. A string index can …\nIf the UUID is the correct version (v1, or v6) this will …\nIf the UUID is the correct version (v1, v6, or v7) this …\nReturns the variant of the UUID structure.\nReturns the version of the UUID.\nReturns the version number of the UUID.\nGet a <code>Hyphenated</code> formatter.\nIndex into a <code>serde_json::Value</code> using the syntax <code>value[0]</code> or\nWrite into a <code>serde_json::Value</code> using the syntax …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes self and returns the underlying byte value of the …\nExtract the inner value.\nReturns true if the <code>Value</code> is an Array. Returns false …\nReturns true if the <code>Value</code> is a Boolean. Returns false …\nReturns true if the <code>Value</code> is a number that can be …\nReturns true if the <code>Value</code> is an integer between <code>i64::MIN</code> …\nTests if the UUID is max (all ones).\nTests if the UUID is nil (all zeros).\nReturns true if the <code>Value</code> is a Null. Returns false …\nReturns true if the <code>Value</code> is a Number. Returns false …\nReturns true if the <code>Value</code> is an Object. Returns false …\nReturns true if the <code>Value</code> is a String. Returns false …\nReturns true if the <code>Value</code> is an integer between zero and …\nThe ‘max UUID’ (all ones).\nCreates a random UUID.\nCreates a UUID using a name from a namespace, based on the …\nThe ‘nil UUID’ (all zeros).\nParses a <code>Uuid</code> from a string of hexadecimal digits with …\nLooks up a value by a JSON Pointer.\nLooks up a value by a JSON Pointer and returns a mutable …\nGet a <code>Simple</code> formatter.\nReorders the entries of all <code>Value::Object</code> nested within …\nTakes the value out of the <code>Value</code>, leaving a <code>Null</code> in its …\nReturns the bytes of the UUID in little-endian order.\nReturns the four field values of the UUID in little-endian …\nReturns a 128bit little-endian value containing the value.\nParses a <code>Uuid</code> from a string of hexadecimal digits with …\nParses a <code>Uuid</code> from a string of hexadecimal digits with …\nReturns the canonical SQL type for this Rust type.\nGet a <code>Urn</code> formatter.\nISO 8601 combined date and time with time zone.\nThe time zone with fixed offset, from UTC-23:59:59 to …\nThe local timescale.\nThe maximum possible <code>NaiveDate</code> (December 31, 262142 CE).\nThe maximum possible <code>NaiveDateTime</code>.\nThe maximum possible <code>DateTime&lt;Utc&gt;</code>.\nThe minimum possible <code>NaiveDate</code> (January 1, 262144 BCE).\nThe minimum possible <code>NaiveDateTime</code>.\nThe earliest possible <code>NaiveTime</code>\nThe minimum possible <code>DateTime&lt;Utc&gt;</code>.\nISO 8601 calendar date without timezone. Allows for every …\nISO 8601 combined date and time without timezone.\nISO 8601 time without timezone. Allows for the nanosecond …\nAn associated offset type. This type is used to store the …\nThe time zone.\nThe Unix Epoch, 1970-01-01 00:00:00 UTC.\nThe Unix Epoch, 1970-01-01 00:00:00.\nThe UTC time zone. This is the most efficient time zone …\nMakes a new <code>NaiveDateTime</code> from the current date, hour, …\nMakes a new <code>NaiveDateTime</code> from the current date, hour, …\nMakes a new <code>NaiveDateTime</code> from the current date, hour, …\nMakes a new <code>NaiveDateTime</code> from the current date, hour, …\nMakes a new <code>NaiveDateTime</code> from the current date, hour, …\nMakes a new <code>NaiveDateTime</code> from the current date, hour, …\nMakes a new <code>NaiveDateTime</code> from the current date, hour, …\nMakes a new <code>NaiveDateTime</code> from the current date, hour, …\nConverts the <code>NaiveDateTime</code> into a timezone-aware …\nMakes a new <code>NaiveDateTime</code> from the current date and given …\nConverts the <code>NaiveDateTime</code> into the timezone-aware …\nAdd a duration in <code>Days</code> to the date part of the <code>DateTime</code>.\nAdd a duration in <code>Days</code> to the date\nAdd a duration in <code>Days</code> to the date part of the …\nAdds given <code>Months</code> to the current date and time.\nAdd a duration in <code>Months</code> to the date\nAdds given <code>Months</code> to the current date and time.\nAdds given <code>FixedOffset</code> to the current datetime. Returns …\nAdds given <code>TimeDelta</code> to the current date and time.\nAdds the number of whole days in the given <code>TimeDelta</code> to …\nAdds given <code>TimeDelta</code> to the current date and time.\nSubtract a duration in <code>Days</code> from the date part of the …\nSubtract a duration in <code>Days</code> from the date\nSubtract a duration in <code>Days</code> from the date part of the …\nSubtracts given <code>Months</code> from the current date and time.\nSubtract a duration in <code>Months</code> from the date\nSubtracts given <code>Months</code> from the current date and time.\nSubtracts given <code>FixedOffset</code> from the current datetime. …\nSubtracts given <code>TimeDelta</code> from the current date and time.\nSubtracts the number of whole days in the given <code>TimeDelta</code> …\nSubtracts given <code>TimeDelta</code> from the current date and time.\nRetrieves the date component with an associated timezone.\nRetrieves a date component.\nRetrieves the date component.\nParses a string with the specified format string and …\nReturns the day of month starting from 1.\nReturns the day of month starting from 1.\nReturns the day of month starting from 0.\nReturns the day of month starting from 0.\nMakes a new <code>FixedOffset</code> for the Eastern Hemisphere with …\nMakes a new <code>FixedOffset</code> for the Eastern Hemisphere with …\nFix the offset from UTC to its current value, dropping the …\nFormats the combined date and time per the specified …\nFormats the date with the specified format string. See the …\nFormats the combined date and time with the specified …\nFormats the time with the specified format string. See the …\nFormats the combined date and time with the specified …\nFormats the date with the specified formatting items. …\nFormats the combined date and time with the specified …\nFormats the time with the specified formatting items. …\nConvert this <code>DateTime&lt;Utc&gt;</code> instance into a <code>DateTime&lt;Local&gt;</code> …\nConvert this <code>DateTime&lt;Local&gt;</code> instance into a …\nConvert this <code>DateTime&lt;FixedOffset&gt;</code> instance into a …\nReturns the argument unchanged.\nConvert this <code>DateTime&lt;FixedOffset&gt;</code> instance into a …\nConvert this <code>DateTime&lt;Local&gt;</code> instance into a <code>DateTime&lt;Utc&gt;</code> …\nConvert this <code>DateTime&lt;Utc&gt;</code> instance into a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a <code>NaiveDate</code> to a <code>NaiveDateTime</code> of the same date …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nMakes a new <code>NaiveTime</code> from hour, minute and second.\nMakes a new <code>NaiveTime</code> from hour, minute, second and …\nMakes a new <code>NaiveTime</code> from hour, minute, second and …\nMakes a new <code>NaiveTime</code> from hour, minute, second and …\nMakes a new <code>NaiveTime</code> from hour, minute, second and …\nMakes a new <code>NaiveTime</code> from hour, minute, second and …\nMakes a new <code>NaiveTime</code> from hour, minute, second and …\nMakes a new <code>NaiveTime</code> from hour, minute and second.\nMakes a new <code>NaiveDate</code> from the ISO week date (year, week …\nMakes a new <code>NaiveDate</code> from the ISO week date (year, week …\nMakes a new <code>DateTime</code> from a <code>NaiveDateTime</code> in <em>local</em> time …\nConverts the local <code>NaiveDate</code> to the timezone-aware <code>Date</code> if …\nConverts the local <code>NaiveDateTime</code> to the timezone-aware …\nMakes a new <code>DateTime</code> from its components: a <code>NaiveDateTime</code> …\nMakes a new <code>NaiveDate</code> from a day’s number in the …\nMakes a new <code>NaiveDate</code> from a day’s number in the …\nMakes a new <code>NaiveTime</code> from the number of seconds since …\nMakes a new <code>NaiveTime</code> from the number of seconds since …\nReconstructs the time zone from the offset.\nMakes a new <code>DateTime&lt;Utc&gt;</code> from the number of non-leap …\nMakes a new <code>NaiveDateTime</code> corresponding to a UTC date and …\nCreates a new <code>DateTime&lt;Utc&gt;</code> from the number of non-leap …\nCreates a new NaiveDateTime from microseconds since the …\nMakes a new <code>DateTime&lt;Utc&gt;</code> from the number of non-leap …\nCreates a new NaiveDateTime from milliseconds since the …\nCreates a new <code>DateTime&lt;Utc&gt;</code> from the number of non-leap …\nCreates a new NaiveDateTime from nanoseconds since the …\nMakes a new <code>NaiveDateTime</code> corresponding to a UTC date and …\nMakes a new <code>DateTime</code> from its components: a <code>NaiveDateTime</code> …\nConverts the UTC <code>NaiveDate</code> to the local time. The UTC is …\nConverts the UTC <code>NaiveDateTime</code> to the local time. The UTC …\nMakes a new <code>NaiveDate</code> by counting the number of …\nMakes a new <code>NaiveDate</code> by counting the number of …\nMakes a new <code>NaiveDate</code> from the calendar date (year, month …\nMakes a new <code>NaiveDate</code> from the calendar date (year, month …\nMakes a new <code>NaiveDate</code> from the ordinal date (year and day …\nMakes a new <code>NaiveDate</code> from the ordinal date (year and day …\nReturns the hour number from 0 to 23.\nReturns the hour number from 0 to 23.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMakes a new <code>Date</code> from ISO week date (year and week …\nMakes a new <code>Date</code> from ISO week date (year and week …\nReturns an iterator that steps by days across all …\nReturns an iterator that steps by weeks across all …\nReturns <code>true</code> if this is a leap year.\nReturns the number of seconds to add to convert from UTC …\nReturns the minute number from 0 to 59.\nReturns the minute number from 0 to 59.\nReturns the month number starting from 1.\nReturns the month number starting from 1.\nReturns the month number starting from 0.\nReturns the month number starting from 0.\nReturns a view to the naive local datetime.\nReturns a view to the naive UTC datetime.\nReturns the number of nanoseconds since the whole non-leap …\nReturns the number of nanoseconds since the whole non-leap …\nMakes a new <code>NaiveDateTime</code> from date and time components. …\nReturns a <code>DateTime&lt;Local&gt;</code> which corresponds to the current …\nReturns a <code>DateTime&lt;Utc&gt;</code> which corresponds to the current …\nReturns the number of non-leap seconds past the last …\nRetrieves an associated offset from UTC.\nCreates the offset(s) for given local <code>NaiveDate</code> if …\nCreates the offset(s) for given local <code>NaiveDateTime</code> if …\nCreates the offset for given UTC <code>NaiveDate</code>. This cannot …\nCreates the offset for given UTC <code>NaiveDateTime</code>. This …\nReturns the day of year starting from 1.\nReturns the day of year starting from 1.\nReturns the day of year starting from 0.\nReturns the day of year starting from 0.\nAdds given <code>TimeDelta</code> to the current time, and also returns …\nSubtracts given <code>TimeDelta</code> from the current time, and also …\nParses a string from a user-specified format into a …\nParses a string from a user-specified format into a new …\nParses a string with the specified format string and …\nParses a string from a user-specified format into a new …\nParses an RFC 2822 date-and-time string into a …\nParses an RFC 3339 date-and-time string into a …\nParses a string from a user-specified format into a …\nParses a string with the specified format string and …\nParses a string with the specified format string and …\nParses a string with the specified format string and …\nCompare two DateTimes based on their true time, ignoring …\nMakes a new <code>NaiveDate</code> for the previous calendar date.\nMakes a new <code>NaiveDate</code> for the previous calendar date.\nReturns the second number from 0 to 59.\nReturns the second number from 0 to 59.\nSubtracts another <code>DateTime</code> from the current date and time. …\nSubtracts another <code>NaiveDate</code> from the current date. Returns …\nSubtracts another <code>NaiveDateTime</code> from the current date and …\nSubtracts another <code>NaiveTime</code> from the current time. Returns …\nMakes a new <code>NaiveDate</code> for the next calendar date.\nMakes a new <code>NaiveDate</code> for the next calendar date.\nRetrieves the time component.\nRetrieves a time component.\nMakes a new <code>DateTime</code> from the number of non-leap seconds …\nReturns the number of non-leap seconds since January 1, …\nReturns the number of non-leap seconds since the midnight …\nMakes a new <code>DateTime</code> from the number of non-leap …\nReturns the number of non-leap-microseconds since January …\nReturns the number of non-leap <em>microseconds</em> since midnight …\nMakes a new <code>DateTime</code> from the number of non-leap …\nReturns the number of non-leap-milliseconds since January …\nReturns the number of non-leap <em>milliseconds</em> since midnight …\nMakes a new <code>DateTime</code> from the number of non-leap …\nMakes a new <code>DateTime</code> from the number of non-leap …\nReturns the number of non-leap-nanoseconds since January …\nReturns the number of non-leap <em>nanoseconds</em> since midnight …\nReturns the number of non-leap-nanoseconds since January …\nReturns the number of non-leap <em>nanoseconds</em> since midnight …\nMakes a new <code>DateTime</code> from the number of non-leap seconds …\nReturns the number of microseconds since the last second …\nReturns the number of microseconds since the last whole …\nReturns the number of milliseconds since the last second …\nReturns the number of milliseconds since the last whole …\nReturns the number of nanoseconds since the last second …\nReturns the number of nanoseconds since the last whole …\nRetrieves an associated time zone.\nReturns an RFC 2822 date and time string such as …\nReturns an RFC 3339 and ISO 8601 date and time string such …\nReturn an RFC 3339 and ISO 8601 date and time string with …\nTurn this <code>DateTime</code> into a <code>DateTime&lt;Utc&gt;</code>, dropping the …\nReturns a <code>Date</code> which corresponds to the current date.\nReturns a <code>Date</code> which corresponds to the current date.\nReturns the number of seconds to add to convert from the …\nReturns the <code>NaiveWeek</code> that the date belongs to, starting …\nReturns the day of week.\nReturns the day of week.\nMakes a new <code>FixedOffset</code> for the Western Hemisphere with …\nMakes a new <code>FixedOffset</code> for the Western Hemisphere with …\nMakes a new <code>DateTime</code> with the day of month (starting from …\nMakes a new <code>NaiveDate</code> with the day of month (starting from …\nMakes a new <code>NaiveDateTime</code> with the day of month (starting …\nMakes a new <code>DateTime</code> with the day of month (starting from …\nMakes a new <code>NaiveDate</code> with the day of month (starting from …\nMakes a new <code>NaiveDateTime</code> with the day of month (starting …\nMakes a new <code>DateTime</code> with the hour number changed.\nMakes a new <code>NaiveDateTime</code> with the hour number changed.\nMakes a new <code>NaiveTime</code> with the hour number changed.\nMakes a new <code>DateTime</code> with the minute number changed.\nMakes a new <code>NaiveDateTime</code> with the minute number changed.\nMakes a new <code>NaiveTime</code> with the minute number changed.\nMakes a new <code>DateTime</code> with the month number (starting from …\nMakes a new <code>NaiveDate</code> with the month number (starting from …\nMakes a new <code>NaiveDateTime</code> with the month number (starting …\nMakes a new <code>DateTime</code> with the month number (starting from …\nMakes a new <code>NaiveDate</code> with the month number (starting from …\nMakes a new <code>NaiveDateTime</code> with the month number (starting …\nMakes a new <code>DateTime</code> with nanoseconds since the whole …\nMakes a new <code>NaiveDateTime</code> with nanoseconds since the whole …\nMakes a new <code>NaiveTime</code> with nanoseconds since the whole …\nMakes a new <code>DateTime</code> with the day of year (starting from …\nMakes a new <code>NaiveDate</code> with the day of year (starting from …\nMakes a new <code>NaiveDateTime</code> with the day of year (starting …\nMakes a new <code>DateTime</code> with the day of year (starting from …\nMakes a new <code>NaiveDate</code> with the day of year (starting from …\nMakes a new <code>NaiveDateTime</code> with the day of year (starting …\nMakes a new <code>DateTime</code> with the second number changed.\nMakes a new <code>NaiveDateTime</code> with the second number changed.\nMakes a new <code>NaiveTime</code> with the second number changed.\nSet the time to a new fixed time on the existing date.\nChanges the associated time zone. The returned <code>DateTime</code> …\nMakes a new <code>DateTime</code> with the year number changed, while …\nMakes a new <code>NaiveDate</code> with the year number changed, while …\nMakes a new <code>NaiveDateTime</code> with the year number changed, …\nMake a new <code>DateTime</code> from year, month, day, time components …\nReturns the year number in the calendar date.\nReturns the year number in the calendar date.\nRetrieve the elapsed years from now to the given <code>DateTime</code>.\nReturns the number of whole years from the given <code>base</code> …\nMakes a new <code>Date</code> from year, month, day and the current …\nMakes a new <code>Date</code> from year, month, day and the current …\nMakes a new <code>Date</code> from year, day of year (DOY or “ordinal…\nMakes a new <code>Date</code> from year, day of year (DOY or “ordinal…\nA builder for creating a UUID.\nA 128-bit (16 byte) buffer containing the UUID.\nA counter that can be used by versions 1 and 6 UUIDs to …\nVersion 8: Custom.\nVersion 2: DCE Security.\nA general error that can occur when working with UUIDs.\nReserved for future expansion.\nVersion 1: Timestamp and node ID.\nThe “max” (all ones) UUID.\nVersion 3: MD5 hash.\nReserved by Microsoft for backward compatibility.\nReserved by the NCS for backward compatibility.\nThe “nil” (all zeros) UUID.\nAn empty counter that will always return the value <code>0</code>.\nThe type of sequence returned by this counter.\nAs described in the RFC 9562 Specification (default). (for …\nVersion 4: Random.\nVersion 5: SHA-1 hash.\nVersion 6: Sortable Timestamp and node ID.\nVersion 7: Timestamp and random.\nA timestamp that can be encoded into a UUID.\nA Universally Unique Identifier (UUID).\nThe reserved variants of UUIDs.\nThe version of the UUID, denoting the generating algorithm.\nGet a reference to the underlying <code>Uuid</code>.\nAdapters for alternative string formats.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a <code>Builder</code> using the supplied bytes.\nCreates a <code>Builder</code> using the supplied bytes in little …\nCreates a <code>Builder</code> for a version 8 UUID using the supplied …\nCreates a <code>Builder</code> from four field values.\nCreates a <code>Builder</code> from four field values.\nConstruct a <code>Timestamp</code> from the number of 100 nanosecond …\nCreates a <code>Builder</code> for a version 1 UUID using the supplied …\nCreates a <code>Builder</code> for a version 3 UUID using the supplied …\nCreates a <code>Builder</code> for a version 4 UUID using the supplied …\nCreates a <code>Builder</code> for a version 5 UUID using the supplied …\nCreates a <code>Builder</code> using the supplied bytes.\nCreates a <code>Builder</code> using the supplied bytes in little …\nCreates a <code>Builder</code> for a version 6 UUID using the supplied …\nCreates a <code>Builder</code> from a 128bit value.\nCreates a UUID from a 128bit value in little-endian order.\nConstruct a <code>Timestamp</code> from a Unix timestamp and up to a …\nConstruct a <code>Timestamp</code> from a Unix timestamp and up to a …\nCreates a <code>Builder</code> for a version 7 UUID using the supplied …\nGet the next value in the sequence to feed into a …\nGet the next value in the sequence, potentially also …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert the builder into a <code>Uuid</code>.\nCreates a <code>Builder</code> with an initial <code>Uuid::nil</code>.\nGet a timestamp representing the current system time and …\nAdapters for alternative <code>serde</code> formats.\nSpecifies the variant of the UUID.\nSpecifies the version number of the UUID.\nGenerating UUIDs from timestamps.\nGet the value of the timestamp as the number of 100 …\nGet the value of the timestamp as a Unix timestamp, as …\nThe number of usable bits from the least significant bit …\nParse <code>Uuid</code>s from string literals at compile time.\nSpecifies the variant of the UUID.\nSpecifies the version number of the UUID.\nFormat a <code>Uuid</code> as a braced hyphenated string, like …\nFormat a <code>Uuid</code> as a hyphenated string, like …\nThe length of a hyphenated <code>Uuid</code> string.\nThe length of a simple <code>Uuid</code> string.\nThe length of a URN <code>Uuid</code> string.\nThe length of a braced <code>Uuid</code> string.\nFormat a <code>Uuid</code> as a simple string, like …\nFormat a <code>Uuid</code> as a URN string, like …\nGet a reference to the underlying <code>Uuid</code>.\nGet a reference to the underlying <code>Uuid</code>.\nGet a reference to the underlying <code>Uuid</code>.\nGet a reference to the underlying <code>Uuid</code>.\nWrites the <code>Uuid</code> as a lower-case hyphenated string to <code>buffer</code>…\nWrites the <code>Uuid</code> as a lower-case simple string to <code>buffer</code>, …\nWrites the <code>Uuid</code> as a lower-case URN string to <code>buffer</code>, and …\nWrites the <code>Uuid</code> as a lower-case hyphenated string …\nWrites the <code>Uuid</code> as an upper-case hyphenated string to …\nWrites the <code>Uuid</code> as an upper-case simple string to <code>buffer</code>, …\nWrites the <code>Uuid</code> as an upper-case URN string to <code>buffer</code>, and …\nWrites the <code>Uuid</code> as an upper-case hyphenated string …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a <code>Hyphenated</code> from a <code>Uuid</code>.\nCreates a <code>Simple</code> from a <code>Uuid</code>.\nCreates a <code>Urn</code> from a <code>Uuid</code>.\nCreates a <code>Braced</code> from a <code>Uuid</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes the <code>Hyphenated</code>, returning the underlying <code>Uuid</code>.\nConsumes the <code>Simple</code>, returning the underlying <code>Uuid</code>.\nConsumes the <code>Urn</code>, returning the underlying <code>Uuid</code>.\nConsumes the <code>Braced</code>, returning the underlying <code>Uuid</code>.\nSerialize from a <code>Uuid</code> as a <code>uuid::fmt::Braced</code>\nSerialize a <code>Uuid</code> as a <code>[u8; 16]</code>.\nSerialize from a <code>Uuid</code> as a <code>uuid::fmt::Simple</code>\nSerialize from a <code>Uuid</code> as a <code>uuid::fmt::Urn</code>\nDeserialize a braced Uuid string as a <code>Uuid</code>\nSerialize from a <code>Uuid</code> as a <code>uuid::fmt::Braced</code>\nDeserialize a <code>[u8; 16]</code> as a <code>Uuid</code>\nSerialize from a <code>Uuid</code> as a <code>[u8; 16]</code>\nDeserialize a simple Uuid string as a <code>Uuid</code>\nSerialize from a <code>Uuid</code> as a <code>uuid::fmt::Simple</code>\nDeserialize a urn Uuid string as a <code>Uuid</code>\nSerialize from a <code>Uuid</code> as a <code>uuid::fmt::Urn</code>\nA counter that can be used by versions 1 and 6 UUIDs to …\nThe type of sequence returned by this counter.\nA timestamp that can be encoded into a UUID.\nThe number of 100 nanosecond ticks between the RFC 9562 …\nDefault implementations for the <code>ClockSequence</code> trait.\nGet the next value in the sequence to feed into a …\nGet the next value in the sequence, potentially also …\nThe number of usable bits from the least significant bit …\nAn empty counter that will always return the value <code>0</code>.\nA wrapper for a context that uses thread-local storage.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nWrap a thread-local container with a context.")