searchState.loadedDescShard("sqlx_postgres", 0, "<strong>PostgreSQL</strong> database driver.\nFirst try a non-SSL connection; if that fails, try an SSL …\nThe keyspace designated by a single 64-bit integer.\nOnly try a non-SSL connection.\nThe keyspace designated by two 32-bit integers.\nA position into the internally-generated query.\nA position (in characters) into the original query.\nA mutex-like type utilizing Postgres advisory locks.\nA wrapper for <code>PgConnection</code> (or a similar type) that …\nA key type natively used by Postgres advisory locks.\nImplementation of <code>Arguments</code> for PostgreSQL.\nOptions and flags which can be used to configure a …\nA connection to a PostgreSQL database.\nA connection in streaming <code>COPY FROM STDIN</code> mode.\nAn error returned from the PostgreSQL database.\nAn alias for <code>Executor&lt;&#39;_, Database = Postgres&gt;</code>.\nA stream of asynchronous notifications from Postgres.\nAn asynchronous notification from Postgres.\nAn alias for <code>Pool</code>, specialized for Postgres.\nImplements methods for directly executing …\nAn alias for <code>PoolOptions</code>, specialized for Postgres.\nImplementation of <code>Row</code> for PostgreSQL.\nOptions for controlling the level of protection provided …\nAn alias for <code>Transaction</code>, specialized for Postgres.\nImplementation of <code>TransactionManager</code> for PostgreSQL.\nType information for a PostgreSQL type.\nImplementation of <code>Value</code> for PostgreSQL.\nImplementation of <code>ValueRef</code> for PostgreSQL.\nPostgreSQL database driver.\nFirst try an SSL connection; if that fails, try a non-SSL …\nOnly try an SSL connection. If a root CA file is present, …\nOnly try an SSL connection, and verify that the server …\nOnly try an SSL connection; verify that the server …\nSignal that the <code>COPY</code> process should be aborted and any …\nAcquires an exclusive lock using <code>pg_advisory_lock()</code>, …\nSets the application name. Defaults to None\nCreate a <code>PgTypeInfo</code> of an array from the name of its …\nConverts <code>Self::Bigint(bigint)</code> to <code>Some(bigint)</code> and all else …\nThe channel that the notify has been raised on. This can …\nThe SQLSTATE code for this error.\nIf the error is with a specific table column, the name of …\nCheck if a column is expecting data in text format (<code>true</code>) …\nIf the error is with a specific constraint, the name of …\nIssue a <code>COPY FROM STDIN</code> statement and begin streaming data …\nIssue a <code>COPY FROM STDIN</code> statement and transition the …\nIssue a <code>COPY TO STDOUT</code> statement and begin streaming data …\nIssue a <code>COPY TO STDOUT</code> statement and transition the …\nIf the error is with a specific data type, the name of the …\nSets the database name. Defaults to be the same as the …\nAn optional secondary error message carrying more detail …\nSet whether a lost connection in <code>try_recv()</code> should be …\nSets or removes the <code>extra_float_digits</code> connection option.\nThe file name of the source-code location where this error …\nSignal that the <code>COPY</code> process is complete.\nExecute <code>pg_advisory_unlock()</code> for this lock’s key on the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the application name.\nGet the current database name.\nGet the current host.\nGet the options.\nGet the server’s port.\nGet the socket path.\nGet the SSL mode.\nGet the server’s port.\nAn optional suggestion what to do about the problem. This …\nSets the name of the host to connect to.\nSet whether or not to ignore <code>Pool::close_event()</code>. Defaults …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsume this listener, returning a <code>Stream</code> of notifications.\nReturns <code>true</code> if Postgres is expecting data in text or CSV …\nReturns the current key.\nReturns the <em>kind</em> (simple, array, enum, etc.) for this type.\nCancel the release of the advisory lock, keeping it held …\nThe line number of the source-code location where this …\nStarts listening for notifications on a channel. The …\nStarts listening for notifications on all channels.\nThe primary human-readable error message. This should be …\nConstruct a <code>PgAdvisoryLock</code> using the given string as a key.\nCreate a default set of connection options populated from …\nCreate a default set of connection options <em>without</em> reading …\nReceives the next notification that already exists in the …\nReturns the number of columns expected in the input.\nReturns the OID for this type, if available.\nSet additional startup options for the connection as a …\nSets the password to use if the server demands password …\nThe payload of the notification. An empty payload is …\nSets the port to connect to at the server host.\nIndicates an error cursor position as an index into the …\nThe process ID of the notifying backend process.\nCopy data directly from <code>source</code> to the database without …\nReceives the next notification available from any of the …\nReturns the 1-based index of this column in its parent …\nReturns the OID of the table this column is from, if …\nImmediately release the held advisory lock instead of when …\nThe name of the source-code routine reporting this error.\nIf this error is with a specific database object, the name …\nSend a chunk of <code>COPY</code> data.\nthe version number of the server in <code>libpq</code> format\nSets a custom path to a directory containing a unix domain …\nSets the name of a file containing SSL client certificate.\nSets the SSL client certificate as a PEM-encoded byte …\nSets the name of a file containing SSL client key.\nSets the SSL client key as a PEM-encoded byte slice.\nSets whether or with what priority a secure SSL TCP/IP …\nSets the name of a file containing SSL certificate …\nSets PEM encoded trusted SSL Certificate Authorities (CA).\nSets the capacity of the connection’s statement cache in …\nIf this error is with a specific table, the name of the …\nAcquires an exclusive lock using <code>pg_try_advisory_lock()</code>, …\nReceives the next notification available from any of the …\nReturns <code>true</code> if <code>self</code> can be compared exactly to <code>other</code>.\nConversions between Rust and <strong>Postgres</strong> types.\nStops listening for notifications on a channel. The …\nStops listening for notifications on all channels.\nSets the username to connect as.\nAn indication of the context in which the error occurred. …\nConstruct a <code>PgAdvisoryLock</code> with a manually supplied key.\nCreate a <code>PgTypeInfo</code> from a type name.\nCreate a <code>PgTypeInfo</code> from an OID.\nThe position in characters.\nThe text of a failed internally-generated command. This …\nMatch any label with this prefix, for example foo* matches …\n@ - Match case-insensitively, for example a@ matches A\nLTree labels can only contain [A-Za-z0-9_]\nLTree version not supported\nAn N-dimensional cube with points representing lower-left …\nmatch any of specified labels with optional flags\nmatch none of specified labels with optional flags\nThe PostgreSQL <code>OID</code> type stores an object identifier, used …\nA one-dimensional interval with starting and ending points.\nPostgres Geometric Box type\nCase-insensitive text (<code>citext</code>) support for Postgres.\nPostgres Geometric Circle type\nProvides information necessary to encode and decode …\nKey-value support (<code>hstore</code>) for Postgres.\nContainer for a Label Tree Query (<code>lquery</code>) in Postgres.\nModifiers that can be set to non-star labels\nPostgres Geometric Line Segment type\nContainer for a Label Tree (<code>ltree</code>) in Postgres.\nRepresents ltree specific errors\nPostgres Geometric Line type\nThe PostgreSQL <code>MONEY</code> type stores a currency amount with a …\nPostgres Geometric Path type\nPostgres Geometric Point type\nPostgres Geometric Polygon type\nRepresents a moment of time, in a specified timezone.\nA one-dimensional point.\n% - Match initial underscore-separated words\nmatch any label (*) with optional at least / at most …\nAn N-dimensional point (“represented internally as a …\nAdds two monetary values.\nAn assigning add for two monetary values.\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\ncreates ltree from a <code>Vec&lt;PgLTreeLabel&gt;</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\ncreates lquery from an iterator with checking labels\nThe bitwise or (<code>|</code>) of the bits in each flags value.\ncreates ltree from an iterator with checking labels\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\ncreates default/empty lquery\ncreates default/empty ltree\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\npop a query level\npop a label from ltree\npush a query level\npush a label to ltree\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nSubtracts two monetary values.\nThe intersection of a source flags value with the …\nAn assigning subtract for two monetary values.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nConvert a <code>std::time::Duration</code> to a <code>PgInterval</code>\nConvert a <code>chrono::Duration</code> to a <code>PgInterval</code>.\nCreate an <code>LQUERY</code> from an iterator of label strings.\nCreate an <code>LTREE</code> from an iterator of label strings.\nThe bitwise or (<code>|</code>) of the bits in two flags values.")