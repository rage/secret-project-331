searchState.loadedDescShard("tar", 0, "A library for reading and writing TAR archives\nA top-level representation of an archive file.\nBlock device\nA structure for building archives\nCharacter device\nAll supported metadata, including mod/access times and …\nImplementation-defined ‘high-performance’ type, …\nOnly metadata that is directly relevant to the identity of …\nDirectory\nAn iterator over the entries of an archive.\nA read-only view into an entry of an archive.\nIndicate for the type of file described by a header.\nNamed pipe (fifo)\nA file was unpacked.\nGNU extension - long link name (link target)\nGNU extension - long file name\nGNU extension - sparse file\nRepresentation of the entry found to represent extended …\nRepresentation of the header of an entry in an archive\nDescription of the header of a spare entry.\nRepresentation of the header of an entry in an archive\nDeclares the information that should be included when …\nHard link\nRepresentation of the header of an entry in an archive\nA key/value pair corresponding to a pax extension.\nAn iterator over the pax extensions in an archive entry.\nRegular file\nSymbolic link\nWhen unpacking items the unpacked thing is returned to …\nRepresentation of the header of an entry in an archive\nGlobal extended header\nExtended Header\nAdds a new entry to this archive.\nAdds a new entry to this archive with the specified path.\nAdds a directory to this archive with the given path as …\nAdds a directory and all of its contents (recursively) to …\nAdds a file to this archive with the given path as the …\nAdds a new link (symbolic or hard) entry to this archive …\nAdds a file on the local filesystem to this archive.\nAdds a file on the local filesystem to this archive under …\nReturns the raw underlying byte that this entry type …\nReturns a view into this header as a byte array.\nReturns a view into this header as a byte array.\nView this archive header as a raw GNU archive header.\nSame as <code>as_gnu</code>, but the mutable version.\nViews this as a normal <code>Header</code>\nViews this as a normal <code>Header</code>\nViews this as a normal <code>Header</code>\nViews this as a normal <code>Header</code>\nViews this as a normal <code>Header</code>\nViews this as a normal <code>Header</code>\nReturns a view into this header as a byte array.\nReturns a view into this header as a byte array.\nView this archive header as a raw “old” archive header.\nSame as <code>as_old</code>, but the mutable version.\nView this archive header as a raw UStar archive header.\nSame as <code>as_ustar_mut</code>, but the mutable version.\nReturns the last modification time in Unix time format\nCreates a new entry type representing a block special …\nCreates a new entry type representing a character special …\nReturns the checksum field of this header.\nCreates a new entry type representing a contiguous file.\nReturns the last modification time in Unix time format\nReturns the device major number, if present.\nSee <code>Header::device_major</code>\nSee <code>Header::device_major</code>\nReturns the device minor number, if present.\nSee <code>Header::device_minor</code>\nSee <code>Header::device_minor</code>\nCreates a new entry type representing a directory.\nConstruct an iterator over the entries in this archive.\nConstruct an iterator over the entries in this archive for …\nReturns the size of entry’s data this header represents.\nReturns the type of file described by this header.\nCreates a new entry type representing a FIFO.\nCreates a new entry type representing a regular file.\nFinish writing this archive, emitting the termination …\nFollow symlinks, archiving the contents of the file they …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nTreats the given byte slice as a header.\nGets mutable reference to the underlying object.\nGets shared reference to the underlying object.\nReturns the value of the group’s user ID field\nReturn the group name of the owner of this file.\nReturns the group name of the owner of this file, if …\nSee <code>Header::groupname_bytes</code>\nSee <code>Header::groupname_bytes</code>\nCreates a new entry type representing a hard link.\nReturns access to the header of this entry in the archive.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUnwrap this archive, returning the underlying object.\nUnwrap this archive, returning the underlying object.\nReturns whether this type represents a block special …\nReturns whether this type represents a character special …\nReturns whether this type represents a contiguous file.\nReturns whether this type represents a directory.\nReturns true if block is empty\nIndicates whether this header will be followed by …\nIndicates if another sparse header should be following …\nReturns whether this type represents a FIFO.\nReturns whether this type represents a regular file.\nReturns whether this type represents a GNU long link …\nReturns whether this type represents a GNU long name …\nReturns whether this type represents a GNU sparse header.\nReturns whether this type represents a hard link.\nReturns whether this type represents PAX global …\nReturns whether this type represents PAX local extensions; …\nReturns whether this type represents a symlink.\nReturns the key for this key/value pair parsed as a string.\nReturns the underlying raw bytes for the key of this …\nLength of the block\nReturns the link name for this entry, if any is found.\nReturns the link name stored in this header, if any is …\nReturns the link name for this entry, in bytes, if listed.\nReturns the link name stored in this header as a byte …\nChanges the HeaderMode that will be used when reading fs …\nReturns the mode bits for this file\nReturns the last modification time in Unix time format\nCreate a new archive with the underlying object as the …\nCreate a new archive builder with the underlying object as …\nCrates a new zero’d out sparse header entry.\nCreate new pax extensions iterator from the given entry …\nCreates a new entry type from a raw byte.\nCreates a new blank GNU header.\nCreates a new blank old header.\nCreates a new blank UStar header.\nOffset of the block from the start of the file\nReturns the path name for this entry.\nReturns the raw path name stored in this header.\nReturns the raw bytes listed for this entry.\nReturns the pathname stored in this header as a byte array.\nSee <code>Header::path_bytes</code>\nReturns an iterator over the pax extensions contained in …\nIndicates whether this iterator will return raw entries or …\nReturns the starting position, in bytes, of the file of …\nReturns the starting position, in bytes, of the header of …\nReturns the “real size” of the file this header …\nEncodes the <code>atime</code> provided into this header.\nSets the checksum field of this header based on the …\nEncodes the <code>ctime</code> provided into this header.\nEncodes the value <code>major</code> into the dev_major field of this …\nSee <code>Header::set_device_major</code>\nSee <code>Header::set_device_major</code>\nEncodes the value <code>minor</code> into the dev_minor field of this …\nSee <code>Header::set_device_minor</code>\nSee <code>Header::set_device_minor</code>\nSets the type of file that will be described by this …\nEncodes the <code>gid</code> provided into this header.\nSets the group name inside this header.\nSee <code>Header::set_groupname</code>\nSee <code>Header::set_groupname</code>\nIgnore zeroed headers, which would otherwise indicate to …\nSets the link name for this header.\nSets the link name for this header without any …\nSet the mask of the permission bits when unpacking this …\nSet the mask of the permission bits when unpacking this …\nBlanket sets the metadata in this header from the metadata …\nSets only the metadata relevant to the given HeaderMode in …\nEncodes the <code>mode</code> provided into this header.\nEncodes the <code>mtime</code> provided into this header.\nIndicate whether files and symlinks should be overwritten …\nSets the path name for this header.\nSee <code>Header::set_path</code>\nIndicate whether access time information is preserved when …\nIndicate whether access time information is preserved when …\nIndicate whether numeric ownership ids (like uid and gid …\nIndicate whether extended permissions (like suid on Unix) …\nIndicate whether extended permissions (like suid on Unix) …\nEncodes the <code>size</code> argument into the size field of this …\nEncodes the <code>uid</code> provided into this header.\nIndicate whether extended file attributes (xattrs on Unix) …\nIndicate whether extended file attributes (xattrs on Unix) …\nSets the username inside this header.\nSee <code>Header::set_username</code>\nSee <code>Header::set_username</code>\nReturns access to the size of this entry in the archive.\nReturns the file size this header represents.\nReturns a slice of the underlying sparse headers.\nCreates a new entry type representing a symlink.\nReturns the value of the owner’s user ID field\nUnpacks the contents tarball into the specified <code>dst</code>.\nWrites this file to the specified location.\nExtracts this file under the specified path, avoiding …\nReturn the user name of the owner of this file.\nReturns the user name of the owner of this file, if …\nSee <code>Header::username_bytes</code>\nSee <code>Header::username_bytes</code>\nReturns the value for this key/value pair parsed as a …\nReturns the underlying raw bytes for this value of this …")