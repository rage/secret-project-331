searchState.loadedDescShard("unicode_properties", 0, "Query character Unicode properties according to Unicode …\n<code>Pe</code>, a closing punctuation mark (of a pair)\n<code>Pc</code>, a connecting punctuation mark, like a tie\n<code>Cc</code>, a C0 or C1 control code\n<code>Sc</code>, a currency sign\n<code>Pd</code>, a dash or hyphen punctuation mark\n<code>Nd</code>, a decimal digit\n<code>Emoji=YES</code>, <code>Emoji_Component=NO</code>;<code>Emoji_Modifier_Base=YES</code>\n<code>Emoji=YES</code>, <code>Emoji_Component=NO</code>\n<code>Emoji=YES</code>, <code>Emoji_Component=YES</code>\n<code>Emoji=YES</code>, <code>Emoji_Component=NO</code>;<code>Emoji_Presentation=YES</code>\n<code>Emoji=YES</code>, <code>Emoji_Component=YES</code>;<code>Emoji_Presentation=YES</code>\n<code>Emoji=YES</code>, <code>Emoji_Component=YES</code>;<code>Emoji_Presentation=YES</code>, …\n<code>Emoji=YES</code>, <code>Emoji_Component=NO</code>;<code>Emoji_Presentation=YES</code>, …\nThe emoji character properties of a character.\n<code>Me</code>, an enclosing combining mark\n<code>Pf</code>, a final quotation mark\n<code>Cf</code>, a format control character\nThe most general classification of a character.\nGroupings of the most general classification of a …\n<code>Pi</code>, an initial quotation mark\nLu | Ll | Lt | Lm | Lo\n<code>Nl</code>, a letterlike numeric character\n<code>Zl</code>, U+2028 LINE SEPARATOR only\n<code>Ll</code>, a lowercase letter\nMn | Mc | Me\n<code>Sm</code>, a symbol of mathematical use\n<code>Lm</code>, a modifier letter\n<code>Sk</code>, a non-letterlike modifier symbol\n<code>Emoji=NO</code>, <code>Emoji_Component=NO</code>\n<code>Emoji=NO</code>, <code>Emoji_Component=YES</code>\n<code>Mn</code>, a nonspacing combining mark (zero advance width)\nNd | Nl | No\n<code>Ps</code>, an opening punctuation mark (of a pair)\nCc | Cf | Cs | Co | Cn\n<code>Lo</code>, other letters, including syllables and ideographs\n<code>No</code>, a numeric character of other type\n<code>Po</code>, a punctuation mark of other type\n<code>So</code>, a symbol of other type\n<code>Zp</code>, U+2029 PARAGRAPH SEPARATOR only\n<code>Co</code>, a private-use character\nPc | Pd | Ps | Pe | Pi | Pf | Po\nZs | Zl | Zp\n<code>Zs</code>, a space character (of various non-zero widths)\n<code>Mc</code>, a spacing combining mark (positive advance width)\n<code>Cs</code>, a surrogate code point\nSm | Sc | Sk | So\n<code>Lt</code>, a digraphic character, with first part uppercase\nThe version of Unicode that this version of …\n<code>Cn</code>, a reserved unassigned code point or a noncharacter\nQuery the emoji character properties of a character.\nQuery the general category property of a character.\n<code>Lu</code>, an uppercase letter\nQuery the emoji character properties of a character.\nReturns the emoji character properties in a status enum.\nQuery the general category property of a character.\nQueries the most general classification of a character.\nQueries the grouping of the most general classification of …\nChecks whether this character is recommended for use as …\nChecks whether this character occurs in emoji sequences, …\nChecks whether this character are used in emoji sequences …\nQueries whether the most general classification of a …\n<code>Emoji=YES</code>, <code>Emoji_Component=NO</code>;<code>Emoji_Modifier_Base=YES</code>\n<code>Emoji=YES</code>, <code>Emoji_Component=NO</code>\n<code>Emoji=YES</code>, <code>Emoji_Component=YES</code>\n<code>Emoji=YES</code>, <code>Emoji_Component=NO</code>;<code>Emoji_Presentation=YES</code>\n<code>Emoji=YES</code>, <code>Emoji_Component=YES</code>;<code>Emoji_Presentation=YES</code>\n<code>Emoji=YES</code>, <code>Emoji_Component=YES</code>;<code>Emoji_Presentation=YES</code>, …\n<code>Emoji=YES</code>, <code>Emoji_Component=NO</code>;<code>Emoji_Presentation=YES</code>, …\nThe emoji character properties of a character.\n<code>Emoji=NO</code>, <code>Emoji_Component=NO</code>\n<code>Emoji=NO</code>, <code>Emoji_Component=YES</code>\nQuery the emoji character properties of a character.\nReturns the emoji character properties in a status enum.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nChecks whether this character is recommended for use as …\nChecks whether this character occurs in emoji sequences, …\nChecks whether this character are used in emoji sequences …\nChecks whether this character is the U+FE0F VARIATION …\nChecks whether this character is one of the Regional …\nChecks whether this character is one of the Tag Characters.\nChecks whether this character is the U+FE0E VARIATION …\nChecks whether this character is the U+200D ZERO WIDTH …\n<code>Pe</code>, a closing punctuation mark (of a pair)\n<code>Pc</code>, a connecting punctuation mark, like a tie\n<code>Cc</code>, a C0 or C1 control code\n<code>Sc</code>, a currency sign\n<code>Pd</code>, a dash or hyphen punctuation mark\n<code>Nd</code>, a decimal digit\n<code>Me</code>, an enclosing combining mark\n<code>Pf</code>, a final quotation mark\n<code>Cf</code>, a format control character\nThe most general classification of a character.\nGroupings of the most general classification of a …\n<code>Pi</code>, an initial quotation mark\nLu | Ll | Lt | Lm | Lo\n<code>Nl</code>, a letterlike numeric character\n<code>Zl</code>, U+2028 LINE SEPARATOR only\n<code>Ll</code>, a lowercase letter\nMn | Mc | Me\n<code>Sm</code>, a symbol of mathematical use\n<code>Lm</code>, a modifier letter\n<code>Sk</code>, a non-letterlike modifier symbol\n<code>Mn</code>, a nonspacing combining mark (zero advance width)\nNd | Nl | No\n<code>Ps</code>, an opening punctuation mark (of a pair)\nCc | Cf | Cs | Co | Cn\n<code>Lo</code>, other letters, including syllables and ideographs\n<code>No</code>, a numeric character of other type\n<code>Po</code>, a punctuation mark of other type\n<code>So</code>, a symbol of other type\n<code>Zp</code>, U+2029 PARAGRAPH SEPARATOR only\n<code>Co</code>, a private-use character\nPc | Pd | Ps | Pe | Pi | Pf | Po\nZs | Zl | Zp\n<code>Zs</code>, a space character (of various non-zero widths)\n<code>Mc</code>, a spacing combining mark (positive advance width)\n<code>Cs</code>, a surrogate code point\nSm | Sc | Sk | So\n<code>Lt</code>, a digraphic character, with first part uppercase\n<code>Cn</code>, a reserved unassigned code point or a noncharacter\nQuery the general category property of a character.\n<code>Lu</code>, an uppercase letter\nReturns the argument unchanged.\nReturns the argument unchanged.\nQueries the most general classification of a character.\nQueries the grouping of the most general classification of …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nQueries whether the most general classification of a …")