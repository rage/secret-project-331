initSidebarItems({"enum":[["ASN1Block","A primitive block from ASN.1."],["ASN1Class","An ASN.1 block class."],["ASN1DecodeErr","An error that can arise decoding ASN.1 primitive blocks."],["ASN1EncodeErr","An error that can arise encoding ASN.1 primitive blocks."]],"fn":[["der_decode","Automatically decode a type via DER encoding, assuming that the type is a member of `FromASN1` or `FromASN1WithBody`."],["der_encode","Automatically encode a type into binary via DER encoding, assuming that the type is a member of `ToASN1`."],["from_der","Translate a binary blob into a series of `ASN1Block`s, or provide an error if it didn't work."],["to_der","Given an `ASN1Block`, covert it to its DER encoding, or return an error if something broke along the way."]],"macro":[["oid","A handy macro for generating OIDs from a sequence of `u64`s."]],"struct":[["BigInt","A big signed integer type."],["BigUint","A big unsigned integer type."],["OID","An ASN.1 OID."]],"trait":[["FromASN1","A trait defining types that can be decoded from an `ASN1Block` stream. Any member of this trait is also automatically a member of `FromASN1WithBody`, as it can obviously just ignore the body."],["FromASN1WithBody","A trait defining types that can be decoded from an `ASN1Block` stream, assuming they also have access to the underlying bytes making up the stream."],["ToASN1","The set of types that can automatically converted into a sequence of `ASN1Block`s. You should probably use to_asn1() but implement to_asn1_class(). The former has a default implementation that passes `ASN1Class::Universal` as the tag to use, which should be good for most people."]]});