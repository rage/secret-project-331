# Does the production setup, however for safety reasons, this defaults to the test enviroment and does not push images by default.
# If you want to do a production deploy or you want to push images, you have to activate profiles for those things.
# The filename has production instead of test because the test enviroment matches the production enviroment -- it just runs locally.

# How building works:

# For each deployed service, we build a single multi-stage image that contains both the build and runtime stages. The build stage compiles the application and the runtime stage creates a slim production image.

apiVersion: skaffold/v3
kind: Config
build:
  artifacts:
    # headless-lms
    - image: eu.gcr.io/moocfi-public/secret-project-headless-lms-production-slim
      context: services/headless-lms
      docker:
        dockerfile: Dockerfile.production.slim.dockerfile

    # cms
    - image: eu.gcr.io/moocfi-public/secret-project-cms-production-slim
      context: services/cms
      docker:
        dockerfile: Dockerfile.production.slim.dockerfile

    # course-material
    - image: eu.gcr.io/moocfi-public/secret-project-course-material-production-slim
      context: services/course-material
      docker:
        dockerfile: Dockerfile.production.slim.dockerfile

    # main-frontend
    - image: eu.gcr.io/moocfi-public/secret-project-main-frontend-production-slim
      context: services/main-frontend
      docker:
        dockerfile: Dockerfile.production.slim.dockerfile

    # example-exercise
    - image: eu.gcr.io/moocfi-public/secret-project-example-exercise-production-slim
      context: services/example-exercise
      docker:
        dockerfile: Dockerfile.production.slim.dockerfile

    # quizzes
    - image: eu.gcr.io/moocfi-public/secret-project-quizzes-production-slim
      context: services/quizzes
      docker:
        dockerfile: Dockerfile.production.slim.dockerfile

    # tmc
    - image: eu.gcr.io/moocfi-public/secret-project-tmc-production-slim
      context: services/tmc
      docker:
        dockerfile: Dockerfile.production.slim.dockerfile
  tagPolicy:
    # Default tag policy
    gitCommit:
      variant: CommitSha
  local:
    useDockerCLI:
      true
      # Allow parallel builds
    concurrency: 0
    push: false

manifests:
  kustomize:
    paths:
      - kubernetes/test

deploy:
  kubeContext: minikube
  kubectl:
    hooks:
      before:
        - host:
            command:
              [
                "sh",
                "-c",
                "echo 'Waiting for the ingress to be ready.' && echo '> kubectl wait --namespace ingress-nginx --for=condition=available deployment/ingress-nginx-controller' && kubectl wait --namespace ingress-nginx --for=condition=available deployment/ingress-nginx-controller",
              ]

portForward:
  - resourceType: statefulset
    resourceName: postgres
    namespace: default
    port: 5432
    localPort: 54328
  - resourceType: statefulset
    resourceName: redis
    namespace: default
    port: 6379
    localPort: 63798

profiles:
  # Push builds to moocfi-public
  - name: push-images
    patches:
      - op: add
        path: /build/local/push
        value: true
  - name: production
    patches:
      # Allow all kube contexes
      - op: remove
        path: /deploy/kubeContext
      # Replace which folder to use
      - op: replace
        path: /manifests/kustomize/paths
        value:
          - kubernetes/production
      # No need to wait for ingress in production
      - op: remove
        path: /deploy/kubectl
  # Used to push the latest tag in ci, used for caching.
  - name: latest-tag
    patches:
      - op: replace
        path: /build/tagPolicy
        value:
          # sha256 tag policy pushes the latest tag, which is used for caching
          sha256: {}
