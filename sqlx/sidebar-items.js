initSidebarItems({"derive":[["Decode",""],["Encode",""]],"enum":[["Error","Represents all the ways a method can fail within SQLx."]],"fn":[["query","Make a SQL query."],["query_as","Make a SQL query that is mapped to a concrete type using [`FromRow`]."],["query_as_with","Make a SQL query, with the given arguments, that is mapped to a concrete type using [`FromRow`]."],["query_scalar","Make a SQL query that is mapped to a single concrete type using [`FromRow`]."],["query_scalar_with","Make a SQL query, with the given arguments, that is mapped to a single concrete type using [`FromRow`]."],["query_with","Make a SQL query, with the given arguments."]],"macro":[["migrate","Embeds migrations into the binary by expanding to a static instance of [Migrator][crate::migrate::Migrator]."],["query","Statically checked SQL query with `println!()` style syntax."],["query_as","A variant of [query!] which takes a path to an explicitly defined struct as the output type."],["query_as_unchecked","A variant of [query_as!] which does not check the input or output types. This still does parse the query to ensure it’s syntactically and semantically valid for the current database."],["query_file","A variant of [query!] where the SQL query is stored in a separate file."],["query_file_as","Combines the syntaxes of [query_as!] and [query_file!]."],["query_file_as_unchecked","A variant of [query_file_as!] which does not check the input or output types. This still does parse the query to ensure it’s syntactically and semantically valid for the current database."],["query_file_scalar","A variant of [query_scalar!] which takes a file path like [query_file!]."],["query_file_scalar_unchecked","A variant of [query_file_scalar!] which does not typecheck bind parameters and leaves the output type to inference. The query itself is still checked that it is syntactically and semantically valid for the database, that it only produces one column and that the number of bind parameters is correct."],["query_file_unchecked","A variant of [query_file!] which does not check the input or output types. This still does parse the query to ensure it’s syntactically and semantically valid for the current database."],["query_scalar","A variant of [query!] which expects a single column from the query and evaluates to an instance of [QueryScalar][crate::query::QueryScalar]."],["query_scalar_unchecked","A variant of [query_scalar!] which does not typecheck bind parameters and leaves the output type to inference. The query itself is still checked that it is syntactically and semantically valid for the database, that it only produces one column and that the number of bind parameters is correct."],["query_unchecked","A variant of [query!] which does not check the input or output types. This still does parse the query to ensure it’s syntactically and semantically valid for the current database."]],"mod":[["database","Traits to represent a database driver."],["decode","Provides `Decode` for decoding values from the database."],["encode","Provides `Encode` for encoding values for the database."],["error","Types for working with errors produced by SQLx."],["migrate",""],["pool","Provides the connection pool for asynchronous SQLx connections."],["postgres","PostgreSQL database driver."],["prelude","Convenience re-export of common traits."],["query","Types and traits for the `query` family of functions and macros."],["types","Conversions between Rust and SQL types."]],"struct":[["PgConnection","A connection to a PostgreSQL database."],["Pool","An asynchronous pool of SQLx database connections."],["Postgres","PostgreSQL database driver."],["Transaction","An in-progress database transaction or savepoint."]],"trait":[["Acquire",""],["Arguments","A tuple of arguments to be sent to the database."],["Column",""],["ColumnIndex","A type that can be used to index into a `Row` or `Statement`."],["ConnectOptions",""],["Connection","Represents a single database connection."],["Database","A database driver."],["Decode","A type that can be decoded from the database."],["Encode","Encode a single value to be sent to the database."],["Execute","A type that may be executed against a database connection."],["Executor","A type that contains or can provide a database connection to use for executing queries against the database."],["FromRow","A record that can be built from a row returned by the database."],["IntoArguments",""],["Row","Represents a single row from the database."],["Statement","An explicitly prepared statement."],["Type","Indicates that a SQL type is supported for a database."],["TypeInfo","Provides information about a SQL type for the database driver."],["Value","An owned value from the database."],["ValueRef","A reference to a single value from the database."]],"type":[["PgPool","An alias for [`Pool`][crate::pool::Pool], specialized for Postgres."],["Result","A specialized `Result` type for SQLx."]]});