initSidebarItems({"struct":[["Lazy","A value which is initialized on the first access."],["Lock",""],["LockCell",""],["LockGuard","A wrapper type for a mutably borrowed value from a `RefCell<T>`."],["Lrc","A single-threaded reference-counting pointer. ‘Rc’ stands for ‘Reference Counted’."],["MappedLockGuard","A wrapper type for a mutably borrowed value from a `RefCell<T>`."],["MappedReadGuard","Wraps a borrowed reference to a value in a `RefCell` box. A wrapper type for an immutably borrowed value from a `RefCell<T>`."],["MappedWriteGuard","A wrapper type for a mutably borrowed value from a `RefCell<T>`."],["OnceCell","A cell which can be written to only once. It is not thread safe."],["ReadGuard","Wraps a borrowed reference to a value in a `RefCell` box. A wrapper type for an immutably borrowed value from a `RefCell<T>`."],["RwLock",""],["Weak","`Weak` is a version of [`Rc`] that holds a non-owning reference to the managed allocation. The allocation is accessed by calling `upgrade` on the `Weak` pointer, which returns an [`Option`]`<`[`Rc`]`<T>>`."],["WriteGuard","A wrapper type for a mutably borrowed value from a `RefCell<T>`."]],"trait":[["HashMapExt",""],["Send","Dummy trait because swc_common is in single thread mode."],["Sync","Dummy trait because swc_common is in single thread mode."]]});