(function() {
    var type_impls = Object.fromEntries([["icu_datetime",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-FixedCalendarDateTimeFormatter%3CC,+FSet%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/icu_datetime/neo.rs.html#203\">Source</a><a href=\"#impl-Clone-for-FixedCalendarDateTimeFormatter%3CC,+FSet%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;C: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"icu_datetime/scaffold/trait.CldrCalendar.html\" title=\"trait icu_datetime::scaffold::CldrCalendar\">CldrCalendar</a>, FSet: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"icu_datetime/scaffold/trait.DateTimeNamesMarker.html\" title=\"trait icu_datetime::scaffold::DateTimeNamesMarker\">DateTimeNamesMarker</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"icu_datetime/struct.FixedCalendarDateTimeFormatter.html\" title=\"struct icu_datetime::FixedCalendarDateTimeFormatter\">FixedCalendarDateTimeFormatter</a>&lt;C, FSet&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/icu_datetime/neo.rs.html#203\">Source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"icu_datetime/struct.FixedCalendarDateTimeFormatter.html\" title=\"struct icu_datetime::FixedCalendarDateTimeFormatter\">FixedCalendarDateTimeFormatter</a>&lt;C, FSet&gt;</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/1.87.0/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.87.0/src/core/clone.rs.html#174\">Source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;Self)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/1.87.0/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","icu_datetime::neo::NoCalendarFormatter"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-FixedCalendarDateTimeFormatter%3CC,+FSet%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/icu_datetime/neo.rs.html#203\">Source</a><a href=\"#impl-Debug-for-FixedCalendarDateTimeFormatter%3CC,+FSet%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;C: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> + <a class=\"trait\" href=\"icu_datetime/scaffold/trait.CldrCalendar.html\" title=\"trait icu_datetime::scaffold::CldrCalendar\">CldrCalendar</a>, FSet: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> + <a class=\"trait\" href=\"icu_datetime/scaffold/trait.DateTimeNamesMarker.html\" title=\"trait icu_datetime::scaffold::DateTimeNamesMarker\">DateTimeNamesMarker</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"icu_datetime/struct.FixedCalendarDateTimeFormatter.html\" title=\"struct icu_datetime::FixedCalendarDateTimeFormatter\">FixedCalendarDateTimeFormatter</a>&lt;C, FSet&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/icu_datetime/neo.rs.html#203\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.87.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"https://doc.rust-lang.org/1.87.0/core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.87.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","icu_datetime::neo::NoCalendarFormatter"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FixedCalendarDateTimeFormatter%3CC,+FSet%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/icu_datetime/neo.rs.html#210-268\">Source</a><a href=\"#impl-FixedCalendarDateTimeFormatter%3CC,+FSet%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;C: <a class=\"trait\" href=\"icu_datetime/scaffold/trait.CldrCalendar.html\" title=\"trait icu_datetime::scaffold::CldrCalendar\">CldrCalendar</a>, FSet&gt; <a class=\"struct\" href=\"icu_datetime/struct.FixedCalendarDateTimeFormatter.html\" title=\"struct icu_datetime::FixedCalendarDateTimeFormatter\">FixedCalendarDateTimeFormatter</a>&lt;C, FSet&gt;<div class=\"where\">where\n    FSet::<a class=\"associatedtype\" href=\"icu_datetime/scaffold/trait.DateTimeMarkers.html#associatedtype.D\" title=\"type icu_datetime::scaffold::DateTimeMarkers::D\">D</a>: <a class=\"trait\" href=\"icu_datetime/scaffold/trait.TypedDateDataMarkers.html\" title=\"trait icu_datetime::scaffold::TypedDateDataMarkers\">TypedDateDataMarkers</a>&lt;C&gt;,\n    FSet::<a class=\"associatedtype\" href=\"icu_datetime/scaffold/trait.DateTimeMarkers.html#associatedtype.T\" title=\"type icu_datetime::scaffold::DateTimeMarkers::T\">T</a>: <a class=\"trait\" href=\"icu_datetime/scaffold/trait.TimeMarkers.html\" title=\"trait icu_datetime::scaffold::TimeMarkers\">TimeMarkers</a>,\n    FSet::<a class=\"associatedtype\" href=\"icu_datetime/scaffold/trait.DateTimeMarkers.html#associatedtype.Z\" title=\"type icu_datetime::scaffold::DateTimeMarkers::Z\">Z</a>: <a class=\"trait\" href=\"icu_datetime/scaffold/trait.ZoneMarkers.html\" title=\"trait icu_datetime::scaffold::ZoneMarkers\">ZoneMarkers</a>,\n    FSet: <a class=\"trait\" href=\"icu_datetime/scaffold/trait.GetField.html\" title=\"trait icu_datetime::scaffold::GetField\">GetField</a>&lt;<a class=\"enum\" href=\"icu_datetime/fieldsets/enums/enum.CompositeFieldSet.html\" title=\"enum icu_datetime::fieldsets::enums::CompositeFieldSet\">CompositeFieldSet</a>&gt; + <a class=\"trait\" href=\"icu_datetime/scaffold/trait.DateTimeMarkers.html\" title=\"trait icu_datetime::scaffold::DateTimeMarkers\">DateTimeMarkers</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_new\" class=\"method\"><a class=\"src rightside\" href=\"src/icu_datetime/neo.rs.html#227-240\">Source</a><h4 class=\"code-header\">pub fn <a href=\"icu_datetime/struct.FixedCalendarDateTimeFormatter.html#tymethod.try_new\" class=\"fn\">try_new</a>(\n    prefs: <a class=\"struct\" href=\"icu_datetime/struct.DateTimeFormatterPreferences.html\" title=\"struct icu_datetime::DateTimeFormatterPreferences\">DateTimeFormatterPreferences</a>,\n    field_set_with_options: FSet,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self, <a class=\"enum\" href=\"icu_datetime/enum.DateTimeFormatterLoadError.html\" title=\"enum icu_datetime::DateTimeFormatterLoadError\">DateTimeFormatterLoadError</a>&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"icu_datetime/provider/struct.Baked.html\" title=\"struct icu_datetime::provider::Baked\">Baked</a>: <a class=\"trait\" href=\"icu_datetime/scaffold/trait.AllFixedCalendarFormattingDataMarkers.html\" title=\"trait icu_datetime::scaffold::AllFixedCalendarFormattingDataMarkers\">AllFixedCalendarFormattingDataMarkers</a>&lt;C, FSet&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Creates a new <a href=\"icu_datetime/struct.FixedCalendarDateTimeFormatter.html\" title=\"struct icu_datetime::FixedCalendarDateTimeFormatter\"><code>FixedCalendarDateTimeFormatter</code></a> from compiled data with\ndatetime components specified at build time.</p>\n<p>This ignores the <code>calendar_kind</code> preference and instead uses the static calendar type,\nand supports calendars that are not expressible as preferences, such as <a href=\"icu_calendar/cal/japanese/struct.JapaneseExtended.html\" title=\"struct icu_calendar::cal::japanese::JapaneseExtended\"><code>JapaneseExtended</code></a>.</p>\n<p>✨ <em>Enabled with the <code>compiled_data</code> Cargo feature.</em></p>\n<p><a href=\"icu_provider/constructors/index.html\" title=\"mod icu_provider::constructors\">📚 Help choosing a constructor</a></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_new_with_buffer_provider\" class=\"method\"><a class=\"src rightside\" href=\"src/icu_datetime/neo.rs.html#242-248\">Source</a><h4 class=\"code-header\">pub fn <a href=\"icu_datetime/struct.FixedCalendarDateTimeFormatter.html#tymethod.try_new_with_buffer_provider\" class=\"fn\">try_new_with_buffer_provider</a>&lt;P&gt;(\n    provider: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.reference.html\">&amp;P</a>,\n    prefs: <a class=\"struct\" href=\"icu_datetime/struct.DateTimeFormatterPreferences.html\" title=\"struct icu_datetime::DateTimeFormatterPreferences\">DateTimeFormatterPreferences</a>,\n    field_set_with_options: FSet,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self, <a class=\"enum\" href=\"icu_datetime/enum.DateTimeFormatterLoadError.html\" title=\"enum icu_datetime::DateTimeFormatterLoadError\">DateTimeFormatterLoadError</a>&gt;<div class=\"where\">where\n    P: <a class=\"trait\" href=\"icu_provider/buf/trait.BufferProvider.html\" title=\"trait icu_provider::buf::BufferProvider\">BufferProvider</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\"><p>A version of [<code>Self :: try_new</code>] that uses custom data provided by a <a href=\"icu_provider/buf/trait.BufferProvider.html\" title=\"trait icu_provider::buf::BufferProvider\"><code>BufferProvider</code></a>.</p>\n<p>✨ <em>Enabled with the <code>serde</code> feature.</em></p>\n<p><a href=\"icu_provider/constructors/index.html\" title=\"mod icu_provider::constructors\">📚 Help choosing a constructor</a></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_new_unstable\" class=\"method\"><a class=\"src rightside\" href=\"src/icu_datetime/neo.rs.html#251-267\">Source</a><h4 class=\"code-header\">pub fn <a href=\"icu_datetime/struct.FixedCalendarDateTimeFormatter.html#tymethod.try_new_unstable\" class=\"fn\">try_new_unstable</a>&lt;P&gt;(\n    provider: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.reference.html\">&amp;P</a>,\n    prefs: <a class=\"struct\" href=\"icu_datetime/struct.DateTimeFormatterPreferences.html\" title=\"struct icu_datetime::DateTimeFormatterPreferences\">DateTimeFormatterPreferences</a>,\n    field_set_with_options: FSet,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self, <a class=\"enum\" href=\"icu_datetime/enum.DateTimeFormatterLoadError.html\" title=\"enum icu_datetime::DateTimeFormatterLoadError\">DateTimeFormatterLoadError</a>&gt;<div class=\"where\">where\n    P: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"icu_datetime/scaffold/trait.AllFixedCalendarFormattingDataMarkers.html\" title=\"trait icu_datetime::scaffold::AllFixedCalendarFormattingDataMarkers\">AllFixedCalendarFormattingDataMarkers</a>&lt;C, FSet&gt; + <a class=\"trait\" href=\"icu_datetime/scaffold/trait.AllFixedCalendarExternalDataMarkers.html\" title=\"trait icu_datetime::scaffold::AllFixedCalendarExternalDataMarkers\">AllFixedCalendarExternalDataMarkers</a>,</div></h4></section></summary><div class=\"docblock\"><p>A version of <a href=\"icu_datetime/struct.FixedCalendarDateTimeFormatter.html#method.try_new\" title=\"associated function icu_datetime::FixedCalendarDateTimeFormatter::try_new\"><code>Self::try_new</code></a> that uses custom data provided by a <a href=\"icu_provider/data_provider/trait.DataProvider.html\" title=\"trait icu_provider::data_provider::DataProvider\"><code>DataProvider</code></a>.</p>\n<p><a href=\"icu_provider/constructors/index.html\" title=\"mod icu_provider::constructors\">📚 Help choosing a constructor</a></p>\n<div class=\"stab unstable\">⚠️ The bounds on <tt>provider</tt> may change over time, including in SemVer minor releases.</div></div></details></div></details>",0,"icu_datetime::neo::NoCalendarFormatter"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FixedCalendarDateTimeFormatter%3CC,+FSet%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/icu_datetime/neo.rs.html#369-388\">Source</a><a href=\"#impl-FixedCalendarDateTimeFormatter%3CC,+FSet%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;C: <a class=\"trait\" href=\"icu_datetime/scaffold/trait.CldrCalendar.html\" title=\"trait icu_datetime::scaffold::CldrCalendar\">CldrCalendar</a>, FSet: <a class=\"trait\" href=\"icu_datetime/scaffold/trait.DateTimeMarkers.html\" title=\"trait icu_datetime::scaffold::DateTimeMarkers\">DateTimeMarkers</a>&gt; <a class=\"struct\" href=\"icu_datetime/struct.FixedCalendarDateTimeFormatter.html\" title=\"struct icu_datetime::FixedCalendarDateTimeFormatter\">FixedCalendarDateTimeFormatter</a>&lt;C, FSet&gt;<div class=\"where\">where\n    FSet::<a class=\"associatedtype\" href=\"icu_datetime/scaffold/trait.DateTimeMarkers.html#associatedtype.D\" title=\"type icu_datetime::scaffold::DateTimeMarkers::D\">D</a>: <a class=\"trait\" href=\"icu_datetime/scaffold/trait.DateInputMarkers.html\" title=\"trait icu_datetime::scaffold::DateInputMarkers\">DateInputMarkers</a>,\n    FSet::<a class=\"associatedtype\" href=\"icu_datetime/scaffold/trait.DateTimeMarkers.html#associatedtype.T\" title=\"type icu_datetime::scaffold::DateTimeMarkers::T\">T</a>: <a class=\"trait\" href=\"icu_datetime/scaffold/trait.TimeMarkers.html\" title=\"trait icu_datetime::scaffold::TimeMarkers\">TimeMarkers</a>,\n    FSet::<a class=\"associatedtype\" href=\"icu_datetime/scaffold/trait.DateTimeMarkers.html#associatedtype.Z\" title=\"type icu_datetime::scaffold::DateTimeMarkers::Z\">Z</a>: <a class=\"trait\" href=\"icu_datetime/scaffold/trait.ZoneMarkers.html\" title=\"trait icu_datetime::scaffold::ZoneMarkers\">ZoneMarkers</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.format\" class=\"method\"><a class=\"src rightside\" href=\"src/icu_datetime/neo.rs.html#376-387\">Source</a><h4 class=\"code-header\">pub fn <a href=\"icu_datetime/struct.FixedCalendarDateTimeFormatter.html#tymethod.format\" class=\"fn\">format</a>&lt;I&gt;(&amp;self, input: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.reference.html\">&amp;I</a>) -&gt; <a class=\"struct\" href=\"icu_datetime/struct.FormattedDateTime.html\" title=\"struct icu_datetime::FormattedDateTime\">FormattedDateTime</a>&lt;'_&gt;<div class=\"where\">where\n    I: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"icu_datetime/scaffold/trait.InFixedCalendar.html\" title=\"trait icu_datetime::scaffold::InFixedCalendar\">InFixedCalendar</a>&lt;C&gt; + <a class=\"trait\" href=\"icu_datetime/scaffold/trait.AllInputMarkers.html\" title=\"trait icu_datetime::scaffold::AllInputMarkers\">AllInputMarkers</a>&lt;FSet&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Formats a datetime. Calendars and fields must match at compile time.</p>\n</div></details></div></details>",0,"icu_datetime::neo::NoCalendarFormatter"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FixedCalendarDateTimeFormatter%3CC,+FSet%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/icu_datetime/neo.rs.html#746-881\">Source</a><a href=\"#impl-FixedCalendarDateTimeFormatter%3CC,+FSet%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;C: <a class=\"trait\" href=\"icu_datetime/scaffold/trait.CldrCalendar.html\" title=\"trait icu_datetime::scaffold::CldrCalendar\">CldrCalendar</a>, FSet: <a class=\"trait\" href=\"icu_datetime/scaffold/trait.DateTimeMarkers.html\" title=\"trait icu_datetime::scaffold::DateTimeMarkers\">DateTimeMarkers</a>&gt; <a class=\"struct\" href=\"icu_datetime/struct.FixedCalendarDateTimeFormatter.html\" title=\"struct icu_datetime::FixedCalendarDateTimeFormatter\">FixedCalendarDateTimeFormatter</a>&lt;C, FSet&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_formatter\" class=\"method\"><a class=\"src rightside\" href=\"src/icu_datetime/neo.rs.html#776-785\">Source</a><h4 class=\"code-header\">pub fn <a href=\"icu_datetime/struct.FixedCalendarDateTimeFormatter.html#tymethod.into_formatter\" class=\"fn\">into_formatter</a>(self, calendar: C) -&gt; <a class=\"struct\" href=\"icu_datetime/struct.DateTimeFormatter.html\" title=\"struct icu_datetime::DateTimeFormatter\">DateTimeFormatter</a>&lt;FSet&gt;<div class=\"where\">where\n    C: <a class=\"trait\" href=\"icu_datetime/scaffold/trait.IntoFormattableAnyCalendar.html\" title=\"trait icu_datetime::scaffold::IntoFormattableAnyCalendar\">IntoFormattableAnyCalendar</a>,</div></h4></section></summary><div class=\"docblock\"><p>Make this <a href=\"icu_datetime/struct.FixedCalendarDateTimeFormatter.html\" title=\"struct icu_datetime::FixedCalendarDateTimeFormatter\"><code>FixedCalendarDateTimeFormatter</code></a> adopt a calendar so it can format any date.</p>\n<p>This is useful if you need a <a href=\"icu_datetime/struct.DateTimeFormatter.html\" title=\"struct icu_datetime::DateTimeFormatter\"><code>DateTimeFormatter</code></a> but know the calendar system ahead of time,\nso that you do not need to link extra data you aren’t using.</p>\n<p><a href=\"icu_datetime/struct.DateTimeFormatter.html\" title=\"struct icu_datetime::DateTimeFormatter\"><code>DateTimeFormatter</code></a> does not necesarily support all calendars that are supported by\n<a href=\"icu_datetime/struct.FixedCalendarDateTimeFormatter.html\" title=\"struct icu_datetime::FixedCalendarDateTimeFormatter\"><code>FixedCalendarDateTimeFormatter</code></a>, which is why this function can fail.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>icu::calendar::cal::Hebrew;\n<span class=\"kw\">use </span>icu::datetime::fieldsets::YMD;\n<span class=\"kw\">use </span>icu::datetime::input::Date;\n<span class=\"kw\">use </span>icu::datetime::FixedCalendarDateTimeFormatter;\n<span class=\"kw\">use </span>icu::locale::locale;\n<span class=\"kw\">use </span>writeable::assert_writeable_eq;\n\n<span class=\"kw\">let </span>formatter = FixedCalendarDateTimeFormatter::try_new(\n    <span class=\"macro\">locale!</span>(<span class=\"string\">\"en\"</span>).into(),\n    YMD::long(),\n)\n.unwrap()\n.into_formatter(Hebrew::new());\n\n<span class=\"kw\">let </span>date = Date::try_new_iso(<span class=\"number\">2024</span>, <span class=\"number\">10</span>, <span class=\"number\">14</span>).unwrap();\n\n<span class=\"macro\">assert_writeable_eq!</span>(formatter.format(<span class=\"kw-2\">&amp;</span>date), <span class=\"string\">\"12 Tishri 5785\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.cast_into_fset\" class=\"method\"><a class=\"src rightside\" href=\"src/icu_datetime/neo.rs.html#820-828\">Source</a><h4 class=\"code-header\">pub fn <a href=\"icu_datetime/struct.FixedCalendarDateTimeFormatter.html#tymethod.cast_into_fset\" class=\"fn\">cast_into_fset</a>&lt;FSet2: <a class=\"trait\" href=\"icu_datetime/scaffold/trait.DateTimeNamesFrom.html\" title=\"trait icu_datetime::scaffold::DateTimeNamesFrom\">DateTimeNamesFrom</a>&lt;FSet&gt;&gt;(\n    self,\n) -&gt; <a class=\"struct\" href=\"icu_datetime/struct.FixedCalendarDateTimeFormatter.html\" title=\"struct icu_datetime::FixedCalendarDateTimeFormatter\">FixedCalendarDateTimeFormatter</a>&lt;C, FSet2&gt;</h4></section></summary><div class=\"docblock\"><p>Maps a <a href=\"icu_datetime/struct.FixedCalendarDateTimeFormatter.html\" title=\"struct icu_datetime::FixedCalendarDateTimeFormatter\"><code>FixedCalendarDateTimeFormatter</code></a> of a specific <code>FSet</code> to a more general <code>FSet</code>.</p>\n<p>For example, this can transform a formatter for <a href=\"icu_datetime/fieldsets/struct.YMD.html\" title=\"struct icu_datetime::fieldsets::YMD\"><code>YMD</code></a> to one for <a href=\"icu_datetime/fieldsets/enums/enum.DateFieldSet.html\" title=\"enum icu_datetime::fieldsets::enums::DateFieldSet\"><code>DateFieldSet</code></a>.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>icu::calendar::Gregorian;\n<span class=\"kw\">use </span>icu::datetime::fieldsets::{enums::DateFieldSet, YMD};\n<span class=\"kw\">use </span>icu::datetime::input::Date;\n<span class=\"kw\">use </span>icu::datetime::FixedCalendarDateTimeFormatter;\n<span class=\"kw\">use </span>icu::locale::locale;\n<span class=\"kw\">use </span>writeable::assert_writeable_eq;\n\n<span class=\"kw\">let </span>specific_formatter = FixedCalendarDateTimeFormatter::try_new(\n    <span class=\"macro\">locale!</span>(<span class=\"string\">\"fr\"</span>).into(),\n    YMD::medium(),\n)\n.unwrap();\n\n<span class=\"comment\">// Test that the specific formatter works:\n</span><span class=\"kw\">let </span>date = Date::try_new_gregorian(<span class=\"number\">2024</span>, <span class=\"number\">12</span>, <span class=\"number\">20</span>).unwrap();\n<span class=\"macro\">assert_writeable_eq!</span>(specific_formatter.format(<span class=\"kw-2\">&amp;</span>date), <span class=\"string\">\"20 déc. 2024\"</span>);\n\n<span class=\"comment\">// Make a more general formatter:\n</span><span class=\"kw\">let </span>general_formatter = specific_formatter.cast_into_fset::&lt;DateFieldSet&gt;();\n\n<span class=\"comment\">// Test that it still works:\n</span><span class=\"macro\">assert_writeable_eq!</span>(general_formatter.format(<span class=\"kw-2\">&amp;</span>date), <span class=\"string\">\"20 déc. 2024\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_field_set_builder\" class=\"method\"><a class=\"src rightside\" href=\"src/icu_datetime/neo.rs.html#878-880\">Source</a><h4 class=\"code-header\">pub fn <a href=\"icu_datetime/struct.FixedCalendarDateTimeFormatter.html#tymethod.to_field_set_builder\" class=\"fn\">to_field_set_builder</a>(&amp;self) -&gt; <a class=\"struct\" href=\"icu_datetime/fieldsets/builder/struct.FieldSetBuilder.html\" title=\"struct icu_datetime::fieldsets::builder::FieldSetBuilder\">FieldSetBuilder</a></h4></section></summary><div class=\"docblock\"><p>Gets a <a href=\"icu_datetime/fieldsets/builder/struct.FieldSetBuilder.html\" title=\"struct icu_datetime::fieldsets::builder::FieldSetBuilder\"><code>FieldSetBuilder</code></a> corresponding to the fields and options configured in this\nformatter. The builder can be used to recreate the formatter.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>icu::datetime::fieldsets::builder::<span class=\"kw-2\">*</span>;\n<span class=\"kw\">use </span>icu::datetime::fieldsets::YMD;\n<span class=\"kw\">use </span>icu::datetime::input::<span class=\"kw-2\">*</span>;\n<span class=\"kw\">use </span>icu::datetime::options::<span class=\"kw-2\">*</span>;\n<span class=\"kw\">use </span>icu::datetime::FixedCalendarDateTimeFormatter;\n<span class=\"kw\">use </span>icu::locale::locale;\n<span class=\"kw\">use </span>writeable::assert_writeable_eq;\n\n<span class=\"comment\">// Create a simple YMDT formatter:\n</span><span class=\"kw\">let </span>formatter = FixedCalendarDateTimeFormatter::try_new(\n    <span class=\"macro\">locale!</span>(<span class=\"string\">\"und\"</span>).into(),\n    YMD::long().with_time_hm().with_alignment(Alignment::Column),\n)\n.unwrap();\n\n<span class=\"comment\">// Get the builder corresponding to it:\n</span><span class=\"kw\">let </span>builder = formatter.to_field_set_builder();\n\n<span class=\"comment\">// Check that the builder is what we expect:\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>equivalent_builder = FieldSetBuilder::default();\nequivalent_builder.length = <span class=\"prelude-val\">Some</span>(Length::Long);\nequivalent_builder.date_fields = <span class=\"prelude-val\">Some</span>(DateFields::YMD);\nequivalent_builder.time_precision = <span class=\"prelude-val\">Some</span>(TimePrecision::Minute);\nequivalent_builder.alignment = <span class=\"prelude-val\">Some</span>(Alignment::Column);\nequivalent_builder.year_style = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(builder, equivalent_builder,);\n\n<span class=\"comment\">// Check that it creates a formatter with equivalent behavior:\n</span><span class=\"kw\">let </span>built_formatter = FixedCalendarDateTimeFormatter::try_new(\n    <span class=\"macro\">locale!</span>(<span class=\"string\">\"und\"</span>).into(),\n    builder.build_composite_datetime().unwrap(),\n)\n.unwrap();\n<span class=\"kw\">let </span>datetime = DateTime {\n    date: Date::try_new_gregorian(<span class=\"number\">2025</span>, <span class=\"number\">3</span>, <span class=\"number\">6</span>).unwrap(),\n    time: Time::try_new(<span class=\"number\">16</span>, <span class=\"number\">41</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>).unwrap(),\n};\n<span class=\"macro\">assert_eq!</span>(\n    formatter.format(<span class=\"kw-2\">&amp;</span>datetime).to_string(),\n    built_formatter.format(<span class=\"kw-2\">&amp;</span>datetime).to_string(),\n);</code></pre></div>\n</div></details></div></details>",0,"icu_datetime::neo::NoCalendarFormatter"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FixedCalendarDateTimeFormatter%3CC,+FSet%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/icu_datetime/unchecked.rs.html#28-105\">Source</a><a href=\"#impl-FixedCalendarDateTimeFormatter%3CC,+FSet%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;C: <a class=\"trait\" href=\"icu_datetime/scaffold/trait.CldrCalendar.html\" title=\"trait icu_datetime::scaffold::CldrCalendar\">CldrCalendar</a>, FSet: <a class=\"trait\" href=\"icu_datetime/scaffold/trait.DateTimeNamesMarker.html\" title=\"trait icu_datetime::scaffold::DateTimeNamesMarker\">DateTimeNamesMarker</a>&gt; <a class=\"struct\" href=\"icu_datetime/struct.FixedCalendarDateTimeFormatter.html\" title=\"struct icu_datetime::FixedCalendarDateTimeFormatter\">FixedCalendarDateTimeFormatter</a>&lt;C, FSet&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.format_unchecked\" class=\"method\"><a class=\"src rightside\" href=\"src/icu_datetime/unchecked.rs.html#98-104\">Source</a><h4 class=\"code-header\">pub fn <a href=\"icu_datetime/struct.FixedCalendarDateTimeFormatter.html#tymethod.format_unchecked\" class=\"fn\">format_unchecked</a>(\n    &amp;self,\n    datetime: <a class=\"struct\" href=\"icu_datetime/unchecked/struct.DateTimeInputUnchecked.html\" title=\"struct icu_datetime::unchecked::DateTimeInputUnchecked\">DateTimeInputUnchecked</a>,\n) -&gt; <a class=\"struct\" href=\"icu_datetime/unchecked/struct.FormattedDateTimeUnchecked.html\" title=\"struct icu_datetime::unchecked::FormattedDateTimeUnchecked\">FormattedDateTimeUnchecked</a>&lt;'_&gt;</h4></section></summary><div class=\"docblock\"><p>Formats a datetime without enforcing either the field set or the calendar.</p>\n<p>This function is useful when the caller knows something about the field set that the\ntype system is unaware of. For example, if the formatter is represented with a\n<a href=\"icu_datetime/fieldsets/enums/index.html\" title=\"mod icu_datetime::fieldsets::enums\">dynamic field set</a>, the caller may be able to provide a\nnarrower type for formatting.</p>\n<p>❗ The caller must ensure that:</p>\n<ol>\n<li>The calendar of the input matches the calendar of the formatter</li>\n<li>The fields of the input are a superset of the fields of the formatter</li>\n</ol>\n<p>Returns a <a href=\"icu_datetime/unchecked/struct.FormattedDateTimeUnchecked.html\" title=\"struct icu_datetime::unchecked::FormattedDateTimeUnchecked\"><code>FormattedDateTimeUnchecked</code></a> to surface errors when they occur,\nbut not every invariant will result in an error. Use with caution!</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>In the following example, we know that the formatter’s field set is <a href=\"icu_datetime/fieldsets/struct.YMD.html\" title=\"struct icu_datetime::fieldsets::YMD\"><code>YMD</code></a>, but the\ntype system thinks we are a <a href=\"icu_datetime/fieldsets/enums/enum.CompositeFieldSet.html\" title=\"enum icu_datetime::fieldsets::enums::CompositeFieldSet\"><code>CompositeFieldSet</code></a>, which requires a <a href=\"icu_datetime/input/struct.ZonedDateTime.html\" title=\"struct icu_datetime::input::ZonedDateTime\"><code>ZonedDateTime</code></a>\nas input. However, since <a href=\"icu_datetime/input/struct.Date.html\" title=\"struct icu_datetime::input::Date\"><code>Date</code></a> contains all the fields required by <a href=\"icu_datetime/fieldsets/struct.YMD.html\" title=\"struct icu_datetime::fieldsets::YMD\"><code>YMD</code></a>, we can\nsuccessfully pass it into <a href=\"icu_datetime/struct.FixedCalendarDateTimeFormatter.html#method.format_unchecked\" title=\"method icu_datetime::FixedCalendarDateTimeFormatter::format_unchecked\"><code>format_unchecked</code></a>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>icu::calendar::cal::Buddhist;\n<span class=\"kw\">use </span>icu::datetime::fieldsets::enums::CompositeFieldSet;\n<span class=\"kw\">use </span>icu::datetime::fieldsets::{T, YMD};\n<span class=\"kw\">use </span>icu::datetime::input::{Date, Time};\n<span class=\"kw\">use </span>icu::datetime::unchecked::DateTimeInputUnchecked;\n<span class=\"kw\">use </span>icu::datetime::unchecked::FormattedDateTimeUncheckedError;\n<span class=\"kw\">use </span>icu::datetime::unchecked::MissingInputFieldKind;\n<span class=\"kw\">use </span>icu::datetime::FixedCalendarDateTimeFormatter;\n<span class=\"kw\">use </span>icu::locale::locale;\n<span class=\"kw\">use </span>writeable::assert_try_writeable_eq;\n\n<span class=\"kw\">let </span>formatter = FixedCalendarDateTimeFormatter::&lt;Buddhist, <span class=\"kw\">_</span>&gt;::try_new(\n    <span class=\"macro\">locale!</span>(<span class=\"string\">\"th\"</span>).into(),\n    YMD::long(),\n)\n.unwrap()\n.cast_into_fset::&lt;CompositeFieldSet&gt;();\n\n<span class=\"comment\">// Create a date and convert it to the correct calendar:\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>input = DateTimeInputUnchecked::default();\n<span class=\"kw\">let </span>date = Date::try_new_iso(<span class=\"number\">2025</span>, <span class=\"number\">3</span>, <span class=\"number\">7</span>).unwrap().to_calendar(Buddhist);\n\n<span class=\"comment\">// Safe because the calendar matches the formatter:\n</span>input.set_date_fields_unchecked(date);\n\n<span class=\"comment\">// Safe because YMD needs only date fields, which are in the input:\n</span><span class=\"kw\">let </span>result = formatter.format_unchecked(input);\n\n<span class=\"macro\">assert_try_writeable_eq!</span>(result, <span class=\"string\">\"7 มีนาคม 2568\"</span>);\n\n<span class=\"comment\">// If we don't give all needed fields, we will get an error!\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>input = DateTimeInputUnchecked::default();\n<span class=\"kw\">let </span>result = formatter.format_unchecked(input);\n<span class=\"macro\">assert_try_writeable_eq!</span>(\n    result,\n    <span class=\"string\">\"{d} {M} {G} {y}\"</span>,\n    <span class=\"prelude-val\">Err</span>(FormattedDateTimeUncheckedError::MissingInputField(\n        MissingInputFieldKind::DayOfMonth\n    ))\n);</code></pre></div>\n</div></details></div></details>",0,"icu_datetime::neo::NoCalendarFormatter"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[34373]}