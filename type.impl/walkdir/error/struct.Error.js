(function() {
    var type_impls = Object.fromEntries([["globwalk",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-Error\" class=\"impl\"><a class=\"src rightside\" href=\"src/walkdir/error.rs.html#27\">Source</a><a href=\"#impl-Debug-for-Error\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"walkdir/error/struct.Error.html\" title=\"struct walkdir::error::Error\">Error</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/walkdir/error.rs.html#27\">Source</a><a href=\"#method.fmt\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.87.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.87.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.87.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","globwalk::WalkError"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Display-for-Error\" class=\"impl\"><a class=\"src rightside\" href=\"src/walkdir/error.rs.html#220\">Source</a><a href=\"#impl-Display-for-Error\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/fmt/trait.Display.html\" title=\"trait core::fmt::Display\">Display</a> for <a class=\"struct\" href=\"walkdir/error/struct.Error.html\" title=\"struct walkdir::error::Error\">Error</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/walkdir/error.rs.html#221\">Source</a><a href=\"#method.fmt\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/fmt/trait.Display.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.87.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.87.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.87.0/core/fmt/trait.Display.html#tymethod.fmt\">Read more</a></div></details></div></details>","Display","globwalk::WalkError"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Error-for-Error\" class=\"impl\"><a class=\"src rightside\" href=\"src/walkdir/error.rs.html#199\">Source</a><a href=\"#impl-Error-for-Error\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/error/trait.Error.html\" title=\"trait core::error::Error\">Error</a> for <a class=\"struct\" href=\"walkdir/error/struct.Error.html\" title=\"struct walkdir::error::Error\">Error</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.description\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/walkdir/error.rs.html#201\">Source</a><a href=\"#method.description\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/error/trait.Error.html#method.description\" class=\"fn\">description</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.str.html\">str</a></h4></section></summary><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">ðŸ‘Ž</span><span>Deprecated since 1.42.0: use the Display impl or to_string()</span></div></span><div class='docblock'> <a href=\"https://doc.rust-lang.org/1.87.0/core/error/trait.Error.html#method.description\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.cause\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/walkdir/error.rs.html#208\">Source</a><a href=\"#method.cause\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/error/trait.Error.html#method.cause\" class=\"fn\">cause</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/error/trait.Error.html\" title=\"trait core::error::Error\">Error</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">ðŸ‘Ž</span><span>Deprecated since 1.33.0: replaced by Error::source, which can support downcasting</span></div></span></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.source\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/walkdir/error.rs.html#212\">Source</a><a href=\"#method.source\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/error/trait.Error.html#method.source\" class=\"fn\">source</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;(dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/error/trait.Error.html\" title=\"trait core::error::Error\">Error</a> + 'static)&gt;</h4></section></summary><div class='docblock'>Returns the lower-level source of this error, if any. <a href=\"https://doc.rust-lang.org/1.87.0/core/error/trait.Error.html#method.source\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.provide\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.87.0/src/core/error.rs.html#204\">Source</a><a href=\"#method.provide\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/error/trait.Error.html#method.provide\" class=\"fn\">provide</a>&lt;'a&gt;(&amp;'a self, request: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.87.0/core/error/struct.Request.html\" title=\"struct core::error::Request\">Request</a>&lt;'a&gt;)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>error_generic_member_access</code>)</span></div></span><div class='docblock'>Provides type-based access to context intended for error reports. <a href=\"https://doc.rust-lang.org/1.87.0/core/error/trait.Error.html#method.provide\">Read more</a></div></details></div></details>","Error","globwalk::WalkError"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Error\" class=\"impl\"><a class=\"src rightside\" href=\"src/walkdir/error.rs.html#39\">Source</a><a href=\"#impl-Error\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"walkdir/error/struct.Error.html\" title=\"struct walkdir::error::Error\">Error</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.path\" class=\"method\"><a class=\"src rightside\" href=\"src/walkdir/error.rs.html#46\">Source</a><h4 class=\"code-header\">pub fn <a href=\"walkdir/error/struct.Error.html#tymethod.path\" class=\"fn\">path</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.87.0/std/path/struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the path associated with this error if one exists.</p>\n<p>For example, if an error occurred while opening a directory handle,\nthe error will include the path passed to <a href=\"https://doc.rust-lang.org/stable/std/fs/fn.read_dir.html\"><code>std::fs::read_dir</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.loop_ancestor\" class=\"method\"><a class=\"src rightside\" href=\"src/walkdir/error.rs.html#66\">Source</a><h4 class=\"code-header\">pub fn <a href=\"walkdir/error/struct.Error.html#tymethod.loop_ancestor\" class=\"fn\">loop_ancestor</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.87.0/std/path/struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the path at which a cycle was detected.</p>\n<p>If no cycle was detected, <a href=\"https://doc.rust-lang.org/stable/std/option/enum.Option.html#variant.None\"><code>None</code></a> is returned.</p>\n<p>A cycle is detected when a directory entry is equivalent to one of\nits ancestors.</p>\n<p>To get the path to the child directory entry in the cycle, use the\n<a href=\"struct.Error.html#path\"><code>path</code></a> method.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.depth\" class=\"method\"><a class=\"src rightside\" href=\"src/walkdir/error.rs.html#81\">Source</a><h4 class=\"code-header\">pub fn <a href=\"walkdir/error/struct.Error.html#tymethod.depth\" class=\"fn\">depth</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Returns the depth at which this error occurred relative to the root.</p>\n<p>The smallest depth is <code>0</code> and always corresponds to the path given to\nthe <a href=\"struct.WalkDir.html#method.new\"><code>new</code></a> function on <a href=\"struct.WalkDir.html\"><code>WalkDir</code></a>. Its direct descendents have depth\n<code>1</code>, and their descendents have depth <code>2</code>, and so on.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.io_error\" class=\"method\"><a class=\"src rightside\" href=\"src/walkdir/error.rs.html#143\">Source</a><h4 class=\"code-header\">pub fn <a href=\"walkdir/error/struct.Error.html#tymethod.io_error\" class=\"fn\">io_error</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.87.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Inspect the original <a href=\"https://doc.rust-lang.org/stable/std/io/struct.Error.html\"><code>io::Error</code></a> if there is one.</p>\n<p><a href=\"https://doc.rust-lang.org/stable/std/option/enum.Option.html#variant.None\"><code>None</code></a> is returned if the <a href=\"struct.Error.html\"><code>Error</code></a> doesnâ€™t correspond to an\n<a href=\"https://doc.rust-lang.org/stable/std/io/struct.Error.html\"><code>io::Error</code></a>. This might happen, for example, when the error was\nproduced because a cycle was found in the directory tree while\nfollowing symbolic links.</p>\n<p>This method returns a borrowed value that is bound to the lifetime of the <a href=\"struct.Error.html\"><code>Error</code></a>. To\nobtain an owned value, the <a href=\"struct.Error.html#method.into_io_error\"><code>into_io_error</code></a> can be used instead.</p>\n<blockquote>\n<p>This is the original <a href=\"https://doc.rust-lang.org/stable/std/io/struct.Error.html\"><code>io::Error</code></a> and is <em>not</em> the same as\n<a href=\"struct.Error.html#impl-From%3CError%3E\"><code>impl From&lt;Error&gt; for std::io::Error</code></a> which contains additional context about the\nerror.</p>\n</blockquote>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">Â§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::io;\n<span class=\"kw\">use </span>std::path::Path;\n\n<span class=\"kw\">use </span>walkdir::WalkDir;\n\n<span class=\"kw\">for </span>entry <span class=\"kw\">in </span>WalkDir::new(<span class=\"string\">\"foo\"</span>) {\n    <span class=\"kw\">match </span>entry {\n        <span class=\"prelude-val\">Ok</span>(entry) =&gt; <span class=\"macro\">println!</span>(<span class=\"string\">\"{}\"</span>, entry.path().display()),\n        <span class=\"prelude-val\">Err</span>(err) =&gt; {\n            <span class=\"kw\">let </span>path = err.path().unwrap_or(Path::new(<span class=\"string\">\"\"</span>)).display();\n            <span class=\"macro\">println!</span>(<span class=\"string\">\"failed to access entry {}\"</span>, path);\n            <span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(inner) = err.io_error() {\n                <span class=\"kw\">match </span>inner.kind() {\n                    io::ErrorKind::InvalidData =&gt; {\n                        <span class=\"macro\">println!</span>(\n                            <span class=\"string\">\"entry contains invalid data: {}\"</span>,\n                            inner)\n                    }\n                    io::ErrorKind::PermissionDenied =&gt; {\n                        <span class=\"macro\">println!</span>(\n                            <span class=\"string\">\"Missing permission to read entry: {}\"</span>,\n                            inner)\n                    }\n                    <span class=\"kw\">_ </span>=&gt; {\n                        <span class=\"macro\">println!</span>(\n                            <span class=\"string\">\"Unexpected error occurred: {}\"</span>,\n                            inner)\n                    }\n                }\n            }\n        }\n    }\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_io_error\" class=\"method\"><a class=\"src rightside\" href=\"src/walkdir/error.rs.html#155\">Source</a><h4 class=\"code-header\">pub fn <a href=\"walkdir/error/struct.Error.html#tymethod.into_io_error\" class=\"fn\">into_io_error</a>(self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.87.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Similar to <a href=\"struct.Error.html#method.io_error\"><code>io_error</code></a> except consumes self to convert to the original\n<a href=\"https://doc.rust-lang.org/stable/std/io/struct.Error.html\"><code>io::Error</code></a> if one exists.</p>\n</div></details></div></details>",0,"globwalk::WalkError"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[16097]}