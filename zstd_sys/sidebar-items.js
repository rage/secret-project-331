initSidebarItems({"constant":[["AIO_PRIO_DELTA_MAX",""],["ARG_MAX",""],["BC_BASE_MAX",""],["BC_DIM_MAX",""],["BC_SCALE_MAX",""],["BC_STRING_MAX",""],["CHARCLASS_NAME_MAX",""],["COLL_WEIGHTS_MAX",""],["DELAYTIMER_MAX",""],["EXPR_NEST_MAX",""],["HOST_NAME_MAX",""],["LINE_MAX",""],["LINK_MAX",""],["LOGIN_NAME_MAX",""],["MAX_CANON",""],["MAX_INPUT",""],["MB_LEN_MAX",""],["MQ_PRIO_MAX",""],["NAME_MAX",""],["NGROUPS_MAX",""],["NR_OPEN",""],["PATH_MAX",""],["PIPE_BUF",""],["PTHREAD_DESTRUCTOR_ITERATIONS",""],["PTHREAD_KEYS_MAX",""],["PTHREAD_STACK_MIN",""],["RE_DUP_MAX",""],["RTSIG_MAX",""],["SEM_VALUE_MAX",""],["TTY_NAME_MAX",""],["XATTR_LIST_MAX",""],["XATTR_NAME_MAX",""],["XATTR_SIZE_MAX",""],["ZSTD_BLOCKSIZELOG_MAX",""],["ZSTD_BLOCKSIZE_MAX",""],["ZSTD_CLEVEL_DEFAULT",""],["ZSTD_CONTENTSIZE_ERROR",""],["ZSTD_CONTENTSIZE_UNKNOWN",""],["ZSTD_MAGICNUMBER",""],["ZSTD_MAGIC_DICTIONARY",""],["ZSTD_MAGIC_SKIPPABLE_MASK",""],["ZSTD_MAGIC_SKIPPABLE_START",""],["ZSTD_VERSION_MAJOR",""],["ZSTD_VERSION_MINOR",""],["ZSTD_VERSION_NUMBER",""],["ZSTD_VERSION_RELEASE",""],["_ATFILE_SOURCE",""],["_BITS_POSIX1_LIM_H",""],["_BITS_POSIX2_LIM_H",""],["_DEFAULT_SOURCE",""],["_FEATURES_H",""],["_LIBC_LIMITS_H_",""],["_POSIX2_BC_BASE_MAX",""],["_POSIX2_BC_DIM_MAX",""],["_POSIX2_BC_SCALE_MAX",""],["_POSIX2_BC_STRING_MAX",""],["_POSIX2_CHARCLASS_NAME_MAX",""],["_POSIX2_COLL_WEIGHTS_MAX",""],["_POSIX2_EXPR_NEST_MAX",""],["_POSIX2_LINE_MAX",""],["_POSIX2_RE_DUP_MAX",""],["_POSIX_AIO_LISTIO_MAX",""],["_POSIX_AIO_MAX",""],["_POSIX_ARG_MAX",""],["_POSIX_CHILD_MAX",""],["_POSIX_CLOCKRES_MIN",""],["_POSIX_C_SOURCE",""],["_POSIX_DELAYTIMER_MAX",""],["_POSIX_HOST_NAME_MAX",""],["_POSIX_LINK_MAX",""],["_POSIX_LOGIN_NAME_MAX",""],["_POSIX_MAX_CANON",""],["_POSIX_MAX_INPUT",""],["_POSIX_MQ_OPEN_MAX",""],["_POSIX_MQ_PRIO_MAX",""],["_POSIX_NAME_MAX",""],["_POSIX_NGROUPS_MAX",""],["_POSIX_OPEN_MAX",""],["_POSIX_PATH_MAX",""],["_POSIX_PIPE_BUF",""],["_POSIX_RE_DUP_MAX",""],["_POSIX_RTSIG_MAX",""],["_POSIX_SEM_NSEMS_MAX",""],["_POSIX_SEM_VALUE_MAX",""],["_POSIX_SIGQUEUE_MAX",""],["_POSIX_SOURCE",""],["_POSIX_SSIZE_MAX",""],["_POSIX_STREAM_MAX",""],["_POSIX_SYMLINK_MAX",""],["_POSIX_SYMLOOP_MAX",""],["_POSIX_THREAD_DESTRUCTOR_ITERATIONS",""],["_POSIX_THREAD_KEYS_MAX",""],["_POSIX_THREAD_THREADS_MAX",""],["_POSIX_TIMER_MAX",""],["_POSIX_TTY_NAME_MAX",""],["_POSIX_TZNAME_MAX",""],["_STDC_PREDEF_H",""],["_SYS_CDEFS_H",""],["__GLIBC_MINOR__",""],["__GLIBC_USE_DEPRECATED_GETS",""],["__GLIBC_USE_DEPRECATED_SCANF",""],["__GLIBC_USE_IEC_60559_BFP_EXT",""],["__GLIBC_USE_IEC_60559_BFP_EXT_C2X",""],["__GLIBC_USE_IEC_60559_FUNCS_EXT",""],["__GLIBC_USE_IEC_60559_FUNCS_EXT_C2X",""],["__GLIBC_USE_IEC_60559_TYPES_EXT",""],["__GLIBC_USE_ISOC2X",""],["__GLIBC_USE_LIB_EXT2",""],["__GLIBC__",""],["__GNU_LIBRARY__",""],["__HAVE_GENERIC_SELECTION",""],["__LDOUBLE_REDIRECTS_TO_FLOAT128_ABI",""],["__STDC_IEC_559_COMPLEX__",""],["__STDC_IEC_559__",""],["__STDC_ISO_10646__",""],["__SYSCALL_WORDSIZE",""],["__USE_ATFILE",""],["__USE_FORTIFY_LEVEL",""],["__USE_ISOC11",""],["__USE_ISOC95",""],["__USE_ISOC99",""],["__USE_MISC",""],["__USE_POSIX",""],["__USE_POSIX199309",""],["__USE_POSIX199506",""],["__USE_POSIX2",""],["__USE_POSIX_IMPLICITLY",""],["__USE_XOPEN2K",""],["__USE_XOPEN2K8",""],["__WORDSIZE",""],["__WORDSIZE_TIME64_COMPAT32",""],["__glibc_c99_flexarr_available",""]],"enum":[["ZSTD_EndDirective",""],["ZSTD_ResetDirective",""],["ZSTD_cParameter",""],["ZSTD_dParameter","Advanced decompression API (Requires v1.4.0+)"],["ZSTD_strategy","Advanced compression API (Requires v1.4.0+)"]],"fn":[["ZDICT_finalizeDictionary","ZDICT_finalizeDictionary(): Given a custom content as a basis for dictionary, and a set of samples, finalize dictionary by adding headers and statistics according to the zstd dictionary format."],["ZDICT_getDictHeaderSize",""],["ZDICT_getDictID",""],["ZDICT_getErrorName",""],["ZDICT_isError",""],["ZDICT_trainFromBuffer","ZDICT_trainFromBuffer(): Train a dictionary from an array of samples. Redirect towards ZDICT_optimizeTrainFromBuffer_fastCover() single-threaded, with d=8, steps=4, f=20, and accel=1. Samples must be stored concatenated in a single flat buffer `samplesBuffer`, supplied with an array of sizes `samplesSizes`, providing the size of each sample, in order. The resulting dictionary will be saved into `dictBuffer`. @return: size of dictionary stored into `dictBuffer` (<= `dictBufferCapacity`) or an error code, which can be tested with ZDICT_isError(). Note:  Dictionary training will fail if there are not enough samples to construct a dictionary, or if most of the samples are too small (< 8 bytes being the lower limit). If dictionary training fails, you should use zstd without a dictionary, as the dictionary would’ve been ineffective anyways. If you believe your samples would benefit from a dictionary please open an issue with details, and we can look into it. Note: ZDICT_trainFromBuffer()’s memory usage is about 6 MB. Tips: In general, a reasonable dictionary has a size of ~ 100 KB. It’s possible to select smaller or larger size, just by specifying `dictBufferCapacity`. In general, it’s recommended to provide a few thousands samples, though this can vary a lot. It’s recommended that total size of all samples be about ~x100 times the target size of dictionary."],["ZSTD_CCtx_loadDictionary","ZSTD_CCtx_loadDictionary() : Requires v1.4.0+ Create an internal CDict from `dict` buffer. Decompression will have to use same dictionary. @result : 0, or an error code (which can be tested with ZSTD_isError()). Special: Loading a NULL (or 0-size) dictionary invalidates previous dictionary, meaning “return to no-dictionary mode”. Note 1 : Dictionary is sticky, it will be used for all future compressed frames. To return to “no-dictionary” situation, load a NULL dictionary (or reset parameters). Note 2 : Loading a dictionary involves building tables. It’s also a CPU consuming operation, with non-negligible impact on latency. Tables are dependent on compression parameters, and for this reason, compression parameters can no longer be changed after loading a dictionary. Note 3 :`dict` content will be copied internally. Use experimental ZSTD_CCtx_loadDictionary_byReference() to reference content instead. In such a case, dictionary buffer must outlive its users. Note 4 : Use ZSTD_CCtx_loadDictionary_advanced() to precisely select how dictionary content must be interpreted."],["ZSTD_CCtx_refCDict","ZSTD_CCtx_refCDict() : Requires v1.4.0+ Reference a prepared dictionary, to be used for all next compressed frames. Note that compression parameters are enforced from within CDict, and supersede any compression parameter previously set within CCtx. The parameters ignored are labelled as “superseded-by-cdict” in the ZSTD_cParameter enum docs. The ignored parameters will be used again if the CCtx is returned to no-dictionary mode. The dictionary will remain valid for future compressed frames using same CCtx. @result : 0, or an error code (which can be tested with ZSTD_isError()). Special : Referencing a NULL CDict means “return to no-dictionary mode”. Note 1 : Currently, only one dictionary can be managed. Referencing a new dictionary effectively “discards” any previous one. Note 2 : CDict is just referenced, its lifetime must outlive its usage within CCtx."],["ZSTD_CCtx_refPrefix","ZSTD_CCtx_refPrefix() : Requires v1.4.0+ Reference a prefix (single-usage dictionary) for next compressed frame. A prefix is only used once. Tables are discarded at end of frame (ZSTD_e_end). Decompression will need same prefix to properly regenerate data. Compressing with a prefix is similar in outcome as performing a diff and compressing it, but performs much faster, especially during decompression (compression speed is tunable with compression level). @result : 0, or an error code (which can be tested with ZSTD_isError()). Special: Adding any prefix (including NULL) invalidates any previous prefix or dictionary Note 1 : Prefix buffer is referenced. It must outlive compression. Its content must remain unmodified during compression. Note 2 : If the intention is to diff some large src data blob with some prior version of itself, ensure that the window size is large enough to contain the entire source. See ZSTD_c_windowLog. Note 3 : Referencing a prefix involves building tables, which are dependent on compression parameters. It’s a CPU consuming operation, with non-negligible impact on latency. If there is a need to use the same prefix multiple times, consider loadDictionary instead. Note 4 : By default, the prefix is interpreted as raw content (ZSTD_dct_rawContent). Use experimental ZSTD_CCtx_refPrefix_advanced() to alter dictionary interpretation."],["ZSTD_CCtx_reset","ZSTD_CCtx_reset() : There are 2 different things that can be reset, independently or jointly :"],["ZSTD_CCtx_setParameter","ZSTD_CCtx_setParameter() : Set one compression parameter, selected by enum ZSTD_cParameter. All parameters have valid bounds. Bounds can be queried using ZSTD_cParam_getBounds(). Providing a value beyond bound will either clamp it, or trigger an error (depending on parameter). Setting a parameter is generally only possible during frame initialization (before starting compression). Exception : when using multi-threading mode (nbWorkers >= 1), the following parameters can be updated during compression (within same frame): => compressionLevel, hashLog, chainLog, searchLog, minMatch, targetLength and strategy. new parameters will be active for next job only (after a flush()). @return : an error code (which can be tested using ZSTD_isError())."],["ZSTD_CCtx_setPledgedSrcSize","ZSTD_CCtx_setPledgedSrcSize() : Total input data size to be compressed as a single frame. Value will be written in frame header, unless if explicitly forbidden using ZSTD_c_contentSizeFlag. This value will also be controlled at end of frame, and trigger an error if not respected. @result : 0, or an error code (which can be tested with ZSTD_isError()). Note 1 : pledgedSrcSize==0 actually means zero, aka an empty frame. In order to mean “unknown content size”, pass constant ZSTD_CONTENTSIZE_UNKNOWN. ZSTD_CONTENTSIZE_UNKNOWN is default value for any new frame. Note 2 : pledgedSrcSize is only valid once, for the next frame. It’s discarded at the end of the frame, and replaced by ZSTD_CONTENTSIZE_UNKNOWN. Note 3 : Whenever all input data is provided and consumed in a single round, for example with ZSTD_compress2(), or invoking immediately ZSTD_compressStream2(,,,ZSTD_e_end), this value is automatically overridden by srcSize instead."],["ZSTD_CStreamInSize",""],["ZSTD_CStreamOutSize",""],["ZSTD_DCtx_loadDictionary","ZSTD_DCtx_loadDictionary() : Requires v1.4.0+ Create an internal DDict from dict buffer, to be used to decompress next frames. The dictionary remains valid for all future frames, until explicitly invalidated. @result : 0, or an error code (which can be tested with ZSTD_isError()). Special : Adding a NULL (or 0-size) dictionary invalidates any previous dictionary, meaning “return to no-dictionary mode”. Note 1 : Loading a dictionary involves building tables, which has a non-negligible impact on CPU usage and latency. It’s recommended to “load once, use many times”, to amortize the cost Note 2 :`dict` content will be copied internally, so `dict` can be released after loading. Use ZSTD_DCtx_loadDictionary_byReference() to reference dictionary content instead. Note 3 : Use ZSTD_DCtx_loadDictionary_advanced() to take control of how dictionary content is loaded and interpreted."],["ZSTD_DCtx_refDDict","ZSTD_DCtx_refDDict() : Requires v1.4.0+ Reference a prepared dictionary, to be used to decompress next frames. The dictionary remains active for decompression of future frames using same DCtx."],["ZSTD_DCtx_refPrefix","ZSTD_DCtx_refPrefix() : Requires v1.4.0+ Reference a prefix (single-usage dictionary) to decompress next frame. This is the reverse operation of ZSTD_CCtx_refPrefix(), and must use the same prefix as the one used during compression. Prefix is only used once. Reference is discarded at end of frame. End of frame is reached when ZSTD_decompressStream() returns 0. @result : 0, or an error code (which can be tested with ZSTD_isError()). Note 1 : Adding any prefix (including NULL) invalidates any previously set prefix or dictionary Note 2 : Prefix buffer is referenced. It must outlive decompression. Prefix buffer must remain unmodified up to the end of frame, reached when ZSTD_decompressStream() returns 0. Note 3 : By default, the prefix is treated as raw content (ZSTD_dct_rawContent). Use ZSTD_CCtx_refPrefix_advanced() to alter dictMode (Experimental section) Note 4 : Referencing a raw content prefix has almost no cpu nor memory cost. A full dictionary is more costly, as it requires building tables."],["ZSTD_DCtx_reset","ZSTD_DCtx_reset() : Return a DCtx to clean state. Session and parameters can be reset jointly or separately. Parameters can only be reset when no active frame is being decompressed. @return : 0, or an error code, which can be tested with ZSTD_isError()"],["ZSTD_DCtx_setParameter","ZSTD_DCtx_setParameter() : Set one compression parameter, selected by enum ZSTD_dParameter. All parameters have valid bounds. Bounds can be queried using ZSTD_dParam_getBounds(). Providing a value beyond bound will either clamp it, or trigger an error (depending on parameter). Setting a parameter is only possible during frame initialization (before starting decompression). @return : 0, or an error code (which can be tested using ZSTD_isError())."],["ZSTD_DStreamInSize",""],["ZSTD_DStreamOutSize",""],["ZSTD_cParam_getBounds","ZSTD_cParam_getBounds() : All parameters must belong to an interval with lower and upper bounds, otherwise they will either trigger an error or be automatically clamped. @return : a structure, ZSTD_bounds, which contains - an error status field, which must be tested using ZSTD_isError() - lower and upper bounds, both inclusive"],["ZSTD_compress","Simple API Compresses `src` content as a single zstd compressed frame into already allocated `dst`. Hint : compression runs faster if `dstCapacity` >=  `ZSTD_compressBound(srcSize)`. @return : compressed size written into `dst` (<= `dstCapacity), or an error code if it fails (which can be tested using ZSTD_isError())."],["ZSTD_compress2","ZSTD_compress2() : Behave the same as ZSTD_compressCCtx(), but compression parameters are set using the advanced API. ZSTD_compress2() always starts a new frame. Should cctx hold data from a previously unfinished frame, everything about it is forgotten."],["ZSTD_compressBound",""],["ZSTD_compressCCtx","ZSTD_compressCCtx() : Same as ZSTD_compress(), using an explicit ZSTD_CCtx. Important : in order to behave similarly to `ZSTD_compress()`, this function compresses at requested compression level, ignoring any other parameter . If any advanced parameter was set using the advanced API, they will all be reset. Only `compressionLevel` remains."],["ZSTD_compressStream","Alternative for ZSTD_compressStream2(zcs, output, input, ZSTD_e_continue). NOTE: The return value is different. ZSTD_compressStream() returns a hint for the next read size (if non-zero and not an error). ZSTD_compressStream2() returns the minimum nb of bytes left to flush (if non-zero and not an error)."],["ZSTD_compressStream2","ZSTD_compressStream2() : Requires v1.4.0+ Behaves about the same as ZSTD_compressStream, with additional control on end directive."],["ZSTD_compress_usingCDict","ZSTD_compress_usingCDict() : Compression using a digested Dictionary. Recommended when same dictionary is used multiple times. Note : compression level is decided at dictionary creation time, and frame parameters are hardcoded (dictID=yes, contentSize=yes, checksum=no)"],["ZSTD_compress_usingDict","Simple dictionary API Compression at an explicit compression level using a Dictionary. A dictionary can be any arbitrary data segment (also called a prefix), or a buffer with specified information (see zdict.h). Note : This function loads the dictionary, resulting in significant startup delay. It’s intended for a dictionary used only once. Note 2 : When `dict == NULL || dictSize < 8` no dictionary is used."],["ZSTD_createCCtx",""],["ZSTD_createCDict","ZSTD_createCDict() : When compressing multiple messages or blocks using the same dictionary, it’s recommended to digest the dictionary only once, since it’s a costly operation. ZSTD_createCDict() will create a state from digesting a dictionary. The resulting state can be used for future compression operations with very limited startup cost. ZSTD_CDict can be created once and shared by multiple threads concurrently, since its usage is read-only. @dictBuffer can be released after ZSTD_CDict creation, because its content is copied within CDict. Note 1 : Consider experimental function `ZSTD_createCDict_byReference()` if you prefer to not duplicate @dictBuffer content. Note 2 : A ZSTD_CDict can be created from an empty @dictBuffer, in which case the only thing that it transports is the @compressionLevel. This can be useful in a pipeline featuring ZSTD_compress_usingCDict() exclusively, expecting a ZSTD_CDict parameter with any data, including those without a known dictionary."],["ZSTD_createCStream",""],["ZSTD_createDCtx",""],["ZSTD_createDDict","ZSTD_createDDict() : Create a digested dictionary, ready to start decompression operation without startup delay. dictBuffer can be released after DDict creation, as its content is copied inside DDict."],["ZSTD_createDStream",""],["ZSTD_dParam_getBounds","ZSTD_dParam_getBounds() : All parameters must belong to an interval with lower and upper bounds, otherwise they will either trigger an error or be automatically clamped. @return : a structure, ZSTD_bounds, which contains - an error status field, which must be tested using ZSTD_isError() - both lower and upper bounds, inclusive"],["ZSTD_decompress","ZSTD_decompress() : `compressedSize` : must be the exact size of some number of compressed and/or skippable frames. `dstCapacity` is an upper bound of originalSize to regenerate. If user cannot imply a maximum upper bound, it’s better to use streaming mode to decompress data. @return : the number of bytes decompressed into `dst` (<= `dstCapacity`), or an errorCode if it fails (which can be tested using ZSTD_isError())."],["ZSTD_decompressDCtx","ZSTD_decompressDCtx() : Same as ZSTD_decompress(), requires an allocated ZSTD_DCtx. Compatible with sticky parameters."],["ZSTD_decompressStream",""],["ZSTD_decompress_usingDDict","ZSTD_decompress_usingDDict() : Decompression using a digested Dictionary. Recommended when same dictionary is used multiple times."],["ZSTD_decompress_usingDict","ZSTD_decompress_usingDict() : Decompression using a known Dictionary. Dictionary must be identical to the one used during compression. Note : This function loads the dictionary, resulting in significant startup delay. It’s intended for a dictionary used only once. Note : When `dict == NULL || dictSize < 8` no dictionary is used."],["ZSTD_defaultCLevel",""],["ZSTD_endStream","Equivalent to ZSTD_compressStream2(zcs, output, &emptyInput, ZSTD_e_end)."],["ZSTD_findFrameCompressedSize","ZSTD_findFrameCompressedSize() : Requires v1.4.0+ `src` should point to the start of a ZSTD frame or skippable frame. `srcSize` must be >= first frame size @return : the compressed size of the first frame starting at `src`, suitable to pass as `srcSize` to `ZSTD_decompress` or similar, or an error code if input is invalid"],["ZSTD_flushStream","Equivalent to ZSTD_compressStream2(zcs, output, &emptyInput, ZSTD_e_flush)."],["ZSTD_freeCCtx",""],["ZSTD_freeCDict","ZSTD_freeCDict() : Function frees memory allocated by ZSTD_createCDict(). If a NULL pointer is passed, no operation is performed."],["ZSTD_freeCStream",""],["ZSTD_freeDCtx",""],["ZSTD_freeDDict","ZSTD_freeDDict() : Function frees memory allocated with ZSTD_createDDict() If a NULL pointer is passed, no operation is performed."],["ZSTD_freeDStream",""],["ZSTD_getDecompressedSize","ZSTD_getDecompressedSize() : NOTE: This function is now obsolete, in favor of ZSTD_getFrameContentSize(). Both functions work the same way, but ZSTD_getDecompressedSize() blends “empty”, “unknown” and “error” results to the same return value (0), while ZSTD_getFrameContentSize() gives them separate return values. @return : decompressed size of `src` frame content if known and not empty, 0 otherwise."],["ZSTD_getDictID_fromCDict","ZSTD_getDictID_fromCDict() : Requires v1.5.0+ Provides the dictID of the dictionary loaded into `cdict`. If @return == 0, the dictionary is not conformant to Zstandard specification, or empty. Non-conformant dictionaries can still be loaded, but as content-only dictionaries."],["ZSTD_getDictID_fromDDict","ZSTD_getDictID_fromDDict() : Requires v1.4.0+ Provides the dictID of the dictionary loaded into `ddict`. If @return == 0, the dictionary is not conformant to Zstandard specification, or empty. Non-conformant dictionaries can still be loaded, but as content-only dictionaries."],["ZSTD_getDictID_fromDict","ZSTD_getDictID_fromDict() : Requires v1.4.0+ Provides the dictID stored within dictionary. if @return == 0, the dictionary is not conformant with Zstandard specification. It can still be loaded, but as a content-only dictionary."],["ZSTD_getDictID_fromFrame","ZSTD_getDictID_fromFrame() : Requires v1.4.0+ Provides the dictID required to decompressed the frame stored within `src`. If @return == 0, the dictID could not be decoded. This could for one of the following reasons :"],["ZSTD_getErrorName",""],["ZSTD_getFrameContentSize",""],["ZSTD_initCStream","Equivalent to:"],["ZSTD_initDStream",""],["ZSTD_isError",""],["ZSTD_maxCLevel",""],["ZSTD_minCLevel",""],["ZSTD_sizeof_CCtx","ZSTD_sizeof_*() : Requires v1.4.0+ These functions give the current memory usage of selected object. Note that object memory usage can evolve (increase or decrease) over time."],["ZSTD_sizeof_CDict",""],["ZSTD_sizeof_CStream",""],["ZSTD_sizeof_DCtx",""],["ZSTD_sizeof_DDict",""],["ZSTD_sizeof_DStream",""],["ZSTD_versionNumber","ZSTD_versionNumber() : Return runtime library version, the value is (MAJOR100100 + MINOR*100 + RELEASE)."],["ZSTD_versionString","ZSTD_versionString() : Return runtime library version, like “1.4.5”. Requires v1.3.0+."]],"struct":[["ZDICT_params_t",""],["ZSTD_CCtx_s",""],["ZSTD_CDict_s",""],["ZSTD_DCtx_s",""],["ZSTD_DDict_s",""],["ZSTD_bounds",""],["ZSTD_inBuffer_s","Streaming"],["ZSTD_outBuffer_s",""]],"type":[["ZSTD_CCtx","Explicit context"],["ZSTD_CDict","Bulk processing dictionary API"],["ZSTD_CStream",""],["ZSTD_DCtx",""],["ZSTD_DDict",""],["ZSTD_DStream",""],["ZSTD_inBuffer","Streaming"],["ZSTD_outBuffer",""],["wchar_t",""]]});